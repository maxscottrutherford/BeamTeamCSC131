"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAuth = void 0;
const createAuth = (options, { _logger }) => {
    const _onAuthStateChangeCallbacks = [];
    function _fireAuthStateChangedCallbacks(event) {
        _onAuthStateChangeCallbacks.forEach((callback) => callback(event));
    }
    function _onAuthStateChange(callback) {
        _onAuthStateChangeCallbacks.push(callback);
    }
    //  Update type when there is more than one provider and we know what the interface should be
    // @eslint-disable-next-line
    let authAdapter;
    // if (options?.auth?.provider === 'VENDIA_USER') {
    //   authAdapter = getVendiaUserAuth({ _logger })
    // }
    const auth = {
        login: async ({ username, password }) => {
            if (authAdapter === null) {
                throw new Error('auth.provider must be set via options to use this method.');
            }
            _logger('Logging in...');
            const tokens = await authAdapter.login({ username, password });
            _fireAuthStateChangedCallbacks({ type: 'SET_TOKEN', token: tokens.accessToken });
            _fireAuthStateChangedCallbacks({ type: 'LOGGED_IN' });
        },
        logout: () => {
            if (authAdapter === null) {
                throw new Error('auth.provider must be set via options to use this method.');
            }
            _logger('Logging out...');
            authAdapter.logout();
            _fireAuthStateChangedCallbacks({ type: 'SET_TOKEN', token: null });
            _fireAuthStateChangedCallbacks({ type: 'LOGGED_OUT' });
        },
        getUser: () => {
            if (authAdapter === null) {
                throw new Error('auth.provider must be set via options to use this method.');
            }
            _logger('Getting user...');
            return authAdapter.getUser();
        },
        isAuthenticated: () => {
            if (authAdapter === null) {
                throw new Error('auth.provider must be set via options to use this method.');
            }
            _logger('Checking if authenticated...');
            return authAdapter.isAuthenticated();
        },
        onAuthStateChange: _onAuthStateChange,
        /**
         * Set a JWT token to use with Vendia's Custom JWT auth option
         * @param token - the JWT access token created by your auth provider. Do not add the "Bearer" prefix to the token.
         */
        setToken: (token) => {
            _fireAuthStateChangedCallbacks({ type: 'SET_TOKEN', token });
        },
    };
    return {
        // Internal
        _onAuthStateChange: _onAuthStateChange,
        // Public
        auth,
    };
};
exports.createAuth = createAuth;
