type Variables = {
    [key: string]: any;
};
interface GraphQLError {
    message: string;
    locations?: {
        line: number;
        column: number;
    }[];
    path?: string[];
    extensions?: any;
}
interface GraphQLResponse<T = any> {
    data?: T;
    errors?: GraphQLError[];
    extensions?: any;
    status: number;
    [key: string]: any;
}
interface GraphQLRequestContext<V = Variables> {
    query: string | string[];
    variables?: V;
}
declare class ClientError extends Error {
    response: GraphQLResponse;
    request: GraphQLRequestContext;
    constructor(response: GraphQLResponse, request: GraphQLRequestContext);
    private static extractMessage;
}
export interface Credentials {
    token?: string;
    apiKey?: string;
}
export interface ClientOptions {
    apiUrl: string;
    apiKey?: string;
    websocketUrl?: string;
    /**
     * Provide a function which will be called when any request/subscription errors.
     */
    onError?: (error: ClientError | Error) => void;
    getCredentials?: () => Promise<Credentials>;
    fetch?: any;
    retries?: number;
    debug?: boolean;
}
export type Logger = (formatter: any, ...args: any[]) => void;
export {};
