import { ClientOptions } from './types';
export declare const createVendiaClient: (options: ClientOptions) => {
    request: <T = any, V = import("graphql-request").Variables>(document: import("graphql-request").RequestDocument, variables?: V, requestHeaders?: HeadersInit) => Promise<T>;
    deployments: {
        get(idOrOptions: string | import("./generated").Exact<{
            id: string;
        }>, options?: import("./generated").deploymentsGetOptionsParameter): Promise<{
            __typename?: "Vendia_DeploymentInfo";
            _id: string;
            deploymentTime: string;
            consensusDefinitionHash: string;
            versionTag: string;
            _owner?: string;
        }>;
        list(options?: import("./generated").Exact<{
            order?: import("./generated").Vendia_DeploymentInfo_OrderInput_ | import("./generated").Vendia_DeploymentInfo_OrderInput_[];
            filter?: import("./generated").Vendia_DeploymentInfo_FilterInput_;
            nextToken?: string;
            limit?: number;
        }>): Promise<{
            items: {
                __typename?: "Vendia_DeploymentInfo";
                _id: string;
                deploymentTime: string;
                consensusDefinitionHash: string;
                versionTag: string;
                _owner?: string;
            }[];
            __typename?: "Vendia_DeploymentInfo_Connection_";
            nextToken?: string;
            Vendia_DeploymentInfoItems?: {
                __typename?: "Vendia_DeploymentInfo";
                _id: string;
                deploymentTime: string;
                consensusDefinitionHash: string;
                versionTag: string;
                _owner?: string;
            }[];
        }>;
    };
    blocks: {
        get(idOrOptions: string | import("./generated").Exact<{
            id: string;
        }>, options?: import("./generated").blocksGetOptionsParameter): Promise<{
            __typename?: "Vendia_Block";
            _id: string;
            blockSchemaVersion?: string;
            blockId: string;
            redactedBlockHash: string;
            previousBlockId?: string;
            previousRedactedBlockHash: string;
            blockHash: string;
            previousBlockHash: string;
            status?: import("./generated").Vendia_Block_statusEnum;
            commitTime: string;
            _owner?: string;
            transactions: {
                __typename?: "Vendia_Block_transactions_transactionsItem";
                _id: string;
                hash: string;
                redactedHash?: string;
                signature?: string;
                version?: string;
                submissionTime: string;
                mutations: string[];
                _owner?: string;
            }[];
        }>;
        list(options?: import("./generated").Exact<{
            order?: import("./generated").Vendia_Block_OrderInput_ | import("./generated").Vendia_Block_OrderInput_[];
            filter?: import("./generated").Vendia_Block_FilterInput_;
            limit?: number;
            nextToken?: string;
        }>): Promise<{
            items: {
                __typename?: "Vendia_Block";
                _id: string;
                blockSchemaVersion?: string;
                blockId: string;
                redactedBlockHash: string;
                previousBlockId?: string;
                previousRedactedBlockHash: string;
                blockHash: string;
                previousBlockHash: string;
                status?: import("./generated").Vendia_Block_statusEnum;
                commitTime: string;
                _owner?: string;
                transactions: {
                    __typename?: "Vendia_Block_transactions_transactionsItem";
                    _id: string;
                    hash: string;
                    redactedHash?: string;
                    signature?: string;
                    version?: string;
                    submissionTime: string;
                    mutations: string[];
                    _owner?: string;
                }[];
            }[];
            __typename?: "Vendia_Block_Connection_";
            nextToken?: string;
            Vendia_BlockItems?: {
                __typename?: "Vendia_Block";
                _id: string;
                blockSchemaVersion?: string;
                blockId: string;
                redactedBlockHash: string;
                previousBlockId?: string;
                previousRedactedBlockHash: string;
                blockHash: string;
                previousBlockHash: string;
                status?: import("./generated").Vendia_Block_statusEnum;
                commitTime: string;
                _owner?: string;
                transactions: {
                    __typename?: "Vendia_Block_transactions_transactionsItem";
                    _id: string;
                    hash: string;
                    redactedHash?: string;
                    signature?: string;
                    version?: string;
                    submissionTime: string;
                    mutations: string[];
                    _owner?: string;
                }[];
            }[];
        }>;
        onAdd(handler: (value: {
            __typename?: "Vendia_Block_Result_";
            error?: string;
            result?: {
                __typename?: "Vendia_Block";
                _id: string;
                blockSchemaVersion?: string;
                blockId: string;
                redactedBlockHash: string;
                previousBlockId?: string;
                previousRedactedBlockHash: string;
                blockHash: string;
                previousBlockHash: string;
                status?: import("./generated").Vendia_Block_statusEnum;
                commitTime: string;
                _owner?: string;
                transactions: {
                    __typename?: "Vendia_Block_transactions_transactionsItem";
                    _id: string;
                    hash: string;
                    redactedHash?: string;
                    signature?: string;
                    version?: string;
                    submissionTime: string;
                    mutations: string[];
                    _owner?: string;
                }[];
            };
        }) => void): import("./generated").Unsubscribe;
    };
    storage: {
        files: {
            get(idOrOptions: string | import("./generated").Exact<{
                id: string;
                version?: number;
            }>, options?: import("./generated").filesGetOptionsParameter): Promise<{
                __typename?: "Vendia_File";
                _id: string;
                sourceBucket?: string;
                sourceKey?: string;
                sourceRegion?: string;
                sourceVersion?: string;
                destinationKey: string;
                copyStrategy?: import("./generated").Vendia_File_copyStrategyEnum;
                read?: string[];
                write?: string[];
                etag?: string;
                createdTime?: string;
                updatedTime?: string;
                temporaryUrl?: string;
                fileVersion?: string;
                _owner?: string;
            }>;
            list(options?: import("./generated").Exact<{
                order?: import("./generated").Vendia_File_OrderInput_ | import("./generated").Vendia_File_OrderInput_[];
                filter?: import("./generated").Vendia_File_FilterInput_;
                limit?: number;
                nextToken?: string;
            }>): Promise<{
                items: {
                    __typename?: "Vendia_File";
                    _id: string;
                    sourceBucket?: string;
                    sourceKey?: string;
                    sourceRegion?: string;
                    sourceVersion?: string;
                    destinationKey: string;
                    copyStrategy?: import("./generated").Vendia_File_copyStrategyEnum;
                    read?: string[];
                    write?: string[];
                    etag?: string;
                    createdTime?: string;
                    updatedTime?: string;
                    temporaryUrl?: string;
                    fileVersion?: string;
                    _owner?: string;
                }[];
                __typename?: "Vendia_File_Connection_";
                nextToken?: string;
                Vendia_FileItems?: {
                    __typename?: "Vendia_File";
                    _id: string;
                    sourceBucket?: string;
                    sourceKey?: string;
                    sourceRegion?: string;
                    sourceVersion?: string;
                    destinationKey: string;
                    copyStrategy?: import("./generated").Vendia_File_copyStrategyEnum;
                    read?: string[];
                    write?: string[];
                    etag?: string;
                    createdTime?: string;
                    updatedTime?: string;
                    temporaryUrl?: string;
                    fileVersion?: string;
                    _owner?: string;
                }[];
            }>;
            listVersions(options?: import("./generated").Exact<{
                id: string;
                limit?: number;
                nextToken?: string;
            }>): Promise<{
                __typename?: "Vendia_Version_Connection_";
                nextToken?: string;
                versions?: {
                    __typename?: "Vendia_Version";
                    ordinal: number;
                    block: string;
                    transactions?: {
                        __typename?: "Vendia_Version_Transaction";
                        _id: string;
                        _owner: string;
                        submissionTime: string;
                    }[];
                }[];
            }>;
            add(input: import("./generated").Vendia_File_Input_): Promise<{
                __typename?: "Vendia_File_Transaction_Result_";
                transaction: {
                    __typename?: "Vendia_Transaction";
                    _id: string;
                    transactionId: string;
                    version: string;
                    submissionTime: string;
                    _owner: string;
                };
                result?: {
                    __typename?: "Vendia_File";
                    _id: string;
                    sourceBucket?: string;
                    sourceKey?: string;
                    sourceRegion?: string;
                    sourceVersion?: string;
                    destinationKey: string;
                    copyStrategy?: import("./generated").Vendia_File_copyStrategyEnum;
                    read?: string[];
                    write?: string[];
                    etag?: string;
                    createdTime?: string;
                    updatedTime?: string;
                    temporaryUrl?: string;
                    fileVersion?: string;
                    _owner?: string;
                };
            }>;
            update(input: import("./generated").filesUpdateInputParameter, options?: import("./generated").filesUpdateOptionsParameter): Promise<{
                __typename?: "Vendia_File_Transaction_Result_";
                transaction: {
                    __typename?: "Vendia_Transaction";
                    _id: string;
                    transactionId: string;
                    version: string;
                    submissionTime: string;
                    _owner: string;
                };
                result?: {
                    __typename?: "Vendia_File";
                    _id: string;
                    sourceBucket?: string;
                    sourceKey?: string;
                    sourceRegion?: string;
                    sourceVersion?: string;
                    destinationKey: string;
                    copyStrategy?: import("./generated").Vendia_File_copyStrategyEnum;
                    read?: string[];
                    write?: string[];
                    etag?: string;
                    createdTime?: string;
                    updatedTime?: string;
                    temporaryUrl?: string;
                    fileVersion?: string;
                    _owner?: string;
                };
            }>;
            remove(idOrOptions: string | import("./generated").Exact<{
                condition?: import("./generated").Vendia_File_ConditionInput_;
                id: string;
                syncMode?: import("./generated").Vendia_SyncMode;
            }>, options?: import("./generated").filesRemoveOptionsParameter): Promise<{
                __typename?: "Vendia_File_Delete_Transaction_Result_";
                transaction: {
                    __typename?: "Vendia_Transaction";
                    _id: string;
                    transactionId: string;
                    version: string;
                    submissionTime: string;
                    _owner: string;
                };
            }>;
            onAdd(handler: (value: {
                __typename?: "Vendia_File_Result_";
                error?: string;
                result?: {
                    __typename?: "Vendia_File";
                    _id: string;
                    sourceBucket?: string;
                    sourceKey?: string;
                    sourceRegion?: string;
                    sourceVersion?: string;
                    destinationKey: string;
                    copyStrategy?: import("./generated").Vendia_File_copyStrategyEnum;
                    read?: string[];
                    write?: string[];
                    etag?: string;
                    createdTime?: string;
                    updatedTime?: string;
                    temporaryUrl?: string;
                    fileVersion?: string;
                    _owner?: string;
                };
            }) => void): import("./generated").Unsubscribe;
            onRemove(handler: (value: {
                __typename?: "Vendia_File_Result_";
                error?: string;
                result?: {
                    __typename?: "Vendia_File";
                    _id: string;
                    sourceBucket?: string;
                    sourceKey?: string;
                    sourceRegion?: string;
                    sourceVersion?: string;
                    destinationKey: string;
                    copyStrategy?: import("./generated").Vendia_File_copyStrategyEnum;
                    read?: string[];
                    write?: string[];
                    etag?: string;
                    createdTime?: string;
                    updatedTime?: string;
                    temporaryUrl?: string;
                    fileVersion?: string;
                    _owner?: string;
                };
            }) => void): import("./generated").Unsubscribe;
            onUpdate(handler: (value: {
                __typename?: "Vendia_File_Result_";
                error?: string;
                result?: {
                    __typename?: "Vendia_File";
                    _id: string;
                    sourceBucket?: string;
                    sourceKey?: string;
                    sourceRegion?: string;
                    sourceVersion?: string;
                    destinationKey: string;
                    copyStrategy?: import("./generated").Vendia_File_copyStrategyEnum;
                    read?: string[];
                    write?: string[];
                    etag?: string;
                    createdTime?: string;
                    updatedTime?: string;
                    temporaryUrl?: string;
                    fileVersion?: string;
                    _owner?: string;
                };
            }) => void): import("./generated").Unsubscribe;
        };
        folders: {
            get(idOrOptions: string | import("./generated").Exact<{
                id: string;
                version?: number;
            }>, options?: import("./generated").foldersGetOptionsParameter): Promise<{
                __typename?: "Vendia_Folder";
                _id: string;
                name: string;
                parent?: string;
                read?: string[];
                write?: string[];
                copyStrategy?: import("./generated").Vendia_Folder_copyStrategyEnum;
                createdTime?: string;
                updatedTime?: string;
                _owner?: string;
            }>;
            list(options?: import("./generated").Exact<{
                order?: import("./generated").Vendia_Folder_OrderInput_ | import("./generated").Vendia_Folder_OrderInput_[];
                filter?: import("./generated").Vendia_Folder_FilterInput_;
                limit?: number;
                nextToken?: string;
            }>): Promise<{
                items: {
                    __typename?: "Vendia_Folder";
                    _id: string;
                    name: string;
                    parent?: string;
                    read?: string[];
                    write?: string[];
                    copyStrategy?: import("./generated").Vendia_Folder_copyStrategyEnum;
                    createdTime?: string;
                    updatedTime?: string;
                    _owner?: string;
                }[];
                __typename?: "Vendia_Folder_Connection_";
                nextToken?: string;
                Vendia_FolderItems?: {
                    __typename?: "Vendia_Folder";
                    _id: string;
                    name: string;
                    parent?: string;
                    read?: string[];
                    write?: string[];
                    copyStrategy?: import("./generated").Vendia_Folder_copyStrategyEnum;
                    createdTime?: string;
                    updatedTime?: string;
                    _owner?: string;
                }[];
            }>;
            listVersions(options?: import("./generated").Exact<{
                id: string;
                limit?: number;
                nextToken?: string;
            }>): Promise<{
                __typename?: "Vendia_Version_Connection_";
                nextToken?: string;
                versions?: {
                    __typename?: "Vendia_Version";
                    ordinal: number;
                    block: string;
                    transactions?: {
                        __typename?: "Vendia_Version_Transaction";
                        _id: string;
                        _owner: string;
                        submissionTime: string;
                    }[];
                }[];
            }>;
            add(input: import("./generated").Vendia_Folder_Input_, options?: import("./generated").foldersAddOptionsParameter): Promise<{
                __typename?: "Vendia_Folder_Transaction_Result_";
                transaction: {
                    __typename?: "Vendia_Transaction";
                    _id: string;
                    transactionId: string;
                    version: string;
                    submissionTime: string;
                    _owner: string;
                };
                result?: {
                    __typename?: "Vendia_Folder";
                    _id: string;
                    name: string;
                    parent?: string;
                    read?: string[];
                    write?: string[];
                    copyStrategy?: import("./generated").Vendia_Folder_copyStrategyEnum;
                    createdTime?: string;
                    updatedTime?: string;
                    _owner?: string;
                };
            }>;
            remove(idOrOptions: string | import("./generated").Exact<{
                id: string;
                condition?: import("./generated").Vendia_Folder_ConditionInput_;
                syncMode?: import("./generated").Vendia_SyncMode;
            }>, options?: import("./generated").foldersRemoveOptionsParameter): Promise<{
                __typename?: "Vendia_Folder_Delete_Transaction_Result_";
                transaction: {
                    __typename?: "Vendia_Transaction";
                    _id: string;
                    transactionId: string;
                    version: string;
                    submissionTime: string;
                    _owner: string;
                };
            }>;
            onAdd(handler: (value: {
                __typename?: "Vendia_Folder_Result_";
                error?: string;
                result?: {
                    __typename?: "Vendia_Folder";
                    _id: string;
                    name: string;
                    parent?: string;
                    read?: string[];
                    write?: string[];
                    copyStrategy?: import("./generated").Vendia_Folder_copyStrategyEnum;
                    createdTime?: string;
                    updatedTime?: string;
                    _owner?: string;
                };
            }) => void): import("./generated").Unsubscribe;
            onRemove(handler: (value: {
                __typename?: "Vendia_Folder_Result_";
                error?: string;
                result?: {
                    __typename?: "Vendia_Folder";
                    _id: string;
                    name: string;
                    parent?: string;
                    read?: string[];
                    write?: string[];
                    copyStrategy?: import("./generated").Vendia_Folder_copyStrategyEnum;
                    createdTime?: string;
                    updatedTime?: string;
                    _owner?: string;
                };
            }) => void): import("./generated").Unsubscribe;
            onUpdate(handler: (value: {
                __typename?: "Vendia_Folder_Result_";
                error?: string;
                result?: {
                    __typename?: "Vendia_Folder";
                    _id: string;
                    name: string;
                    parent?: string;
                    read?: string[];
                    write?: string[];
                    copyStrategy?: import("./generated").Vendia_Folder_copyStrategyEnum;
                    createdTime?: string;
                    updatedTime?: string;
                    _owner?: string;
                };
            }) => void): import("./generated").Unsubscribe;
        };
    };
    contracts: {
        get(idOrOptions: string | import("./generated").Exact<{
            id: string;
            version?: number;
        }>, options?: import("./generated").contractsGetOptionsParameter): Promise<{
            __typename?: "Vendia_Contract";
            description?: string;
            revisionId?: string;
            _id: string;
            _owner?: string;
            inputQuery?: string;
            name?: string;
            outputMutation?: string;
            _acl?: {
                __typename?: "Vendia_Acl";
                path?: string;
                operations?: import("./generated").Vendia_OperationType[];
                principal: {
                    __typename?: "Vendia_Acl_Principal";
                    nodes?: string[];
                };
            }[];
            resource?: {
                __typename?: "Vendia_Contract_resource";
                uri?: string;
                csp?: "aws";
                metadata?: {
                    __typename?: "Vendia_Contract_resource_metadata_metadataItem";
                    name?: string;
                    value?: string;
                }[];
            };
        }>;
        list(options?: import("./generated").Exact<{
            limit?: number;
            nextToken?: string;
            order?: import("./generated").Vendia_Contract_OrderInput_ | import("./generated").Vendia_Contract_OrderInput_[];
            filter?: import("./generated").Vendia_Contract_FilterInput_;
        }>): Promise<{
            items: {
                __typename?: "Vendia_Contract";
                description?: string;
                revisionId?: string;
                _id: string;
                _owner?: string;
                inputQuery?: string;
                name?: string;
                outputMutation?: string;
                _acl?: {
                    __typename?: "Vendia_Acl";
                    path?: string;
                    operations?: import("./generated").Vendia_OperationType[];
                    principal: {
                        __typename?: "Vendia_Acl_Principal";
                        nodes?: string[];
                    };
                }[];
                resource?: {
                    __typename?: "Vendia_Contract_resource";
                    uri?: string;
                    csp?: "aws";
                    metadata?: {
                        __typename?: "Vendia_Contract_resource_metadata_metadataItem";
                        name?: string;
                        value?: string;
                    }[];
                };
            }[];
            __typename?: "Vendia_Contract_Connection_";
            nextToken?: string;
            Vendia_ContractItems?: {
                __typename?: "Vendia_Contract";
                description?: string;
                revisionId?: string;
                _id: string;
                _owner?: string;
                inputQuery?: string;
                name?: string;
                outputMutation?: string;
                _acl?: {
                    __typename?: "Vendia_Acl";
                    path?: string;
                    operations?: import("./generated").Vendia_OperationType[];
                    principal: {
                        __typename?: "Vendia_Acl_Principal";
                        nodes?: string[];
                    };
                }[];
                resource?: {
                    __typename?: "Vendia_Contract_resource";
                    uri?: string;
                    csp?: "aws";
                    metadata?: {
                        __typename?: "Vendia_Contract_resource_metadata_metadataItem";
                        name?: string;
                        value?: string;
                    }[];
                };
            }[];
        }>;
        listVersions(options?: import("./generated").Exact<{
            id: string;
            limit?: number;
            nextToken?: string;
        }>): Promise<{
            __typename?: "Vendia_Version_Connection_";
            nextToken?: string;
            versions?: {
                __typename?: "Vendia_Version";
                ordinal: number;
                block: string;
                transactions?: {
                    __typename?: "Vendia_Version_Transaction";
                    _id: string;
                    _owner: string;
                    submissionTime: string;
                }[];
            }[];
        }>;
        add(input: import("./generated").Vendia_Contract_Input_, options?: import("./generated").contractsAddOptionsParameter): Promise<{
            __typename?: "Vendia_Contract_Transaction_Result_";
            transaction: {
                __typename?: "Vendia_Transaction";
                _id: string;
                transactionId: string;
                version: string;
                submissionTime: string;
                _owner: string;
            };
            result?: {
                __typename?: "Vendia_Contract";
                description?: string;
                revisionId?: string;
                _id: string;
                _owner?: string;
                inputQuery?: string;
                name?: string;
                outputMutation?: string;
                _acl?: {
                    __typename?: "Vendia_Acl";
                    operations?: import("./generated").Vendia_OperationType[];
                    path?: string;
                    principal: {
                        __typename?: "Vendia_Acl_Principal";
                        nodes?: string[];
                    };
                }[];
                resource?: {
                    __typename?: "Vendia_Contract_resource";
                    uri?: string;
                    csp?: "aws";
                    metadata?: {
                        __typename?: "Vendia_Contract_resource_metadata_metadataItem";
                        name?: string;
                        value?: string;
                    }[];
                };
            };
        }>;
        update(input: import("./generated").contractsUpdateInputParameter, options?: import("./generated").contractsUpdateOptionsParameter): Promise<{
            __typename?: "Vendia_Contract_Transaction_Result_";
            transaction: {
                __typename?: "Vendia_Transaction";
                _id: string;
                transactionId: string;
                version: string;
                submissionTime: string;
                _owner: string;
            };
            result?: {
                __typename?: "Vendia_Contract";
                description?: string;
                revisionId?: string;
                _id: string;
                _owner?: string;
                inputQuery?: string;
                name?: string;
                outputMutation?: string;
                _acl?: {
                    __typename?: "Vendia_Acl";
                    operations?: import("./generated").Vendia_OperationType[];
                    path?: string;
                    principal: {
                        __typename?: "Vendia_Acl_Principal";
                        nodes?: string[];
                    };
                }[];
                resource?: {
                    __typename?: "Vendia_Contract_resource";
                    uri?: string;
                    csp?: "aws";
                    metadata?: {
                        __typename?: "Vendia_Contract_resource_metadata_metadataItem";
                        name?: string;
                        value?: string;
                    }[];
                };
            };
        }>;
        invoke(idOrOptions: string | import("./generated").Exact<{
            input?: import("./generated").Vendia_Contract_InvokeInput_;
            revisionId?: string;
            id: string;
        }>, options?: import("./generated").contractsInvokeOptionsParameter): Promise<{
            __typename?: "Vendia_Contract_Transaction_Result_";
            transaction: {
                __typename?: "Vendia_Transaction";
                _id: string;
                transactionId: string;
                version: string;
                submissionTime: string;
                _owner: string;
            };
        }>;
        remove(idOrOptions: string | import("./generated").Exact<{
            id: string;
            condition?: import("./generated").Vendia_Contract_ConditionInput_;
            syncMode?: import("./generated").Vendia_SyncMode;
        }>, options?: import("./generated").contractsRemoveOptionsParameter): Promise<{
            __typename?: "Vendia_Contract_Delete_Transaction_Result_";
            transaction: {
                __typename?: "Vendia_Transaction";
                _id: string;
                transactionId: string;
                version: string;
                submissionTime: string;
                _owner: string;
            };
        }>;
    };
    uniInfo: {
        get(): Promise<{
            __typename?: "Vendia_UniInfo";
            name: string;
            sku?: string;
            schema: string;
            schemaNamespace?: string;
            status?: string;
            createdTime?: string;
            updatedTime?: string;
            localNodeName?: string;
            _owner?: string;
            nodes: {
                __typename?: "Vendia_UniInfo_nodes_nodesItem";
                name: string;
                userId: string;
                userEmail?: string;
                description?: string;
                status?: string;
                csp: import("./generated").Vendia_UniInfo_nodes_nodesItem_cspEnum;
                region: string;
                bucketName?: string;
                temporaryCredentials?: {
                    __typename?: "Vendia_UniInfo_nodes_nodesItem_temporaryCredentials";
                    uploadFile?: {
                        __typename?: "Vendia_UniInfo_nodes_nodesItem_temporaryCredentials_uploadFile";
                        accessKeyId?: string;
                        expiration?: string;
                        secretAccessKey?: string;
                        sessionToken?: string;
                    };
                };
                tier?: {
                    __typename?: "Vendia_UniInfo_nodes_nodesItem_tier";
                    share?: import("./generated").Vendia_UniInfo_nodes_nodesItem_tier_shareEnum;
                };
                vendiaAccount?: {
                    __typename?: "Vendia_UniInfo_nodes_nodesItem_vendiaAccount";
                    csp: string;
                    accountId: string;
                    userId?: string;
                    org?: string;
                };
            }[];
        }>;
    };
    settings: {
        get(options?: import("./generated").Exact<{
            version?: number;
        }>): Promise<{
            __typename?: "Vendia_Settings";
            blockReportWebhooks?: string[];
            blockReportEmails?: string[];
            deadLetterWebhooks?: string[];
            deadLetterEmails?: string[];
            resourceMapKeys?: string[];
            resourceMapValues?: string[];
            _owner?: string;
            azure?: {
                __typename?: "Vendia_Settings_azure";
                defaultSubscriptionId?: string;
                defaultTenantId?: string;
            };
            apiSettings?: {
                __typename?: "Vendia_Settings_apiSettings";
                apiKeys?: {
                    __typename?: "Vendia_Settings_apiSettings_apiKeys_apiKeysItem";
                    value?: string;
                    usagePlan?: {
                        __typename?: "Vendia_Settings_apiSettings_apiKeys_apiKeysItem_usagePlan";
                        quotaSettings?: {
                            __typename?: "Vendia_Settings_apiSettings_apiKeys_apiKeysItem_usagePlan_quotaSettings";
                            limit?: number;
                            offset?: number;
                            period?: import("./generated").Vendia_Settings_apiSettings_apiKeys_apiKeysItem_usagePlan_quotaSettings_periodEnum;
                        };
                        throttleSettings?: {
                            __typename?: "Vendia_Settings_apiSettings_apiKeys_apiKeysItem_usagePlan_throttleSettings";
                            burstLimit?: number;
                            rateLimit?: number;
                        };
                    };
                }[];
                auth?: {
                    __typename?: "Vendia_Settings_apiSettings_auth";
                    authorizerType?: import("./generated").Vendia_Settings_apiSettings_auth_authorizerTypeEnum;
                    authorizerArn?: string;
                    allowedAccounts?: string[];
                };
            };
            aws?: {
                __typename?: "Vendia_Settings_aws";
                blockReportSQSQueues?: string[];
                blockReportLambdas?: string[];
                blockReportFirehoses?: string[];
                deadLetterSQSQueues?: string[];
                deadLetterLambdas?: string[];
                s3ReadAccounts?: string[];
                dataDogMonitoring?: {
                    __typename?: "Vendia_Settings_aws_dataDogMonitoring";
                    ddExternalId?: string;
                    ddApiKey?: string;
                    ddLogEndpoint?: string;
                    ddSendLogs?: boolean;
                };
            };
        }>;
        listVersions(options?: import("./generated").Exact<{
            limit?: number;
            nextToken?: string;
        }>): Promise<{
            __typename?: "Vendia_Version_Connection_";
            nextToken?: string;
            versions?: {
                __typename?: "Vendia_Version";
                ordinal: number;
                block: string;
                transactions?: {
                    __typename?: "Vendia_Version_Transaction";
                    _id: string;
                    _owner: string;
                    submissionTime: string;
                }[];
            }[];
        }>;
        update(input: import("./generated").Vendia_Settings_UpdateInput_, options?: import("./generated").settingsUpdateOptionsParameter): Promise<{
            __typename?: "Vendia_Settings_Transaction_Result_";
            transaction: {
                __typename?: "Vendia_Transaction";
                _id: string;
                transactionId: string;
                version: string;
                submissionTime: string;
                _owner: string;
            };
            result?: {
                __typename?: "Vendia_Settings";
                blockReportWebhooks?: string[];
                blockReportEmails?: string[];
                deadLetterWebhooks?: string[];
                deadLetterEmails?: string[];
                resourceMapKeys?: string[];
                resourceMapValues?: string[];
                _owner?: string;
                azure?: {
                    __typename?: "Vendia_Settings_azure";
                    defaultSubscriptionId?: string;
                    defaultTenantId?: string;
                    blockReportFunctions?: {
                        __typename?: "Vendia_Settings_azure_blockReportFunctions_blockReportFunctionsItem";
                        resourceGroupName: string;
                        functionAppName: string;
                        functionName: string;
                    }[];
                    blockReportQueues?: {
                        __typename?: "Vendia_Settings_azure_blockReportQueues_blockReportQueuesItem";
                        resourceGroupName: string;
                        storageAccountName: string;
                        queueName: string;
                    }[];
                    deadLetterFunctions?: {
                        __typename?: "Vendia_Settings_azure_deadLetterFunctions_deadLetterFunctionsItem";
                        resourceGroupName: string;
                        functionAppName: string;
                        functionName: string;
                    }[];
                    deadLetterQueues?: {
                        __typename?: "Vendia_Settings_azure_deadLetterQueues_deadLetterQueuesItem";
                        resourceGroupName: string;
                        storageAccountName: string;
                        queueName: string;
                    }[];
                };
                apiSettings?: {
                    __typename?: "Vendia_Settings_apiSettings";
                    apiKeys?: {
                        __typename?: "Vendia_Settings_apiSettings_apiKeys_apiKeysItem";
                        value?: string;
                        usagePlan?: {
                            __typename?: "Vendia_Settings_apiSettings_apiKeys_apiKeysItem_usagePlan";
                            quotaSettings?: {
                                __typename?: "Vendia_Settings_apiSettings_apiKeys_apiKeysItem_usagePlan_quotaSettings";
                                limit?: number;
                                offset?: number;
                                period?: import("./generated").Vendia_Settings_apiSettings_apiKeys_apiKeysItem_usagePlan_quotaSettings_periodEnum;
                            };
                            throttleSettings?: {
                                __typename?: "Vendia_Settings_apiSettings_apiKeys_apiKeysItem_usagePlan_throttleSettings";
                                burstLimit?: number;
                                rateLimit?: number;
                            };
                        };
                    }[];
                };
                aws?: {
                    __typename?: "Vendia_Settings_aws";
                    blockReportSQSQueues?: string[];
                    blockReportLambdas?: string[];
                    blockReportFirehoses?: string[];
                    deadLetterSQSQueues?: string[];
                    deadLetterLambdas?: string[];
                    s3ReadAccounts?: string[];
                    dataDogMonitoring?: {
                        __typename?: "Vendia_Settings_aws_dataDogMonitoring";
                        ddExternalId?: string;
                        ddApiKey?: string;
                        ddLogEndpoint?: string;
                        ddSendLogs?: boolean;
                    };
                };
            };
        }>;
    };
    entities: {
        test: {
            get(idOrOptions: string | import("./generated").Exact<{
                id: string;
                version?: number;
                readMode?: import("./generated").Vendia_ReadMode;
            }>, options?: import("./generated").TestGetOptionsParameter): Promise<{
                __typename?: "Self_Test";
                _id: string;
                _owner?: string;
                Device?: string;
                TestID?: number;
                OrgAssignment?: string;
                TestName?: string;
                TestMethod?: string;
                Notes?: string;
                Completed?: boolean;
                UpdatedBy?: string;
                _acl?: {
                    __typename?: "Vendia_Acl";
                    operations?: import("./generated").Vendia_OperationType[];
                    path?: string;
                    principal: {
                        __typename?: "Vendia_Acl_Principal";
                        nodes?: string[];
                    };
                }[];
            }>;
            list(options?: import("./generated").Exact<{
                nextToken?: string;
                limit?: number;
                filter?: import("./generated").Self_Test_FilterInput_;
                order?: import("./generated").Self_Test_OrderInput_ | import("./generated").Self_Test_OrderInput_[];
                readMode?: import("./generated").Vendia_ReadMode;
            }>): Promise<{
                items: {
                    __typename?: "Self_Test";
                    _id: string;
                    _owner?: string;
                    Device?: string;
                    TestID?: number;
                    OrgAssignment?: string;
                    TestName?: string;
                    TestMethod?: string;
                    Notes?: string;
                    Completed?: boolean;
                    UpdatedBy?: string;
                    _acl?: {
                        __typename?: "Vendia_Acl";
                        operations?: import("./generated").Vendia_OperationType[];
                        path?: string;
                        principal: {
                            __typename?: "Vendia_Acl_Principal";
                            nodes?: string[];
                        };
                    }[];
                }[];
                __typename?: "Self_Test_Connection_";
                nextToken?: string;
                _TestItems?: {
                    __typename?: "Self_Test";
                    _id: string;
                    _owner?: string;
                    Device?: string;
                    TestID?: number;
                    OrgAssignment?: string;
                    TestName?: string;
                    TestMethod?: string;
                    Notes?: string;
                    Completed?: boolean;
                    UpdatedBy?: string;
                    _acl?: {
                        __typename?: "Vendia_Acl";
                        operations?: import("./generated").Vendia_OperationType[];
                        path?: string;
                        principal: {
                            __typename?: "Vendia_Acl_Principal";
                            nodes?: string[];
                        };
                    }[];
                }[];
            }>;
            add(input: import("./generated").Self_Test_Input_, options?: import("./generated").TestAddOptionsParameter): Promise<{
                __typename?: "Self_Test_Transaction_Result_";
                transaction: {
                    __typename?: "Vendia_Transaction";
                    _id: string;
                    _owner: string;
                    transactionId: string;
                    submissionTime: string;
                    version: string;
                };
                result?: {
                    __typename?: "Self_Test";
                    _id: string;
                    _owner?: string;
                    Device?: string;
                    TestID?: number;
                    OrgAssignment?: string;
                    TestName?: string;
                    TestMethod?: string;
                    Notes?: string;
                    Completed?: boolean;
                    UpdatedBy?: string;
                    _acl?: {
                        __typename?: "Vendia_Acl";
                        operations?: import("./generated").Vendia_OperationType[];
                        path?: string;
                        principal: {
                            __typename?: "Vendia_Acl_Principal";
                            nodes?: string[];
                        };
                    }[];
                };
            }>;
            put(input: import("./generated").TestPutInputParameter, options: import("./generated").TestPutOptionsParameter): Promise<{
                __typename?: "Self_Test_Transaction_Result_";
                transaction: {
                    __typename?: "Vendia_Transaction";
                    _id: string;
                    _owner: string;
                    transactionId: string;
                    submissionTime: string;
                    version: string;
                };
                result?: {
                    __typename?: "Self_Test";
                    _id: string;
                    _owner?: string;
                    Device?: string;
                    TestID?: number;
                    OrgAssignment?: string;
                    TestName?: string;
                    TestMethod?: string;
                    Notes?: string;
                    Completed?: boolean;
                    UpdatedBy?: string;
                    _acl?: {
                        __typename?: "Vendia_Acl";
                        operations?: import("./generated").Vendia_OperationType[];
                        path?: string;
                        principal: {
                            __typename?: "Vendia_Acl_Principal";
                            nodes?: string[];
                        };
                    }[];
                };
            }>;
            update(input: import("./generated").TestUpdateInputParameter, options?: import("./generated").TestUpdateOptionsParameter): Promise<{
                __typename?: "Self_Test_Transaction_Result_";
                transaction: {
                    __typename?: "Vendia_Transaction";
                    _id: string;
                    _owner: string;
                    transactionId: string;
                    submissionTime: string;
                    version: string;
                };
                result?: {
                    __typename?: "Self_Test";
                    _id: string;
                    _owner?: string;
                    Device?: string;
                    TestID?: number;
                    OrgAssignment?: string;
                    TestName?: string;
                    TestMethod?: string;
                    Notes?: string;
                    Completed?: boolean;
                    UpdatedBy?: string;
                    _acl?: {
                        __typename?: "Vendia_Acl";
                        operations?: import("./generated").Vendia_OperationType[];
                        path?: string;
                        principal: {
                            __typename?: "Vendia_Acl_Principal";
                            nodes?: string[];
                        };
                    }[];
                };
            }>;
            remove(idOrOptions: string | import("./generated").Exact<{
                id: string;
                syncMode?: import("./generated").Vendia_SyncMode;
                condition?: import("./generated").Self_Test_ConditionInput_;
            }>, options?: import("./generated").TestRemoveOptionsParameter): Promise<{
                __typename?: "Self_Test_Delete_Transaction_Result_";
                transaction: {
                    __typename?: "Vendia_Transaction";
                    _id: string;
                    _owner: string;
                    transactionId: string;
                    submissionTime: string;
                    version: string;
                };
            }>;
            onAdd(handler: (value: {
                __typename?: "Self_Test_Result_";
                error?: string;
                result?: {
                    __typename?: "Self_Test";
                    _id: string;
                    _owner?: string;
                    Device?: string;
                    TestID?: number;
                    OrgAssignment?: string;
                    TestName?: string;
                    TestMethod?: string;
                    Notes?: string;
                    Completed?: boolean;
                    UpdatedBy?: string;
                };
            }) => void): import("./generated").Unsubscribe;
            onRemove(handler: (value: {
                __typename?: "Self_Test_Result_";
                error?: string;
                result?: {
                    __typename?: "Self_Test";
                    _id: string;
                    _owner?: string;
                    Device?: string;
                    TestID?: number;
                    OrgAssignment?: string;
                    TestName?: string;
                    TestMethod?: string;
                    Notes?: string;
                    Completed?: boolean;
                    UpdatedBy?: string;
                };
            }) => void): import("./generated").Unsubscribe;
            onUpdate(handler: (value: {
                __typename?: "Self_Test_Result_";
                error?: string;
                result?: {
                    __typename?: "Self_Test";
                    _id: string;
                    _owner?: string;
                    Device?: string;
                    TestID?: number;
                    OrgAssignment?: string;
                    TestName?: string;
                    TestMethod?: string;
                    Notes?: string;
                    Completed?: boolean;
                    UpdatedBy?: string;
                };
            }) => void): import("./generated").Unsubscribe;
        };
    };
    sharingPolicies: {
        get(idOrOptions: string | import("./generated").Exact<{
            id?: string;
            name?: string;
            version?: number;
        }>, options?: import("./generated").sharingPoliciesGetOptionsParameter): Promise<{
            __typename?: "Vendia_SharingPolicy";
            _id: string;
            _owner?: string;
            name?: string;
            description?: string;
            entity?: string;
            type?: "DEFAULT";
            _acl?: {
                __typename?: "Vendia_Acl";
                operations?: import("./generated").Vendia_OperationType[];
                path?: string;
                principal: {
                    __typename?: "Vendia_Acl_Principal";
                    nodes?: string[];
                };
            }[];
            acl?: {
                __typename?: "Vendia_SharingPolicy_acl_aclItem";
                operations?: import("./generated").Vendia_SharingPolicy_acl_aclItem_operations_operationsItemEnum[];
                path?: string;
                principal?: {
                    __typename?: "Vendia_SharingPolicy_acl_aclItem_principal";
                    nodes?: string[];
                };
            }[];
        }>;
        list(options?: import("./generated").Exact<{
            limit?: number;
            nextToken?: string;
            order?: import("./generated").Vendia_SharingPolicy_OrderInput_ | import("./generated").Vendia_SharingPolicy_OrderInput_[];
            filter?: import("./generated").Vendia_SharingPolicy_FilterInput_;
        }>): Promise<{
            items: {
                __typename?: "Vendia_SharingPolicy";
                _id: string;
                _owner?: string;
                name?: string;
                description?: string;
                entity?: string;
                type?: "DEFAULT";
                _acl?: {
                    __typename?: "Vendia_Acl";
                    operations?: import("./generated").Vendia_OperationType[];
                    path?: string;
                    principal: {
                        __typename?: "Vendia_Acl_Principal";
                        nodes?: string[];
                    };
                }[];
                acl?: {
                    __typename?: "Vendia_SharingPolicy_acl_aclItem";
                    operations?: import("./generated").Vendia_SharingPolicy_acl_aclItem_operations_operationsItemEnum[];
                    path?: string;
                    principal?: {
                        __typename?: "Vendia_SharingPolicy_acl_aclItem_principal";
                        nodes?: string[];
                    };
                }[];
            }[];
            __typename?: "Vendia_SharingPolicy_Connection_";
            nextToken?: string;
            Vendia_SharingPolicyItems?: {
                __typename?: "Vendia_SharingPolicy";
                _id: string;
                _owner?: string;
                name?: string;
                description?: string;
                entity?: string;
                type?: "DEFAULT";
                _acl?: {
                    __typename?: "Vendia_Acl";
                    operations?: import("./generated").Vendia_OperationType[];
                    path?: string;
                    principal: {
                        __typename?: "Vendia_Acl_Principal";
                        nodes?: string[];
                    };
                }[];
                acl?: {
                    __typename?: "Vendia_SharingPolicy_acl_aclItem";
                    operations?: import("./generated").Vendia_SharingPolicy_acl_aclItem_operations_operationsItemEnum[];
                    path?: string;
                    principal?: {
                        __typename?: "Vendia_SharingPolicy_acl_aclItem_principal";
                        nodes?: string[];
                    };
                }[];
            }[];
        }>;
        listVersions(options?: import("./generated").Exact<{
            id: string;
            limit?: number;
            nextToken?: string;
        }>): Promise<{
            __typename?: "Vendia_Version_Connection_";
            nextToken?: string;
            versions?: {
                __typename?: "Vendia_Version";
                ordinal: number;
                block: string;
                transactions?: {
                    __typename?: "Vendia_Version_Transaction";
                    _id: string;
                    _owner: string;
                    submissionTime: string;
                }[];
            }[];
        }>;
        add(input: import("./generated").Vendia_SharingPolicy_Input_, options?: import("./generated").sharingPoliciesAddOptionsParameter): Promise<{
            __typename?: "Vendia_SharingPolicy_Transaction_Result_";
            transaction: {
                __typename?: "Vendia_Transaction";
                _id: string;
                transactionId: string;
                version: string;
                submissionTime: string;
                _owner: string;
            };
            result?: {
                __typename?: "Vendia_SharingPolicy";
                _id: string;
                _owner?: string;
                name?: string;
                description?: string;
                entity?: string;
                type?: "DEFAULT";
                _acl?: {
                    __typename?: "Vendia_Acl";
                    operations?: import("./generated").Vendia_OperationType[];
                    path?: string;
                    principal: {
                        __typename?: "Vendia_Acl_Principal";
                        nodes?: string[];
                    };
                }[];
                acl?: {
                    __typename?: "Vendia_SharingPolicy_acl_aclItem";
                    operations?: import("./generated").Vendia_SharingPolicy_acl_aclItem_operations_operationsItemEnum[];
                    path?: string;
                    principal?: {
                        __typename?: "Vendia_SharingPolicy_acl_aclItem_principal";
                        nodes?: string[];
                    };
                }[];
            };
        }>;
        update(input: import("./generated").sharingPoliciesUpdateInputParameter, options?: import("./generated").sharingPoliciesUpdateOptionsParameter): Promise<{
            __typename?: "Vendia_SharingPolicy_Transaction_Result_";
            transaction: {
                __typename?: "Vendia_Transaction";
                _id: string;
                transactionId: string;
                version: string;
                submissionTime: string;
                _owner: string;
            };
            result?: {
                __typename?: "Vendia_SharingPolicy";
                _id: string;
                _owner?: string;
                name?: string;
                description?: string;
                entity?: string;
                type?: "DEFAULT";
                _acl?: {
                    __typename?: "Vendia_Acl";
                    operations?: import("./generated").Vendia_OperationType[];
                    path?: string;
                    principal: {
                        __typename?: "Vendia_Acl_Principal";
                        nodes?: string[];
                    };
                }[];
                acl?: {
                    __typename?: "Vendia_SharingPolicy_acl_aclItem";
                    operations?: import("./generated").Vendia_SharingPolicy_acl_aclItem_operations_operationsItemEnum[];
                    path?: string;
                    principal?: {
                        __typename?: "Vendia_SharingPolicy_acl_aclItem_principal";
                        nodes?: string[];
                    };
                }[];
            };
        }>;
        remove(idOrOptions: string | import("./generated").Exact<{
            id?: string;
            name?: string;
            condition?: import("./generated").Vendia_SharingPolicy_ConditionInput_;
            syncMode?: import("./generated").Vendia_SyncMode;
        }>, options?: import("./generated").sharingPoliciesRemoveOptionsParameter): Promise<{
            __typename?: "Vendia_SharingPolicy_Delete_Transaction_Result_";
            transaction: {
                __typename?: "Vendia_Transaction";
                _id: string;
                transactionId: string;
                version: string;
                submissionTime: string;
                _owner: string;
            };
        }>;
    };
};
type VendiaClient = ReturnType<typeof createVendiaClient>;
export type { ClientOptions, VendiaClient };
