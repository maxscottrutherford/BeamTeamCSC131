"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Test__onRemoveDocument = exports.Test__onAddDocument = exports.Test__removeDocument = exports.Test__updateDocument = exports.Test__putDocument = exports.Test__addDocument = exports.Test__listDocument = exports.Test__getDocument = exports._sharingPolicies__removeDocument = exports._sharingPolicies__updateDocument = exports._sharingPolicies__addDocument = exports._sharingPolicies__listVersionsDocument = exports._sharingPolicies__listDocument = exports._sharingPolicies__getDocument = exports._uniInfo__getDocument = exports._settings__updateDocument = exports._settings__listVersionsDocument = exports._settings__getDocument = exports._folders__onUpdateDocument = exports._folders__onRemoveDocument = exports._folders__onAddDocument = exports._folders__removeDocument = exports._folders__addDocument = exports._folders__listVersionsDocument = exports._folders__listDocument = exports._folders__getDocument = exports._files__onUpdateDocument = exports._files__onRemoveDocument = exports._files__onAddDocument = exports._files__removeDocument = exports._files__updateDocument = exports._files__addDocument = exports._files__listVersionsDocument = exports._files__listDocument = exports._files__getDocument = exports._deployments__listDocument = exports._deployments__getDocument = exports._contracts__removeDocument = exports._contracts__invokeDocument = exports._contracts__updateDocument = exports._contracts__addDocument = exports._contracts__listVersionsDocument = exports._contracts__listDocument = exports._contracts__getDocument = exports._blocks__onAddDocument = exports._blocks__listDocument = exports._blocks__getDocument = exports.Vendia_Folder_Result_FragmentFragmentDoc = exports.Vendia_File_Result_FragmentFragmentDoc = exports.Vendia_Block_Result_FragmentFragmentDoc = void 0;
exports.getSharingPolicies = exports.getUniInfo = exports.getSettings = exports.getDeployments = exports.getFolders = exports.getFiles = exports.getContracts = exports.getBlocks = exports.getEntities = exports.Test__onUpdateDocument = void 0;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
exports.Vendia_Block_Result_FragmentFragmentDoc = (0, graphql_tag_1.default) `
    fragment Vendia_Block_Result_Fragment on Vendia_Block_Result_ {
  error
  result {
    _id
    blockSchemaVersion
    blockId
    redactedBlockHash
    previousBlockId
    previousRedactedBlockHash
    blockHash
    previousBlockHash
    status
    commitTime
    _owner
    transactions {
      _id
      hash
      redactedHash
      signature
      version
      submissionTime
      mutations
      _owner
    }
  }
}
    `;
exports.Vendia_File_Result_FragmentFragmentDoc = (0, graphql_tag_1.default) `
    fragment Vendia_File_Result_Fragment on Vendia_File_Result_ {
  error
  result {
    _id
    sourceBucket
    sourceKey
    sourceRegion
    sourceVersion
    destinationKey
    copyStrategy
    read
    write
    etag
    createdTime
    updatedTime
    temporaryUrl
    fileVersion
    _owner
  }
}
    `;
exports.Vendia_Folder_Result_FragmentFragmentDoc = (0, graphql_tag_1.default) `
    fragment Vendia_Folder_Result_Fragment on Vendia_Folder_Result_ {
  error
  result {
    _id
    name
    parent
    read
    write
    copyStrategy
    createdTime
    updatedTime
    _owner
  }
}
    `;
exports._blocks__getDocument = (0, graphql_tag_1.default) `
    query _blocks__get($id: ID!) {
  getVendia_Block(id: $id) {
    _id
    blockSchemaVersion
    blockId
    redactedBlockHash
    previousBlockId
    previousRedactedBlockHash
    blockHash
    previousBlockHash
    status
    commitTime
    _owner
    transactions {
      _id
      hash
      redactedHash
      signature
      version
      submissionTime
      mutations
      _owner
    }
  }
}
    `;
exports._blocks__listDocument = (0, graphql_tag_1.default) `
    query _blocks__list($order: [Vendia_Block_OrderInput_!], $filter: Vendia_Block_FilterInput_, $limit: Int, $nextToken: String) {
  listVendia_BlockItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    nextToken
    Vendia_BlockItems {
      _id
      blockSchemaVersion
      blockId
      redactedBlockHash
      previousBlockId
      previousRedactedBlockHash
      blockHash
      previousBlockHash
      status
      commitTime
      _owner
      transactions {
        _id
        hash
        redactedHash
        signature
        version
        submissionTime
        mutations
        _owner
      }
    }
  }
}
    `;
exports._blocks__onAddDocument = (0, graphql_tag_1.default) `
    subscription _blocks__onAdd {
  onAddVendia_Block {
    ...Vendia_Block_Result_Fragment
  }
}
    ${exports.Vendia_Block_Result_FragmentFragmentDoc}`;
exports._contracts__getDocument = (0, graphql_tag_1.default) `
    query _contracts__get($id: ID!, $version: Int) {
  getVendia_Contract(id: $id, version: $version) {
    ... on Vendia_Contract {
      description
      revisionId
      _acl {
        path
        operations
        principal {
          nodes
        }
      }
      _id
      _owner
      inputQuery
      name
      outputMutation
      resource {
        uri
        csp
        metadata {
          name
          value
        }
      }
    }
  }
}
    `;
exports._contracts__listDocument = (0, graphql_tag_1.default) `
    query _contracts__list($limit: Int, $nextToken: String, $order: [Vendia_Contract_OrderInput_!], $filter: Vendia_Contract_FilterInput_) {
  listVendia_ContractItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    Vendia_ContractItems {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
    }
    nextToken
  }
}
    `;
exports._contracts__listVersionsDocument = (0, graphql_tag_1.default) `
    query _contracts__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_ContractVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
exports._contracts__addDocument = (0, graphql_tag_1.default) `
    mutation _contracts__add($aclInput: Vendia_Acls_Input_, $input: Vendia_Contract_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  addVendia_Contract(aclInput: $aclInput, input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          operations
          path
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
    }
  }
}
    `;
exports._contracts__updateDocument = (0, graphql_tag_1.default) `
    mutation _contracts__update($id: ID!, $aclInput: Vendia_Acls_Input_, $condition: Vendia_Contract_ConditionInput_, $input: Vendia_Contract_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  updateVendia_Contract(
    input: $input
    aclInput: $aclInput
    condition: $condition
    id: $id
    syncMode: $syncMode
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          operations
          path
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
    }
  }
}
    `;
exports._contracts__invokeDocument = (0, graphql_tag_1.default) `
    mutation _contracts__invoke($input: Vendia_Contract_InvokeInput_, $revisionId: String, $id: ID!) {
  invokeVendia_Contract(
    id: $id
    input: $input
    revisionId: $revisionId
    syncMode: ASYNC
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
exports._contracts__removeDocument = (0, graphql_tag_1.default) `
    mutation _contracts__remove($id: ID!, $condition: Vendia_Contract_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  removeVendia_Contract(id: $id, condition: $condition, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
exports._deployments__getDocument = (0, graphql_tag_1.default) `
    query _deployments__get($id: ID!) {
  getVendia_DeploymentInfo(id: $id) {
    _id
    deploymentTime
    consensusDefinitionHash
    versionTag
    _owner
  }
}
    `;
exports._deployments__listDocument = (0, graphql_tag_1.default) `
    query _deployments__list($order: [Vendia_DeploymentInfo_OrderInput_!], $filter: Vendia_DeploymentInfo_FilterInput_, $nextToken: String, $limit: Int) {
  listVendia_DeploymentInfoItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    Vendia_DeploymentInfoItems {
      _id
      deploymentTime
      consensusDefinitionHash
      versionTag
      _owner
    }
    nextToken
  }
}
    `;
exports._files__getDocument = (0, graphql_tag_1.default) `
    query _files__get($id: ID!, $version: Int) {
  getVendia_File(id: $id, version: $version) {
    _id
    sourceBucket
    sourceKey
    sourceRegion
    sourceVersion
    destinationKey
    copyStrategy
    read
    write
    etag
    createdTime
    updatedTime
    temporaryUrl
    fileVersion
    _owner
  }
}
    `;
exports._files__listDocument = (0, graphql_tag_1.default) `
    query _files__list($order: [Vendia_File_OrderInput_!], $filter: Vendia_File_FilterInput_, $limit: Int, $nextToken: String) {
  listVendia_FileItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    nextToken
    Vendia_FileItems {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }
}
    `;
exports._files__listVersionsDocument = (0, graphql_tag_1.default) `
    query _files__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_FileVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
exports._files__addDocument = (0, graphql_tag_1.default) `
    mutation _files__add($input: Vendia_File_Input_!) {
  addVendia_File(input: $input, syncMode: ASYNC) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }
}
    `;
exports._files__updateDocument = (0, graphql_tag_1.default) `
    mutation _files__update($id: ID!, $condition: Vendia_File_ConditionInput_, $input: Vendia_File_UpdateInput_!) {
  updateVendia_File(
    id: $id
    input: $input
    condition: $condition
    syncMode: ASYNC
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }
}
    `;
exports._files__removeDocument = (0, graphql_tag_1.default) `
    mutation _files__remove($condition: Vendia_File_ConditionInput_, $id: ID!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  removeVendia_File(id: $id, condition: $condition, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
exports._files__onAddDocument = (0, graphql_tag_1.default) `
    subscription _files__onAdd {
  onAddVendia_File {
    ...Vendia_File_Result_Fragment
  }
}
    ${exports.Vendia_File_Result_FragmentFragmentDoc}`;
exports._files__onRemoveDocument = (0, graphql_tag_1.default) `
    subscription _files__onRemove {
  onRemoveVendia_File {
    ...Vendia_File_Result_Fragment
  }
}
    ${exports.Vendia_File_Result_FragmentFragmentDoc}`;
exports._files__onUpdateDocument = (0, graphql_tag_1.default) `
    subscription _files__onUpdate {
  onUpdateVendia_File {
    ...Vendia_File_Result_Fragment
  }
}
    ${exports.Vendia_File_Result_FragmentFragmentDoc}`;
exports._folders__getDocument = (0, graphql_tag_1.default) `
    query _folders__get($id: ID!, $version: Int) {
  getVendia_Folder(id: $id, version: $version) {
    _id
    name
    parent
    read
    write
    copyStrategy
    createdTime
    updatedTime
    _owner
  }
}
    `;
exports._folders__listDocument = (0, graphql_tag_1.default) `
    query _folders__list($order: [Vendia_Folder_OrderInput_!], $filter: Vendia_Folder_FilterInput_, $limit: Int, $nextToken: String) {
  listVendia_FolderItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    Vendia_FolderItems {
      _id
      name
      parent
      read
      write
      copyStrategy
      createdTime
      updatedTime
      _owner
    }
    nextToken
  }
}
    `;
exports._folders__listVersionsDocument = (0, graphql_tag_1.default) `
    query _folders__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_FolderVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
exports._folders__addDocument = (0, graphql_tag_1.default) `
    mutation _folders__add($input: Vendia_Folder_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  addVendia_Folder(input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      _id
      name
      parent
      read
      write
      copyStrategy
      createdTime
      updatedTime
      _owner
    }
  }
}
    `;
exports._folders__removeDocument = (0, graphql_tag_1.default) `
    mutation _folders__remove($id: ID!, $condition: Vendia_Folder_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  removeVendia_Folder(id: $id, condition: $condition, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
exports._folders__onAddDocument = (0, graphql_tag_1.default) `
    subscription _folders__onAdd {
  onAddVendia_Folder {
    ...Vendia_Folder_Result_Fragment
  }
}
    ${exports.Vendia_Folder_Result_FragmentFragmentDoc}`;
exports._folders__onRemoveDocument = (0, graphql_tag_1.default) `
    subscription _folders__onRemove {
  onRemoveVendia_Folder {
    ...Vendia_Folder_Result_Fragment
  }
}
    ${exports.Vendia_Folder_Result_FragmentFragmentDoc}`;
exports._folders__onUpdateDocument = (0, graphql_tag_1.default) `
    subscription _folders__onUpdate {
  onUpdateVendia_Folder {
    ...Vendia_Folder_Result_Fragment
  }
}
    ${exports.Vendia_Folder_Result_FragmentFragmentDoc}`;
exports._settings__getDocument = (0, graphql_tag_1.default) `
    query _settings__get($version: Int) {
  getVendia_Settings(version: $version) {
    blockReportWebhooks
    blockReportEmails
    deadLetterWebhooks
    deadLetterEmails
    azure {
      defaultSubscriptionId
      defaultTenantId
    }
    resourceMapKeys
    resourceMapValues
    apiSettings {
      apiKeys {
        value
        usagePlan {
          quotaSettings {
            limit
            offset
            period
          }
          throttleSettings {
            burstLimit
            rateLimit
          }
        }
      }
      auth {
        authorizerType
        authorizerArn
        allowedAccounts
      }
    }
    _owner
    aws {
      blockReportSQSQueues
      blockReportLambdas
      blockReportFirehoses
      deadLetterSQSQueues
      deadLetterLambdas
      s3ReadAccounts
      dataDogMonitoring {
        ddExternalId
        ddApiKey
        ddLogEndpoint
        ddSendLogs
      }
    }
  }
}
    `;
exports._settings__listVersionsDocument = (0, graphql_tag_1.default) `
    query _settings__listVersions($limit: Int, $nextToken: String) {
  listVendia_SettingsVersions(limit: $limit, nextToken: $nextToken) {
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
    nextToken
  }
}
    `;
exports._settings__updateDocument = (0, graphql_tag_1.default) `
    mutation _settings__update($condition: Vendia_Settings_ConditionInput_, $input: Vendia_Settings_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  updateVendia_Settings(condition: $condition, input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      blockReportWebhooks
      blockReportEmails
      deadLetterWebhooks
      deadLetterEmails
      azure {
        blockReportFunctions {
          resourceGroupName
          functionAppName
          functionName
        }
        blockReportQueues {
          resourceGroupName
          storageAccountName
          queueName
        }
        deadLetterFunctions {
          resourceGroupName
          functionAppName
          functionName
        }
        deadLetterQueues {
          resourceGroupName
          storageAccountName
          queueName
        }
        defaultSubscriptionId
        defaultTenantId
      }
      resourceMapKeys
      resourceMapValues
      apiSettings {
        apiKeys {
          value
          usagePlan {
            quotaSettings {
              limit
              offset
              period
            }
            throttleSettings {
              burstLimit
              rateLimit
            }
          }
        }
      }
      _owner
      aws {
        blockReportSQSQueues
        blockReportLambdas
        blockReportFirehoses
        deadLetterSQSQueues
        deadLetterLambdas
        s3ReadAccounts
        dataDogMonitoring {
          ddExternalId
          ddApiKey
          ddLogEndpoint
          ddSendLogs
        }
      }
    }
  }
}
    `;
exports._uniInfo__getDocument = (0, graphql_tag_1.default) `
    query _uniInfo__get {
  getVendia_UniInfo {
    name
    sku
    schema
    schemaNamespace
    status
    createdTime
    updatedTime
    localNodeName
    _owner
    nodes {
      name
      userId
      userEmail
      description
      status
      csp
      region
      bucketName
      temporaryCredentials {
        uploadFile {
          accessKeyId
          expiration
          secretAccessKey
          sessionToken
        }
      }
      tier {
        share
      }
      vendiaAccount {
        csp
        accountId
        userId
        org
      }
    }
  }
}
    `;
exports._sharingPolicies__getDocument = (0, graphql_tag_1.default) `
    query _sharingPolicies__get($id: ID, $name: String, $version: Int) {
  getVendia_SharingPolicy(id: $id, name: $name, version: $version) {
    ... on Vendia_SharingPolicy {
      _acl {
        operations
        path
        principal {
          nodes
        }
      }
      _id
      _owner
      acl {
        operations
        path
        principal {
          nodes
        }
      }
      name
      description
      entity
      type
    }
  }
}
    `;
exports._sharingPolicies__listDocument = (0, graphql_tag_1.default) `
    query _sharingPolicies__list($limit: Int, $nextToken: String, $order: [Vendia_SharingPolicy_OrderInput_!], $filter: Vendia_SharingPolicy_FilterInput_) {
  listVendia_SharingPolicyItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    Vendia_SharingPolicyItems {
      ... on Vendia_SharingPolicy {
        _acl {
          operations
          path
          principal {
            nodes
          }
        }
        _id
        _owner
        acl {
          operations
          path
          principal {
            nodes
          }
        }
        name
        description
        entity
        type
      }
    }
    nextToken
  }
}
    `;
exports._sharingPolicies__listVersionsDocument = (0, graphql_tag_1.default) `
    query _sharingPolicies__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_SharingPolicyVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
exports._sharingPolicies__addDocument = (0, graphql_tag_1.default) `
    mutation _sharingPolicies__add($aclInput: Vendia_Acls_Input_, $input: Vendia_SharingPolicy_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  addVendia_SharingPolicy(aclInput: $aclInput, input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      ... on Vendia_SharingPolicy {
        _acl {
          operations
          path
          principal {
            nodes
          }
        }
        _id
        _owner
        acl {
          operations
          path
          principal {
            nodes
          }
        }
        name
        description
        entity
        type
      }
    }
  }
}
    `;
exports._sharingPolicies__updateDocument = (0, graphql_tag_1.default) `
    mutation _sharingPolicies__update($id: ID, $name: String, $aclInput: Vendia_Acls_Input_, $condition: Vendia_SharingPolicy_ConditionInput_, $input: Vendia_SharingPolicy_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  updateVendia_SharingPolicy(
    input: $input
    aclInput: $aclInput
    condition: $condition
    id: $id
    name: $name
    syncMode: $syncMode
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      ... on Vendia_SharingPolicy {
        _acl {
          operations
          path
          principal {
            nodes
          }
        }
        _id
        _owner
        acl {
          operations
          path
          principal {
            nodes
          }
        }
        name
        description
        entity
        type
      }
    }
  }
}
    `;
exports._sharingPolicies__removeDocument = (0, graphql_tag_1.default) `
    mutation _sharingPolicies__remove($id: ID, $name: String, $condition: Vendia_SharingPolicy_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {
  removeVendia_SharingPolicy(
    id: $id
    name: $name
    condition: $condition
    syncMode: $syncMode
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
exports.Test__getDocument = (0, graphql_tag_1.default) `
    query Test__get($id: ID!, $version: Int, $readMode: Vendia_ReadMode = NODE_COMMITTED) {
  get_Test(id: $id, version: $version, readMode: $readMode) {
    _id
    _owner
    _acl {
      operations
      path
      principal {
        nodes
      }
    }
    Device
    TestID
    OrgAssignment
    TestName
    TestMethod
    Notes
    Completed
    UpdatedBy
  }
}
    `;
exports.Test__listDocument = (0, graphql_tag_1.default) `
    query Test__list($nextToken: String, $limit: Int, $filter: Self_Test_FilterInput_, $order: [Self_Test_OrderInput_!], $readMode: Vendia_ReadMode = NODE_COMMITTED) {
  list_TestItems(
    nextToken: $nextToken
    limit: $limit
    filter: $filter
    order: $order
    readMode: $readMode
  ) {
    _TestItems {
      _id
      _owner
      _acl {
        operations
        path
        principal {
          nodes
        }
      }
      Device
      TestID
      OrgAssignment
      TestName
      TestMethod
      Notes
      Completed
      UpdatedBy
    }
    nextToken
  }
}
    `;
exports.Test__addDocument = (0, graphql_tag_1.default) `
    mutation Test__add($input: Self_Test_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED, $aclInput: Vendia_Acls_Input_) {
  add_Test(input: $input, syncMode: $syncMode, aclInput: $aclInput) {
    transaction {
      _id
      _owner
      transactionId
      submissionTime
      version
    }
    result {
      _id
      _owner
      _acl {
        operations
        path
        principal {
          nodes
        }
      }
      Device
      TestID
      OrgAssignment
      TestName
      TestMethod
      Notes
      Completed
      UpdatedBy
    }
  }
}
    `;
exports.Test__putDocument = (0, graphql_tag_1.default) `
    mutation Test__put($id: ID!, $input: Self_Test_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED, $condition: Self_Test_ConditionInput_, $aclInput: Vendia_Acls_Input_!) {
  put_Test(
    id: $id
    input: $input
    syncMode: $syncMode
    condition: $condition
    aclInput: $aclInput
  ) {
    transaction {
      _id
      _owner
      transactionId
      submissionTime
      version
    }
    result {
      _id
      _owner
      _acl {
        operations
        path
        principal {
          nodes
        }
      }
      Device
      TestID
      OrgAssignment
      TestName
      TestMethod
      Notes
      Completed
      UpdatedBy
    }
  }
}
    `;
exports.Test__updateDocument = (0, graphql_tag_1.default) `
    mutation Test__update($id: ID!, $input: Self_Test_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED, $condition: Self_Test_ConditionInput_, $aclInput: Vendia_Acls_Input_) {
  update_Test(
    id: $id
    input: $input
    syncMode: $syncMode
    condition: $condition
    aclInput: $aclInput
  ) {
    transaction {
      _id
      _owner
      transactionId
      submissionTime
      version
    }
    result {
      _id
      _owner
      _acl {
        operations
        path
        principal {
          nodes
        }
      }
      Device
      TestID
      OrgAssignment
      TestName
      TestMethod
      Notes
      Completed
      UpdatedBy
    }
  }
}
    `;
exports.Test__removeDocument = (0, graphql_tag_1.default) `
    mutation Test__remove($id: ID!, $syncMode: Vendia_SyncMode = NODE_COMMITTED, $condition: Self_Test_ConditionInput_) {
  remove_Test(id: $id, syncMode: $syncMode, condition: $condition) {
    transaction {
      _id
      _owner
      transactionId
      submissionTime
      version
    }
  }
}
    `;
exports.Test__onAddDocument = (0, graphql_tag_1.default) `
    subscription Test__onAdd {
  onAdd_Test {
    error
    result {
      _id
      _owner
      Device
      TestID
      OrgAssignment
      TestName
      TestMethod
      Notes
      Completed
      UpdatedBy
    }
  }
}
    `;
exports.Test__onRemoveDocument = (0, graphql_tag_1.default) `
    subscription Test__onRemove {
  onRemove_Test {
    error
    result {
      _id
      _owner
      Device
      TestID
      OrgAssignment
      TestName
      TestMethod
      Notes
      Completed
      UpdatedBy
    }
  }
}
    `;
exports.Test__onUpdateDocument = (0, graphql_tag_1.default) `
    subscription Test__onUpdate {
  onUpdate_Test {
    error
    result {
      _id
      _owner
      Device
      TestID
      OrgAssignment
      TestName
      TestMethod
      Notes
      Completed
      UpdatedBy
    }
  }
}
    `;
const defaultWrapper = (action, _operationName) => action();
function getEntities({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
    return {
        test: {
            get(idOrOptions, options) {
                const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
                return _requestWrapper((wrappedRequestHeaders) => {
                    return _gqlClient.request(exports.Test__getDocument, variables, wrappedRequestHeaders)
                        .then(res => res.get_Test);
                }, 'get_Test');
            },
            list(options) {
                const variables = options;
                return _requestWrapper((wrappedRequestHeaders) => {
                    return _gqlClient.request(exports.Test__listDocument, variables, wrappedRequestHeaders)
                        .then(res => { const updatedRes = { ...res.list_TestItems, items: res.list_TestItems?._TestItems }; delete updatedRes._TestItems; return updatedRes; });
                }, 'list_TestItems');
            },
            add(input, options) {
                const variables = { ...options, input };
                return _requestWrapper((wrappedRequestHeaders) => {
                    return _gqlClient.request(exports.Test__addDocument, variables, wrappedRequestHeaders)
                        .then(res => res.add_Test);
                }, 'add_Test');
            },
            put(input, options) {
                const { _id, ...rest } = input;
                const variables = { ...options, id: _id, input: rest };
                return _requestWrapper((wrappedRequestHeaders) => {
                    return _gqlClient.request(exports.Test__putDocument, variables, wrappedRequestHeaders)
                        .then(res => res.put_Test);
                }, 'put_Test');
            },
            update(input, options) {
                const { _id, ...rest } = input;
                const variables = { ...options, id: _id, input: rest };
                return _requestWrapper((wrappedRequestHeaders) => {
                    return _gqlClient.request(exports.Test__updateDocument, variables, wrappedRequestHeaders)
                        .then(res => res.update_Test);
                }, 'update_Test');
            },
            remove(idOrOptions, options) {
                const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
                return _requestWrapper((wrappedRequestHeaders) => {
                    return _gqlClient.request(exports.Test__removeDocument, variables, wrappedRequestHeaders)
                        .then(res => res.remove_Test);
                }, 'remove_Test');
            },
            onAdd(handler) {
                return _subscribe({ query: exports.Test__onAddDocument }, ({ data }) => { return handler(data.onAdd_Test); });
            },
            onRemove(handler) {
                return _subscribe({ query: exports.Test__onRemoveDocument }, ({ data }) => { return handler(data.onRemove_Test); });
            },
            onUpdate(handler) {
                return _subscribe({ query: exports.Test__onUpdateDocument }, ({ data }) => { return handler(data.onUpdate_Test); });
            }
        }
    };
}
exports.getEntities = getEntities;
function getBlocks({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
    return {
        get(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._blocks__getDocument, variables, wrappedRequestHeaders)
                    .then(res => res.getVendia_Block);
            }, 'getVendia_Block');
        },
        list(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._blocks__listDocument, variables, wrappedRequestHeaders)
                    .then(res => { const updatedRes = { ...res.listVendia_BlockItems, items: res.listVendia_BlockItems?.Vendia_BlockItems }; delete updatedRes.Vendia_BlockItems; return updatedRes; });
            }, 'listVendia_BlockItems');
        },
        onAdd(handler) {
            return _subscribe({ query: exports._blocks__onAddDocument }, ({ data }) => { return handler(data.onAddVendia_Block); });
        }
    };
}
exports.getBlocks = getBlocks;
function getContracts({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
    return {
        get(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._contracts__getDocument, variables, wrappedRequestHeaders)
                    .then(res => res.getVendia_Contract);
            }, 'getVendia_Contract');
        },
        list(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._contracts__listDocument, variables, wrappedRequestHeaders)
                    .then(res => { const updatedRes = { ...res.listVendia_ContractItems, items: res.listVendia_ContractItems?.Vendia_ContractItems }; delete updatedRes.Vendia_ContractItems; return updatedRes; });
            }, 'listVendia_ContractItems');
        },
        listVersions(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._contracts__listVersionsDocument, variables, wrappedRequestHeaders)
                    .then(res => res.listVendia_ContractVersions);
            }, 'listVendia_ContractVersions');
        },
        add(input, options) {
            const variables = { ...options, input };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._contracts__addDocument, variables, wrappedRequestHeaders)
                    .then(res => res.addVendia_Contract);
            }, 'addVendia_Contract');
        },
        update(input, options) {
            const { _id, ...rest } = input;
            const variables = { ...options, id: _id, input: rest };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._contracts__updateDocument, variables, wrappedRequestHeaders)
                    .then(res => res.updateVendia_Contract);
            }, 'updateVendia_Contract');
        },
        invoke(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._contracts__invokeDocument, variables, wrappedRequestHeaders)
                    .then(res => res.invokeVendia_Contract);
            }, 'invokeVendia_Contract');
        },
        remove(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._contracts__removeDocument, variables, wrappedRequestHeaders)
                    .then(res => res.removeVendia_Contract);
            }, 'removeVendia_Contract');
        }
    };
}
exports.getContracts = getContracts;
function getFiles({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
    return {
        get(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._files__getDocument, variables, wrappedRequestHeaders)
                    .then(res => res.getVendia_File);
            }, 'getVendia_File');
        },
        list(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._files__listDocument, variables, wrappedRequestHeaders)
                    .then(res => { const updatedRes = { ...res.listVendia_FileItems, items: res.listVendia_FileItems?.Vendia_FileItems }; delete updatedRes.Vendia_FileItems; return updatedRes; });
            }, 'listVendia_FileItems');
        },
        listVersions(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._files__listVersionsDocument, variables, wrappedRequestHeaders)
                    .then(res => res.listVendia_FileVersions);
            }, 'listVendia_FileVersions');
        },
        add(input) {
            const variables = { input };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._files__addDocument, variables, wrappedRequestHeaders)
                    .then(res => res.addVendia_File);
            }, 'addVendia_File');
        },
        update(input, options) {
            const { _id, ...rest } = input;
            const variables = { ...options, id: _id, input: rest };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._files__updateDocument, variables, wrappedRequestHeaders)
                    .then(res => res.updateVendia_File);
            }, 'updateVendia_File');
        },
        remove(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._files__removeDocument, variables, wrappedRequestHeaders)
                    .then(res => res.removeVendia_File);
            }, 'removeVendia_File');
        },
        onAdd(handler) {
            return _subscribe({ query: exports._files__onAddDocument }, ({ data }) => { return handler(data.onAddVendia_File); });
        },
        onRemove(handler) {
            return _subscribe({ query: exports._files__onRemoveDocument }, ({ data }) => { return handler(data.onRemoveVendia_File); });
        },
        onUpdate(handler) {
            return _subscribe({ query: exports._files__onUpdateDocument }, ({ data }) => { return handler(data.onUpdateVendia_File); });
        }
    };
}
exports.getFiles = getFiles;
function getFolders({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
    return {
        get(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._folders__getDocument, variables, wrappedRequestHeaders)
                    .then(res => res.getVendia_Folder);
            }, 'getVendia_Folder');
        },
        list(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._folders__listDocument, variables, wrappedRequestHeaders)
                    .then(res => { const updatedRes = { ...res.listVendia_FolderItems, items: res.listVendia_FolderItems?.Vendia_FolderItems }; delete updatedRes.Vendia_FolderItems; return updatedRes; });
            }, 'listVendia_FolderItems');
        },
        listVersions(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._folders__listVersionsDocument, variables, wrappedRequestHeaders)
                    .then(res => res.listVendia_FolderVersions);
            }, 'listVendia_FolderVersions');
        },
        add(input, options) {
            const variables = { ...options, input };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._folders__addDocument, variables, wrappedRequestHeaders)
                    .then(res => res.addVendia_Folder);
            }, 'addVendia_Folder');
        },
        remove(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._folders__removeDocument, variables, wrappedRequestHeaders)
                    .then(res => res.removeVendia_Folder);
            }, 'removeVendia_Folder');
        },
        onAdd(handler) {
            return _subscribe({ query: exports._folders__onAddDocument }, ({ data }) => { return handler(data.onAddVendia_Folder); });
        },
        onRemove(handler) {
            return _subscribe({ query: exports._folders__onRemoveDocument }, ({ data }) => { return handler(data.onRemoveVendia_Folder); });
        },
        onUpdate(handler) {
            return _subscribe({ query: exports._folders__onUpdateDocument }, ({ data }) => { return handler(data.onUpdateVendia_Folder); });
        }
    };
}
exports.getFolders = getFolders;
function getDeployments({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
    return {
        get(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._deployments__getDocument, variables, wrappedRequestHeaders)
                    .then(res => res.getVendia_DeploymentInfo);
            }, 'getVendia_DeploymentInfo');
        },
        list(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._deployments__listDocument, variables, wrappedRequestHeaders)
                    .then(res => { const updatedRes = { ...res.listVendia_DeploymentInfoItems, items: res.listVendia_DeploymentInfoItems?.Vendia_DeploymentInfoItems }; delete updatedRes.Vendia_DeploymentInfoItems; return updatedRes; });
            }, 'listVendia_DeploymentInfoItems');
        }
    };
}
exports.getDeployments = getDeployments;
function getSettings({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
    return {
        get(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._settings__getDocument, variables, wrappedRequestHeaders)
                    .then(res => res.getVendia_Settings);
            }, 'getVendia_Settings');
        },
        listVersions(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._settings__listVersionsDocument, variables, wrappedRequestHeaders)
                    .then(res => res.listVendia_SettingsVersions);
            }, 'listVendia_SettingsVersions');
        },
        update(input, options) {
            const variables = { ...options, input };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._settings__updateDocument, variables, wrappedRequestHeaders)
                    .then(res => res.updateVendia_Settings);
            }, 'updateVendia_Settings');
        }
    };
}
exports.getSettings = getSettings;
function getUniInfo({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
    return {
        get() {
            const variables = {};
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._uniInfo__getDocument, variables, wrappedRequestHeaders)
                    .then(res => res.getVendia_UniInfo);
            }, 'getVendia_UniInfo');
        }
    };
}
exports.getUniInfo = getUniInfo;
function getSharingPolicies({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
    return {
        get(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._sharingPolicies__getDocument, variables, wrappedRequestHeaders)
                    .then(res => res.getVendia_SharingPolicy);
            }, 'getVendia_SharingPolicy');
        },
        list(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._sharingPolicies__listDocument, variables, wrappedRequestHeaders)
                    .then(res => { const updatedRes = { ...res.listVendia_SharingPolicyItems, items: res.listVendia_SharingPolicyItems?.Vendia_SharingPolicyItems }; delete updatedRes.Vendia_SharingPolicyItems; return updatedRes; });
            }, 'listVendia_SharingPolicyItems');
        },
        listVersions(options) {
            const variables = options;
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._sharingPolicies__listVersionsDocument, variables, wrappedRequestHeaders)
                    .then(res => res.listVendia_SharingPolicyVersions);
            }, 'listVendia_SharingPolicyVersions');
        },
        add(input, options) {
            const variables = { ...options, input };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._sharingPolicies__addDocument, variables, wrappedRequestHeaders)
                    .then(res => res.addVendia_SharingPolicy);
            }, 'addVendia_SharingPolicy');
        },
        update(input, options) {
            const { _id, ...rest } = input;
            const variables = { ...options, id: _id, input: rest };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._sharingPolicies__updateDocument, variables, wrappedRequestHeaders)
                    .then(res => res.updateVendia_SharingPolicy);
            }, 'updateVendia_SharingPolicy');
        },
        remove(idOrOptions, options) {
            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };
            return _requestWrapper((wrappedRequestHeaders) => {
                return _gqlClient.request(exports._sharingPolicies__removeDocument, variables, wrappedRequestHeaders)
                    .then(res => res.removeVendia_SharingPolicy);
            }, 'removeVendia_SharingPolicy');
        }
    };
}
exports.getSharingPolicies = getSharingPolicies;
