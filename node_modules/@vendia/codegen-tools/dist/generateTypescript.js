import { codegen } from '@graphql-codegen/core';
import { operations } from './commonOperations.js';
import { generateEntityOperations } from './entityOperations.js';
import { printSchema, parse } from 'graphql';
import $RefParser from '@apidevtools/json-schema-ref-parser';
export const generateTypescript = async function ({ graphQlSchema, schemaJson, schemaNamespace }) {
    const dereferencedSchema = await $RefParser.dereference(schemaJson, { dereference: { circular: false } });
    // Use that to generate the entity operations
    const entityOperations = generateEntityOperations(dereferencedSchema, schemaNamespace);
    // Grab some common operations & merge with entity operations
    const allOperations = operations + entityOperations;
    const plugins = [
        {
            typescript: {
                // This prevents code that requires enum values from requiring the actual enum
                // eg, for syncMode, we can just pass the string 'ASYNC' rather than needing to import
                // and use Vendia_SyncMode.Async. Also, even if we wanted to use the enum, I had problems
                // trying to use import it from the generated d.ts file and use it as a runtime value
                enumsAsTypes: true,
            },
        },
        {
            typescriptOperations: {
                // This is supposed to be the default, but I'm not seeing this behavior in the generated code...
                arrayInputCoercion: true,
            },
        },
        {
            vendiaClientPlugin: {
                schemaNamespace,
                schemaJson: dereferencedSchema,
            },
        },
    ];
    const config = {
        documents: [{ document: parse(allOperations) }],
        config: {
            namingConvention: 'keep',
        },
        // used by a plugin internally, although the 'typescript' plugin currently
        // returns the string output, rather than writing to a file
        filename: 'generated.ts',
        schema: parse(printSchema(graphQlSchema)),
        plugins,
        pluginMap: {
            // Loading these packages on-demand (as the official demo site for graphQL codegen does) seems to bypass
            // some strange module loading issues that occur otherwise (process.hrtime is not a function)
            typescript: await import('@graphql-codegen/typescript'),
            typescriptOperations: await import('@graphql-codegen/typescript-operations'),
            vendiaClientPlugin: await import('@vendia/codegen-vendia-client-plugin'),
        },
    };
    return codegen(config);
};
