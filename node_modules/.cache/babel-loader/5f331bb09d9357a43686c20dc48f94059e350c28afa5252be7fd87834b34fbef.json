{"ast":null,"code":"/**\r\n *\r\n * common\r\n *\r\n */\nimport { areGraphQLErrors, extendedTypeof, isObject } from './utils.mjs';\n/**\r\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\r\n *\r\n * @category Common\r\n */\nexport const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\n/**\r\n * The deprecated subprotocol used by [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\r\n *\r\n * @private\r\n */\nexport const DEPRECATED_GRAPHQL_WS_PROTOCOL = 'graphql-ws';\n/**\r\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\r\n *\r\n * @category Common\r\n */\nexport var CloseCode;\n(function (CloseCode) {\n  CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n  CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n  CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\n  CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\n  /** Tried subscribing before connect ack */\n  CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n  CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\n  CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n  CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n  CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n  /** Subscriber distinction is very important */\n  CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n  CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n})(CloseCode || (CloseCode = {}));\n/**\r\n * Types of messages allowed to be sent by the client/server over the WS protocol.\r\n *\r\n * @category Common\r\n */\nexport var MessageType;\n(function (MessageType) {\n  MessageType[\"ConnectionInit\"] = \"connection_init\";\n  MessageType[\"ConnectionAck\"] = \"connection_ack\";\n  MessageType[\"Ping\"] = \"ping\";\n  MessageType[\"Pong\"] = \"pong\";\n  MessageType[\"Subscribe\"] = \"subscribe\";\n  MessageType[\"Next\"] = \"next\";\n  MessageType[\"Error\"] = \"error\";\n  MessageType[\"Complete\"] = \"complete\";\n})(MessageType || (MessageType = {}));\n/**\r\n * Validates the message against the GraphQL over WebSocket Protocol.\r\n *\r\n * Invalid messages will throw descriptive errors.\r\n *\r\n * @category Common\r\n */\nexport function validateMessage(val) {\n  if (!isObject(val)) {\n    throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\n  }\n  if (!val.type) {\n    throw new Error(`Message is missing the 'type' property`);\n  }\n  if (typeof val.type !== 'string') {\n    throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\n  }\n  switch (val.type) {\n    case MessageType.ConnectionInit:\n    case MessageType.ConnectionAck:\n    case MessageType.Ping:\n    case MessageType.Pong:\n      {\n        if (val.payload != null && !isObject(val.payload)) {\n          throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`);\n        }\n        break;\n      }\n    case MessageType.Subscribe:\n      {\n        if (typeof val.id !== 'string') {\n          throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n        }\n        if (!val.id) {\n          throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n        }\n        if (!isObject(val.payload)) {\n          throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n        }\n        if (typeof val.payload.query !== 'string') {\n          throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\n        }\n        if (val.payload.variables != null && !isObject(val.payload.variables)) {\n          throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\n        }\n        if (val.payload.operationName != null && extendedTypeof(val.payload.operationName) !== 'string') {\n          throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\n        }\n        if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n          throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\n        }\n        break;\n      }\n    case MessageType.Next:\n      {\n        if (typeof val.id !== 'string') {\n          throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n        }\n        if (!val.id) {\n          throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n        }\n        if (!isObject(val.payload)) {\n          throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n        }\n        break;\n      }\n    case MessageType.Error:\n      {\n        if (typeof val.id !== 'string') {\n          throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n        }\n        if (!val.id) {\n          throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n        }\n        if (!areGraphQLErrors(val.payload)) {\n          throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\n        }\n        break;\n      }\n    case MessageType.Complete:\n      {\n        if (typeof val.id !== 'string') {\n          throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n        }\n        if (!val.id) {\n          throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n        }\n        break;\n      }\n    default:\n      throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n  }\n  return val;\n}\n/**\r\n * Checks if the provided value is a valid GraphQL over WebSocket message.\r\n *\r\n * @deprecated Use `validateMessage` instead.\r\n *\r\n * @category Common\r\n */\nexport function isMessage(val) {\n  try {\n    validateMessage(val);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n/**\r\n * Parses the raw websocket message data to a valid message.\r\n *\r\n * @category Common\r\n */\nexport function parseMessage(data, reviver) {\n  return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);\n}\n/**\r\n * Stringifies a valid message ready to be sent through the socket.\r\n *\r\n * @category Common\r\n */\nexport function stringifyMessage(msg, replacer) {\n  validateMessage(msg);\n  return JSON.stringify(msg, replacer);\n}","map":{"version":3,"names":["areGraphQLErrors","extendedTypeof","isObject","GRAPHQL_TRANSPORT_WS_PROTOCOL","DEPRECATED_GRAPHQL_WS_PROTOCOL","CloseCode","MessageType","validateMessage","val","Error","type","ConnectionInit","ConnectionAck","Ping","Pong","payload","Subscribe","id","query","variables","operationName","extensions","Next","JSON","stringify","Complete","isMessage","_a","parseMessage","data","reviver","parse","stringifyMessage","msg","replacer"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/node_modules/graphql-ws/lib/common.mjs"],"sourcesContent":["/**\r\n *\r\n * common\r\n *\r\n */\r\nimport { areGraphQLErrors, extendedTypeof, isObject } from './utils.mjs';\r\n/**\r\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\r\n *\r\n * @category Common\r\n */\r\nexport const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\r\n/**\r\n * The deprecated subprotocol used by [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\r\n *\r\n * @private\r\n */\r\nexport const DEPRECATED_GRAPHQL_WS_PROTOCOL = 'graphql-ws';\r\n/**\r\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\r\n *\r\n * @category Common\r\n */\r\nexport var CloseCode;\r\n(function (CloseCode) {\r\n    CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\r\n    CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\r\n    CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\r\n    CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\r\n    /** Tried subscribing before connect ack */\r\n    CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\r\n    CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\r\n    CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\r\n    CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\r\n    CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\r\n    /** Subscriber distinction is very important */\r\n    CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\r\n    CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\r\n})(CloseCode || (CloseCode = {}));\r\n/**\r\n * Types of messages allowed to be sent by the client/server over the WS protocol.\r\n *\r\n * @category Common\r\n */\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    MessageType[\"ConnectionInit\"] = \"connection_init\";\r\n    MessageType[\"ConnectionAck\"] = \"connection_ack\";\r\n    MessageType[\"Ping\"] = \"ping\";\r\n    MessageType[\"Pong\"] = \"pong\";\r\n    MessageType[\"Subscribe\"] = \"subscribe\";\r\n    MessageType[\"Next\"] = \"next\";\r\n    MessageType[\"Error\"] = \"error\";\r\n    MessageType[\"Complete\"] = \"complete\";\r\n})(MessageType || (MessageType = {}));\r\n/**\r\n * Validates the message against the GraphQL over WebSocket Protocol.\r\n *\r\n * Invalid messages will throw descriptive errors.\r\n *\r\n * @category Common\r\n */\r\nexport function validateMessage(val) {\r\n    if (!isObject(val)) {\r\n        throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\r\n    }\r\n    if (!val.type) {\r\n        throw new Error(`Message is missing the 'type' property`);\r\n    }\r\n    if (typeof val.type !== 'string') {\r\n        throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\r\n    }\r\n    switch (val.type) {\r\n        case MessageType.ConnectionInit:\r\n        case MessageType.ConnectionAck:\r\n        case MessageType.Ping:\r\n        case MessageType.Pong: {\r\n            if (val.payload != null && !isObject(val.payload)) {\r\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`);\r\n            }\r\n            break;\r\n        }\r\n        case MessageType.Subscribe: {\r\n            if (typeof val.id !== 'string') {\r\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\r\n            }\r\n            if (!val.id) {\r\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\r\n            }\r\n            if (!isObject(val.payload)) {\r\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\r\n            }\r\n            if (typeof val.payload.query !== 'string') {\r\n                throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\r\n            }\r\n            if (val.payload.variables != null && !isObject(val.payload.variables)) {\r\n                throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\r\n            }\r\n            if (val.payload.operationName != null &&\r\n                extendedTypeof(val.payload.operationName) !== 'string') {\r\n                throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\r\n            }\r\n            if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\r\n                throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\r\n            }\r\n            break;\r\n        }\r\n        case MessageType.Next: {\r\n            if (typeof val.id !== 'string') {\r\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\r\n            }\r\n            if (!val.id) {\r\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\r\n            }\r\n            if (!isObject(val.payload)) {\r\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\r\n            }\r\n            break;\r\n        }\r\n        case MessageType.Error: {\r\n            if (typeof val.id !== 'string') {\r\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\r\n            }\r\n            if (!val.id) {\r\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\r\n            }\r\n            if (!areGraphQLErrors(val.payload)) {\r\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\r\n            }\r\n            break;\r\n        }\r\n        case MessageType.Complete: {\r\n            if (typeof val.id !== 'string') {\r\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\r\n            }\r\n            if (!val.id) {\r\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n            throw new Error(`Invalid message 'type' property \"${val.type}\"`);\r\n    }\r\n    return val;\r\n}\r\n/**\r\n * Checks if the provided value is a valid GraphQL over WebSocket message.\r\n *\r\n * @deprecated Use `validateMessage` instead.\r\n *\r\n * @category Common\r\n */\r\nexport function isMessage(val) {\r\n    try {\r\n        validateMessage(val);\r\n        return true;\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Parses the raw websocket message data to a valid message.\r\n *\r\n * @category Common\r\n */\r\nexport function parseMessage(data, reviver) {\r\n    return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);\r\n}\r\n/**\r\n * Stringifies a valid message ready to be sent through the socket.\r\n *\r\n * @category Common\r\n */\r\nexport function stringifyMessage(msg, replacer) {\r\n    validateMessage(msg);\r\n    return JSON.stringify(msg, replacer);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgB,EAAEC,cAAc,EAAEC,QAAQ,QAAQ,aAAa;AACxE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,6BAA6B,GAAG,sBAAsB;AACnE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,8BAA8B,GAAG,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,SAAS;AACpB,CAAC,UAAUA,SAAS,EAAE;EAClBA,SAAS,CAACA,SAAS,CAAC,qBAAqB,CAAC,GAAG,IAAI,CAAC,GAAG,qBAAqB;EAC1EA,SAAS,CAACA,SAAS,CAAC,qBAAqB,CAAC,GAAG,IAAI,CAAC,GAAG,qBAAqB;EAC1EA,SAAS,CAACA,SAAS,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,GAAG,YAAY;EACxDA,SAAS,CAACA,SAAS,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,GAAG,aAAa;EAC1D;EACAA,SAAS,CAACA,SAAS,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,GAAG,cAAc;EAC5DA,SAAS,CAACA,SAAS,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,GAAG,WAAW;EACtDA,SAAS,CAACA,SAAS,CAAC,0BAA0B,CAAC,GAAG,IAAI,CAAC,GAAG,0BAA0B;EACpFA,SAAS,CAACA,SAAS,CAAC,iCAAiC,CAAC,GAAG,IAAI,CAAC,GAAG,iCAAiC;EAClGA,SAAS,CAACA,SAAS,CAAC,kCAAkC,CAAC,GAAG,IAAI,CAAC,GAAG,kCAAkC;EACpG;EACAA,SAAS,CAACA,SAAS,CAAC,yBAAyB,CAAC,GAAG,IAAI,CAAC,GAAG,yBAAyB;EAClFA,SAAS,CAACA,SAAS,CAAC,+BAA+B,CAAC,GAAG,IAAI,CAAC,GAAG,+BAA+B;AAClG,CAAC,EAAEA,SAAS,KAAKA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,WAAW;AACtB,CAAC,UAAUA,WAAW,EAAE;EACpBA,WAAW,CAAC,gBAAgB,CAAC,GAAG,iBAAiB;EACjDA,WAAW,CAAC,eAAe,CAAC,GAAG,gBAAgB;EAC/CA,WAAW,CAAC,MAAM,CAAC,GAAG,MAAM;EAC5BA,WAAW,CAAC,MAAM,CAAC,GAAG,MAAM;EAC5BA,WAAW,CAAC,WAAW,CAAC,GAAG,WAAW;EACtCA,WAAW,CAAC,MAAM,CAAC,GAAG,MAAM;EAC5BA,WAAW,CAAC,OAAO,CAAC,GAAG,OAAO;EAC9BA,WAAW,CAAC,UAAU,CAAC,GAAG,UAAU;AACxC,CAAC,EAAEA,WAAW,KAAKA,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,GAAG,EAAE;EACjC,IAAI,CAACN,QAAQ,CAACM,GAAG,CAAC,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAE,gDAA+CR,cAAc,CAACO,GAAG,CAAE,EAAC,CAAC;EAC1F;EACA,IAAI,CAACA,GAAG,CAACE,IAAI,EAAE;IACX,MAAM,IAAID,KAAK,CAAE,wCAAuC,CAAC;EAC7D;EACA,IAAI,OAAOD,GAAG,CAACE,IAAI,KAAK,QAAQ,EAAE;IAC9B,MAAM,IAAID,KAAK,CAAE,kEAAiER,cAAc,CAACO,GAAG,CAACE,IAAI,CAAE,EAAC,CAAC;EACjH;EACA,QAAQF,GAAG,CAACE,IAAI;IACZ,KAAKJ,WAAW,CAACK,cAAc;IAC/B,KAAKL,WAAW,CAACM,aAAa;IAC9B,KAAKN,WAAW,CAACO,IAAI;IACrB,KAAKP,WAAW,CAACQ,IAAI;MAAE;QACnB,IAAIN,GAAG,CAACO,OAAO,IAAI,IAAI,IAAI,CAACb,QAAQ,CAACM,GAAG,CAACO,OAAO,CAAC,EAAE;UAC/C,MAAM,IAAIN,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,4FAA2FF,GAAG,CAACO,OAAQ,GAAE,CAAC;QAC3I;QACA;MACJ;IACA,KAAKT,WAAW,CAACU,SAAS;MAAE;QACxB,IAAI,OAAOR,GAAG,CAACS,EAAE,KAAK,QAAQ,EAAE;UAC5B,MAAM,IAAIR,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,+DAA8DT,cAAc,CAACO,GAAG,CAACS,EAAE,CAAE,EAAC,CAAC;QACxH;QACA,IAAI,CAACT,GAAG,CAACS,EAAE,EAAE;UACT,MAAM,IAAIR,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,8CAA6C,CAAC;QAC/E;QACA,IAAI,CAACR,QAAQ,CAACM,GAAG,CAACO,OAAO,CAAC,EAAE;UACxB,MAAM,IAAIN,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,qEAAoET,cAAc,CAACO,GAAG,CAACO,OAAO,CAAE,EAAC,CAAC;QACnI;QACA,IAAI,OAAOP,GAAG,CAACO,OAAO,CAACG,KAAK,KAAK,QAAQ,EAAE;UACvC,MAAM,IAAIT,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,0EAAyET,cAAc,CAACO,GAAG,CAACO,OAAO,CAACG,KAAK,CAAE,EAAC,CAAC;QAC9I;QACA,IAAIV,GAAG,CAACO,OAAO,CAACI,SAAS,IAAI,IAAI,IAAI,CAACjB,QAAQ,CAACM,GAAG,CAACO,OAAO,CAACI,SAAS,CAAC,EAAE;UACnE,MAAM,IAAIV,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,uGAAsGT,cAAc,CAACO,GAAG,CAACO,OAAO,CAACI,SAAS,CAAE,EAAC,CAAC;QAC/K;QACA,IAAIX,GAAG,CAACO,OAAO,CAACK,aAAa,IAAI,IAAI,IACjCnB,cAAc,CAACO,GAAG,CAACO,OAAO,CAACK,aAAa,CAAC,KAAK,QAAQ,EAAE;UACxD,MAAM,IAAIX,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,wGAAuGT,cAAc,CAACO,GAAG,CAACO,OAAO,CAACK,aAAa,CAAE,EAAC,CAAC;QACpL;QACA,IAAIZ,GAAG,CAACO,OAAO,CAACM,UAAU,IAAI,IAAI,IAAI,CAACnB,QAAQ,CAACM,GAAG,CAACO,OAAO,CAACM,UAAU,CAAC,EAAE;UACrE,MAAM,IAAIZ,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,wGAAuGT,cAAc,CAACO,GAAG,CAACO,OAAO,CAACM,UAAU,CAAE,EAAC,CAAC;QACjL;QACA;MACJ;IACA,KAAKf,WAAW,CAACgB,IAAI;MAAE;QACnB,IAAI,OAAOd,GAAG,CAACS,EAAE,KAAK,QAAQ,EAAE;UAC5B,MAAM,IAAIR,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,+DAA8DT,cAAc,CAACO,GAAG,CAACS,EAAE,CAAE,EAAC,CAAC;QACxH;QACA,IAAI,CAACT,GAAG,CAACS,EAAE,EAAE;UACT,MAAM,IAAIR,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,8CAA6C,CAAC;QAC/E;QACA,IAAI,CAACR,QAAQ,CAACM,GAAG,CAACO,OAAO,CAAC,EAAE;UACxB,MAAM,IAAIN,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,qEAAoET,cAAc,CAACO,GAAG,CAACO,OAAO,CAAE,EAAC,CAAC;QACnI;QACA;MACJ;IACA,KAAKT,WAAW,CAACG,KAAK;MAAE;QACpB,IAAI,OAAOD,GAAG,CAACS,EAAE,KAAK,QAAQ,EAAE;UAC5B,MAAM,IAAIR,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,+DAA8DT,cAAc,CAACO,GAAG,CAACS,EAAE,CAAE,EAAC,CAAC;QACxH;QACA,IAAI,CAACT,GAAG,CAACS,EAAE,EAAE;UACT,MAAM,IAAIR,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,8CAA6C,CAAC;QAC/E;QACA,IAAI,CAACV,gBAAgB,CAACQ,GAAG,CAACO,OAAO,CAAC,EAAE;UAChC,MAAM,IAAIN,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,sFAAqFa,IAAI,CAACC,SAAS,CAAChB,GAAG,CAACO,OAAO,CAAE,EAAC,CAAC;QACpJ;QACA;MACJ;IACA,KAAKT,WAAW,CAACmB,QAAQ;MAAE;QACvB,IAAI,OAAOjB,GAAG,CAACS,EAAE,KAAK,QAAQ,EAAE;UAC5B,MAAM,IAAIR,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,+DAA8DT,cAAc,CAACO,GAAG,CAACS,EAAE,CAAE,EAAC,CAAC;QACxH;QACA,IAAI,CAACT,GAAG,CAACS,EAAE,EAAE;UACT,MAAM,IAAIR,KAAK,CAAE,IAAGD,GAAG,CAACE,IAAK,8CAA6C,CAAC;QAC/E;QACA;MACJ;IACA;MACI,MAAM,IAAID,KAAK,CAAE,oCAAmCD,GAAG,CAACE,IAAK,GAAE,CAAC;EACxE;EACA,OAAOF,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkB,SAASA,CAAClB,GAAG,EAAE;EAC3B,IAAI;IACAD,eAAe,CAACC,GAAG,CAAC;IACpB,OAAO,IAAI;EACf,CAAC,CACD,OAAOmB,EAAE,EAAE;IACP,OAAO,KAAK;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,IAAI,EAAEC,OAAO,EAAE;EACxC,OAAOvB,eAAe,CAAC,OAAOsB,IAAI,KAAK,QAAQ,GAAGN,IAAI,CAACQ,KAAK,CAACF,IAAI,EAAEC,OAAO,CAAC,GAAGD,IAAI,CAAC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,gBAAgBA,CAACC,GAAG,EAAEC,QAAQ,EAAE;EAC5C3B,eAAe,CAAC0B,GAAG,CAAC;EACpB,OAAOV,IAAI,CAACC,SAAS,CAACS,GAAG,EAAEC,QAAQ,CAAC;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}