{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mabur\\\\Desktop\\\\College\\\\SacState\\\\CSC131\\\\MainRepo6\\\\BeamTeamCSC131\\\\src\\\\Routes\\\\SummaryModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { vendiaClient } from '../vendiaClient';\nimport { Modal, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SummaryModal = ({\n  deviceId,\n  onHide\n}) => {\n  _s();\n  const {\n    client\n  } = vendiaClient();\n  const [completedTests, setCompletedTests] = useState([]);\n  const [incompleteTests, setIncompleteTests] = useState([]);\n  // useEffect(() => {\n  //     const fetchTestsForDevice = async () => {\n  //         try {\n  //             // Fetch tests associated with the specific device\n  //             const testsResponse = await client.entities.test.list();\n  //             const devicesList = testsResponse.items;\n  //             console.log(\"testsResponse\", testsResponse);\n\n  //             // Wait for the tests to be fetched\n  //             const devicesWithCompletion = await Promise.all(\n  //                 devicesList.map(async (device) => {\n  //                     try {\n  //                         // Fetch tests associated with the device\n  //                         const testsResponse = await client.entities.test.list();\n  //                         const deviceTests = testsResponse.items.filter((test) => test.Device === device.DeviceName);\n\n  //                         // Separate completed and incomplete tests\n  //                         const completedTests = deviceTests.filter((test) => test.Completed);\n  //                         console.log(\"completed\", completedTests.length);\n  //                         const incompleteTests = deviceTests.filter((test) => !test.Completed);\n  //                         console.log(\"incomplete\", incompleteTests.length);\n\n  //                         setCompletedTests(completedTests);\n  //                         setIncompleteTests(incompleteTests);\n  //                     } catch (error) {\n  //                         console.error('Error fetching tests for device:', error);\n  //                     }\n  //                 })\n  //             );\n  //         } catch (error) {\n  //             console.error('Error fetching tests response:', error);\n  //         }\n  //     };\n\n  //     fetchTestsForDevice();\n  // }, [client, deviceId]);\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: true,\n    onHide: onHide,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Completed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this), \" \", 0, \"// change to completedTests.length after fixing useEffect\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Incompleted:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), \" \", 2, \"// change to incompleteTests.length after fixing useEffect\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onHide,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(SummaryModal, \"x05Rwl82mHEmv8BZmM86mX72ZtQ=\");\n_c = SummaryModal;\nexport default SummaryModal;\nvar _c;\n$RefreshReg$(_c, \"SummaryModal\");","map":{"version":3,"names":["React","useState","useEffect","vendiaClient","Modal","Button","jsxDEV","_jsxDEV","SummaryModal","deviceId","onHide","_s","client","completedTests","setCompletedTests","incompleteTests","setIncompleteTests","show","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","Footer","variant","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/src/Routes/SummaryModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { vendiaClient } from '../vendiaClient';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nconst SummaryModal = ({ deviceId, onHide }) => {\r\n    const { client } = vendiaClient();\r\n    const [completedTests, setCompletedTests] = useState([]);\r\n    const [incompleteTests, setIncompleteTests] = useState([]);\r\n    // useEffect(() => {\r\n    //     const fetchTestsForDevice = async () => {\r\n    //         try {\r\n    //             // Fetch tests associated with the specific device\r\n    //             const testsResponse = await client.entities.test.list();\r\n    //             const devicesList = testsResponse.items;\r\n    //             console.log(\"testsResponse\", testsResponse);\r\n\r\n    //             // Wait for the tests to be fetched\r\n    //             const devicesWithCompletion = await Promise.all(\r\n    //                 devicesList.map(async (device) => {\r\n    //                     try {\r\n    //                         // Fetch tests associated with the device\r\n    //                         const testsResponse = await client.entities.test.list();\r\n    //                         const deviceTests = testsResponse.items.filter((test) => test.Device === device.DeviceName);\r\n\r\n    //                         // Separate completed and incomplete tests\r\n    //                         const completedTests = deviceTests.filter((test) => test.Completed);\r\n    //                         console.log(\"completed\", completedTests.length);\r\n    //                         const incompleteTests = deviceTests.filter((test) => !test.Completed);\r\n    //                         console.log(\"incomplete\", incompleteTests.length);\r\n\r\n    //                         setCompletedTests(completedTests);\r\n    //                         setIncompleteTests(incompleteTests);\r\n    //                     } catch (error) {\r\n    //                         console.error('Error fetching tests for device:', error);\r\n    //                     }\r\n    //                 })\r\n    //             );\r\n    //         } catch (error) {\r\n    //             console.error('Error fetching tests response:', error);\r\n    //         }\r\n    //     };\r\n\r\n    //     fetchTestsForDevice();\r\n    // }, [client, deviceId]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Modal show={true} onHide={onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Summary</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    <p>\r\n                        <strong>Tests Completed:</strong> {0}\r\n                        // change to completedTests.length after fixing useEffect\r\n                    </p>\r\n                    <p>\r\n                        <strong>Tests Incompleted:</strong> {2}\r\n                        // change to incompleteTests.length after fixing useEffect\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onHide}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default SummaryModal;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,KAAK,EAAEC,MAAM,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM;IAAEC;EAAO,CAAC,GAAGT,YAAY,CAAC,CAAC;EACjC,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1D;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAKA,oBACIM,OAAA,CAACH,KAAK;IAACa,IAAI,EAAE,IAAK;IAACP,MAAM,EAAEA,MAAO;IAAAQ,QAAA,gBAC9BX,OAAA,CAACH,KAAK,CAACe,MAAM;MAACC,WAAW;MAAAF,QAAA,eACrBX,OAAA,CAACH,KAAK,CAACiB,KAAK;QAAAH,QAAA,EAAC;MAAO;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACflB,OAAA,CAACH,KAAK,CAACsB,IAAI;MAAAR,QAAA,eACPX,OAAA;QAAAW,QAAA,gBACIX,OAAA;UAAAW,QAAA,gBACIX,OAAA;YAAAW,QAAA,EAAQ;UAAgB;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC,CAAC,EAAC,2DAEzC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJlB,OAAA;UAAAW,QAAA,gBACIX,OAAA;YAAAW,QAAA,EAAQ;UAAkB;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC,CAAC,EAAC,4DAE3C;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACblB,OAAA,CAACH,KAAK,CAACuB,MAAM;MAAAT,QAAA,eACTX,OAAA,CAACF,MAAM;QAACuB,OAAO,EAAC,WAAW;QAACC,OAAO,EAAEnB,MAAO;QAAAQ,QAAA,EAAC;MAE7C;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEhB,CAAC;AAACd,EAAA,CApEIH,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAsElB,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}