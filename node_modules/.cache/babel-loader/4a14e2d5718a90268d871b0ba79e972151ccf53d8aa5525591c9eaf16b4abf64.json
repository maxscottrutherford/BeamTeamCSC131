{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\r\n * Unique operation names\r\n *\r\n * A GraphQL document is only valid if all defined operations have unique names.\r\n */\nexport function UniqueOperationNamesRule(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(\"There can be only one operation named \\\"\".concat(operationName.value, \"\\\".\"), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","UniqueOperationNamesRule","context","knownOperationNames","Object","create","OperationDefinition","node","operationName","name","value","reportError","concat","FragmentDefinition"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\r\n\r\n/**\r\n * Unique operation names\r\n *\r\n * A GraphQL document is only valid if all defined operations have unique names.\r\n */\r\nexport function UniqueOperationNamesRule(context) {\r\n  var knownOperationNames = Object.create(null);\r\n  return {\r\n    OperationDefinition: function OperationDefinition(node) {\r\n      var operationName = node.name;\r\n\r\n      if (operationName) {\r\n        if (knownOperationNames[operationName.value]) {\r\n          context.reportError(new GraphQLError(\"There can be only one operation named \\\"\".concat(operationName.value, \"\\\".\"), [knownOperationNames[operationName.value], operationName]));\r\n        } else {\r\n          knownOperationNames[operationName.value] = operationName;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n    FragmentDefinition: function FragmentDefinition() {\r\n      return false;\r\n    }\r\n  };\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,OAAO,EAAE;EAChD,IAAIC,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC7C,OAAO;IACLC,mBAAmB,EAAE,SAASA,mBAAmBA,CAACC,IAAI,EAAE;MACtD,IAAIC,aAAa,GAAGD,IAAI,CAACE,IAAI;MAE7B,IAAID,aAAa,EAAE;QACjB,IAAIL,mBAAmB,CAACK,aAAa,CAACE,KAAK,CAAC,EAAE;UAC5CR,OAAO,CAACS,WAAW,CAAC,IAAIX,YAAY,CAAC,0CAA0C,CAACY,MAAM,CAACJ,aAAa,CAACE,KAAK,EAAE,KAAK,CAAC,EAAE,CAACP,mBAAmB,CAACK,aAAa,CAACE,KAAK,CAAC,EAAEF,aAAa,CAAC,CAAC,CAAC;QACjL,CAAC,MAAM;UACLL,mBAAmB,CAACK,aAAa,CAACE,KAAK,CAAC,GAAGF,aAAa;QAC1D;MACF;MAEA,OAAO,KAAK;IACd,CAAC;IACDK,kBAAkB,EAAE,SAASA,kBAAkBA,CAAA,EAAG;MAChD,OAAO,KAAK;IACd;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}