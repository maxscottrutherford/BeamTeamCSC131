{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLWebSocketClient = exports.gql = exports.resolveRequestDocument = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;\nvar cross_fetch_1 = __importStar(require(\"cross-fetch\")),\n  CrossFetch = cross_fetch_1;\nvar parser_1 = require(\"graphql/language/parser\");\nvar printer_1 = require(\"graphql/language/printer\");\nvar createRequestBody_1 = __importDefault(require(\"./createRequestBody\"));\nvar defaultJsonSerializer_1 = require(\"./defaultJsonSerializer\");\nvar parseArgs_1 = require(\"./parseArgs\");\nvar types_1 = require(\"./types\");\nObject.defineProperty(exports, \"ClientError\", {\n  enumerable: true,\n  get: function () {\n    return types_1.ClientError;\n  }\n});\n/**\r\n * Convert the given headers configuration into a plain object.\r\n */\nvar resolveHeaders = function (headers) {\n  var oHeaders = {};\n  if (headers) {\n    if (typeof Headers !== 'undefined' && headers instanceof Headers || headers instanceof CrossFetch.Headers) {\n      oHeaders = HeadersInstanceToPlainObject(headers);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function (_a) {\n        var name = _a[0],\n          value = _a[1];\n        oHeaders[name] = value;\n      });\n    } else {\n      oHeaders = headers;\n    }\n  }\n  return oHeaders;\n};\n/**\r\n * Clean a GraphQL document to send it via a GET query\r\n *\r\n * @param {string} str GraphQL query\r\n * @returns {string} Cleaned query\r\n */\nvar queryCleanner = function (str) {\n  return str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim();\n};\n/**\r\n * Create query string for GraphQL request\r\n *\r\n * @param {object} param0 -\r\n *\r\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\r\n * @param {string|undefined} param0.operationName the GraphQL operation name\r\n * @param {any|any[]} param0.variables the GraphQL variables to use\r\n */\nvar buildGetQueryParams = function (_a) {\n  var query = _a.query,\n    variables = _a.variables,\n    operationName = _a.operationName,\n    jsonSerializer = _a.jsonSerializer;\n  if (!Array.isArray(query)) {\n    var search = [\"query=\" + encodeURIComponent(queryCleanner(query))];\n    if (variables) {\n      search.push(\"variables=\" + encodeURIComponent(jsonSerializer.stringify(variables)));\n    }\n    if (operationName) {\n      search.push(\"operationName=\" + encodeURIComponent(operationName));\n    }\n    return search.join('&');\n  }\n  if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n    throw new Error('Cannot create query with given variable type, array expected');\n  }\n  // Batch support\n  var payload = query.reduce(function (accu, currentQuery, index) {\n    accu.push({\n      query: queryCleanner(currentQuery),\n      variables: variables ? jsonSerializer.stringify(variables[index]) : undefined\n    });\n    return accu;\n  }, []);\n  return \"query=\" + encodeURIComponent(jsonSerializer.stringify(payload));\n};\n/**\r\n * Fetch data using POST method\r\n */\nvar post = function (_a) {\n  var url = _a.url,\n    query = _a.query,\n    variables = _a.variables,\n    operationName = _a.operationName,\n    headers = _a.headers,\n    fetch = _a.fetch,\n    fetchOptions = _a.fetchOptions;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var body;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          body = createRequestBody_1.default(query, variables, operationName, fetchOptions.jsonSerializer);\n          return [4 /*yield*/, fetch(url, __assign({\n            method: 'POST',\n            headers: __assign(__assign({}, typeof body === 'string' ? {\n              'Content-Type': 'application/json'\n            } : {}), headers),\n            body: body\n          }, fetchOptions))];\n        case 1:\n          return [2 /*return*/, _b.sent()];\n      }\n    });\n  });\n};\n/**\r\n * Fetch data using GET method\r\n */\nvar get = function (_a) {\n  var url = _a.url,\n    query = _a.query,\n    variables = _a.variables,\n    operationName = _a.operationName,\n    headers = _a.headers,\n    fetch = _a.fetch,\n    fetchOptions = _a.fetchOptions;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var queryParams;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          queryParams = buildGetQueryParams({\n            query: query,\n            variables: variables,\n            operationName: operationName,\n            jsonSerializer: fetchOptions.jsonSerializer\n          });\n          return [4 /*yield*/, fetch(url + \"?\" + queryParams, __assign({\n            method: 'GET',\n            headers: headers\n          }, fetchOptions))];\n        case 1:\n          return [2 /*return*/, _b.sent()];\n      }\n    });\n  });\n};\n/**\r\n * GraphQL Client.\r\n */\nvar GraphQLClient = /** @class */function () {\n  function GraphQLClient(url, options) {\n    this.url = url;\n    this.options = options || {};\n  }\n  GraphQLClient.prototype.rawRequest = function (queryOrOptions, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var rawRequestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, operationName;\n      return __generator(this, function (_d) {\n        rawRequestOptions = parseArgs_1.parseRawRequestArgs(queryOrOptions, variables, requestHeaders);\n        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n        url = this.url;\n        if (rawRequestOptions.signal !== undefined) {\n          fetchOptions.signal = rawRequestOptions.signal;\n        }\n        operationName = resolveRequestDocument(rawRequestOptions.query).operationName;\n        return [2 /*return*/, makeRequest({\n          url: url,\n          query: rawRequestOptions.query,\n          variables: rawRequestOptions.variables,\n          headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(rawRequestOptions.requestHeaders)),\n          operationName: operationName,\n          fetch: fetch,\n          method: method,\n          fetchOptions: fetchOptions\n        })];\n      });\n    });\n  };\n  GraphQLClient.prototype.request = function (documentOrOptions, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, _d, query, operationName, data;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            requestOptions = parseArgs_1.parseRequestArgs(documentOrOptions, variables, requestHeaders);\n            _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n            url = this.url;\n            if (requestOptions.signal !== undefined) {\n              fetchOptions.signal = requestOptions.signal;\n            }\n            _d = resolveRequestDocument(requestOptions.document), query = _d.query, operationName = _d.operationName;\n            return [4 /*yield*/, makeRequest({\n              url: url,\n              query: query,\n              variables: requestOptions.variables,\n              headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(requestOptions.requestHeaders)),\n              operationName: operationName,\n              fetch: fetch,\n              method: method,\n              fetchOptions: fetchOptions\n            })];\n          case 1:\n            data = _e.sent().data;\n            return [2 /*return*/, data];\n        }\n      });\n    });\n  };\n  GraphQLClient.prototype.batchRequests = function (documentsOrOptions, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var batchRequestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, queries, variables, data;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            batchRequestOptions = parseArgs_1.parseBatchRequestArgs(documentsOrOptions, requestHeaders);\n            _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n            url = this.url;\n            if (batchRequestOptions.signal !== undefined) {\n              fetchOptions.signal = batchRequestOptions.signal;\n            }\n            queries = batchRequestOptions.documents.map(function (_a) {\n              var document = _a.document;\n              return resolveRequestDocument(document).query;\n            });\n            variables = batchRequestOptions.documents.map(function (_a) {\n              var variables = _a.variables;\n              return variables;\n            });\n            return [4 /*yield*/, makeRequest({\n              url: url,\n              query: queries,\n              variables: variables,\n              headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(batchRequestOptions.requestHeaders)),\n              operationName: undefined,\n              fetch: fetch,\n              method: method,\n              fetchOptions: fetchOptions\n            })];\n          case 1:\n            data = _d.sent().data;\n            return [2 /*return*/, data];\n        }\n      });\n    });\n  };\n  GraphQLClient.prototype.setHeaders = function (headers) {\n    this.options.headers = headers;\n    return this;\n  };\n  /**\r\n   * Attach a header to the client. All subsequent requests will have this header.\r\n   */\n  GraphQLClient.prototype.setHeader = function (key, value) {\n    var _a;\n    var headers = this.options.headers;\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-ignore\n      headers[key] = value;\n    } else {\n      this.options.headers = (_a = {}, _a[key] = value, _a);\n    }\n    return this;\n  };\n  /**\r\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\r\n   */\n  GraphQLClient.prototype.setEndpoint = function (value) {\n    this.url = value;\n    return this;\n  };\n  return GraphQLClient;\n}();\nexports.GraphQLClient = GraphQLClient;\nfunction makeRequest(_a) {\n  var url = _a.url,\n    query = _a.query,\n    variables = _a.variables,\n    headers = _a.headers,\n    operationName = _a.operationName,\n    fetch = _a.fetch,\n    _b = _a.method,\n    method = _b === void 0 ? 'POST' : _b,\n    fetchOptions = _a.fetchOptions;\n  return __awaiter(this, void 0, void 0, function () {\n    var fetcher, isBathchingQuery, response, result, successfullyReceivedData, successfullyPassedErrorPolicy, headers_1, status_1, errors, rest, data, errorResult;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          fetcher = method.toUpperCase() === 'POST' ? post : get;\n          isBathchingQuery = Array.isArray(query);\n          return [4 /*yield*/, fetcher({\n            url: url,\n            query: query,\n            variables: variables,\n            operationName: operationName,\n            headers: headers,\n            fetch: fetch,\n            fetchOptions: fetchOptions\n          })];\n        case 1:\n          response = _c.sent();\n          return [4 /*yield*/, getResult(response, fetchOptions.jsonSerializer)];\n        case 2:\n          result = _c.sent();\n          successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function (_a) {\n            var data = _a.data;\n            return !data;\n          }) : !!result.data;\n          successfullyPassedErrorPolicy = !result.errors || fetchOptions.errorPolicy === 'all' || fetchOptions.errorPolicy === 'ignore';\n          if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n            headers_1 = response.headers, status_1 = response.status;\n            errors = result.errors, rest = __rest(result, [\"errors\"]);\n            data = fetchOptions.errorPolicy === 'ignore' ? rest : result;\n            return [2 /*return*/, __assign(__assign({}, isBathchingQuery ? {\n              data: data\n            } : data), {\n              headers: headers_1,\n              status: status_1\n            })];\n          } else {\n            errorResult = typeof result === 'string' ? {\n              error: result\n            } : result;\n            throw new types_1.ClientError(__assign(__assign({}, errorResult), {\n              status: response.status,\n              headers: response.headers\n            }), {\n              query: query,\n              variables: variables\n            });\n          }\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction rawRequest(urlOrOptions, query, variables, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2 /*return*/, client.rawRequest(__assign({}, requestOptions))];\n    });\n  });\n}\nexports.rawRequest = rawRequest;\nfunction request(urlOrOptions, document, variables, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseRequestExtendedArgs(urlOrOptions, document, variables, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2 /*return*/, client.request(__assign({}, requestOptions))];\n    });\n  });\n}\nexports.request = request;\nfunction batchRequests(urlOrOptions, documents, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2 /*return*/, client.batchRequests(__assign({}, requestOptions))];\n    });\n  });\n}\nexports.batchRequests = batchRequests;\nexports.default = request;\n/**\r\n * todo\r\n */\nfunction getResult(response, jsonSerializer) {\n  if (jsonSerializer === void 0) {\n    jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var contentType, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          response.headers.forEach(function (value, key) {\n            if (key.toLowerCase() === 'content-type') {\n              contentType = value;\n            }\n          });\n          if (!(contentType && contentType.toLowerCase().startsWith('application/json'))) return [3 /*break*/, 2];\n          _b = (_a = jsonSerializer).parse;\n          return [4 /*yield*/, response.text()];\n        case 1:\n          return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n        case 2:\n          return [2 /*return*/, response.text()];\n      }\n    });\n  });\n}\n/**\r\n * helpers\r\n */\nfunction extractOperationName(document) {\n  var _a;\n  var operationName = undefined;\n  var operationDefinitions = document.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  });\n  if (operationDefinitions.length === 1) {\n    operationName = (_a = operationDefinitions[0].name) === null || _a === void 0 ? void 0 : _a.value;\n  }\n  return operationName;\n}\nfunction resolveRequestDocument(document) {\n  if (typeof document === 'string') {\n    var operationName_1 = undefined;\n    try {\n      var parsedDocument = parser_1.parse(document);\n      operationName_1 = extractOperationName(parsedDocument);\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n    return {\n      query: document,\n      operationName: operationName_1\n    };\n  }\n  var operationName = extractOperationName(document);\n  return {\n    query: printer_1.print(document),\n    operationName: operationName\n  };\n}\nexports.resolveRequestDocument = resolveRequestDocument;\nfunction callOrIdentity(value) {\n  return typeof value === 'function' ? value() : value;\n}\n/**\r\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\r\n *\r\n * @example\r\n *\r\n * import { gql } from 'graphql-request'\r\n *\r\n * await request('https://foo.bar/graphql', gql`...`)\r\n *\r\n * @remarks\r\n *\r\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\r\n */\nfunction gql(chunks) {\n  var variables = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    variables[_i - 1] = arguments[_i];\n  }\n  return chunks.reduce(function (accumulator, chunk, index) {\n    return \"\" + accumulator + chunk + (index in variables ? variables[index] : '');\n  }, '');\n}\nexports.gql = gql;\n/**\r\n * Convert Headers instance into regular object\r\n */\nfunction HeadersInstanceToPlainObject(headers) {\n  var o = {};\n  headers.forEach(function (v, k) {\n    o[k] = v;\n  });\n  return o;\n}\nvar graphql_ws_1 = require(\"./graphql-ws\");\nObject.defineProperty(exports, \"GraphQLWebSocketClient\", {\n  enumerable: true,\n  get: function () {\n    return graphql_ws_1.GraphQLWebSocketClient;\n  }\n});","map":{"version":3,"names":["cross_fetch_1","__importStar","require","CrossFetch","parser_1","printer_1","createRequestBody_1","__importDefault","defaultJsonSerializer_1","parseArgs_1","types_1","Object","defineProperty","exports","enumerable","get","ClientError","resolveHeaders","headers","oHeaders","Headers","HeadersInstanceToPlainObject","Array","isArray","forEach","_a","name","value","queryCleanner","str","replace","trim","buildGetQueryParams","query","variables","operationName","jsonSerializer","search","encodeURIComponent","push","stringify","join","Error","payload","reduce","accu","currentQuery","index","undefined","post","url","fetch","fetchOptions","body","default","__assign","method","_b","sent","queryParams","GraphQLClient","options","prototype","rawRequest","queryOrOptions","requestHeaders","rawRequestOptions","parseRawRequestArgs","_c","__rest","signal","resolveRequestDocument","makeRequest","callOrIdentity","request","documentOrOptions","requestOptions","parseRequestArgs","_d","document","data","_e","batchRequests","documentsOrOptions","batchRequestOptions","parseBatchRequestArgs","queries","documents","map","setHeaders","setHeader","key","setEndpoint","fetcher","toUpperCase","isBathchingQuery","response","getResult","result","successfullyReceivedData","some","successfullyPassedErrorPolicy","errors","errorPolicy","ok","headers_1","status_1","status","rest","errorResult","error","urlOrOptions","parseRawRequestExtendedArgs","client","parseRequestExtendedArgs","parseBatchRequestsExtendedArgs","defaultJsonSerializer","toLowerCase","contentType","startsWith","parse","text","apply","extractOperationName","operationDefinitions","definitions","filter","definition","kind","length","operationName_1","parsedDocument","err","print","gql","chunks","_i","arguments","accumulator","chunk","o","v","k","graphql_ws_1","GraphQLWebSocketClient"],"sources":["C:\\Users\\mabur\\Desktop\\College\\SacState\\CSC131\\MainRepo6\\BeamTeamCSC131\\node_modules\\graphql-request\\src\\index.ts"],"sourcesContent":["import crossFetch, * as CrossFetch from 'cross-fetch'\r\nimport { OperationDefinitionNode, DocumentNode } from 'graphql/language/ast'\r\n\r\nimport { parse } from 'graphql/language/parser'\r\nimport { print } from 'graphql/language/printer'\r\nimport createRequestBody from './createRequestBody'\r\nimport { defaultJsonSerializer } from './defaultJsonSerializer'\r\nimport {\r\n  parseBatchRequestArgs,\r\n  parseRawRequestArgs,\r\n  parseRequestArgs,\r\n  parseBatchRequestsExtendedArgs,\r\n  parseRawRequestExtendedArgs,\r\n  parseRequestExtendedArgs,\r\n} from './parseArgs'\r\nimport {\r\n  BatchRequestDocument,\r\n  BatchRequestsOptions,\r\n  ClientError,\r\n  RawRequestOptions,\r\n  RequestDocument,\r\n  RequestOptions,\r\n  BatchRequestsExtendedOptions,\r\n  RawRequestExtendedOptions,\r\n  RequestExtendedOptions,\r\n  Variables,\r\n  PatchedRequestInit,\r\n  MaybeFunction,\r\n  GraphQLError,\r\n} from './types'\r\nimport * as Dom from './types.dom'\r\n\r\nexport {\r\n  BatchRequestDocument,\r\n  BatchRequestsOptions,\r\n  BatchRequestsExtendedOptions,\r\n  ClientError,\r\n  RawRequestOptions,\r\n  RawRequestExtendedOptions,\r\n  RequestDocument,\r\n  RequestOptions,\r\n  RequestExtendedOptions,\r\n  Variables,\r\n}\r\n\r\n/**\r\n * Convert the given headers configuration into a plain object.\r\n */\r\nconst resolveHeaders = (headers: Dom.RequestInit['headers']): Record<string, string> => {\r\n  let oHeaders: Record<string, string> = {}\r\n  if (headers) {\r\n    if (\r\n      (typeof Headers !== 'undefined' && headers instanceof Headers) ||\r\n      headers instanceof CrossFetch.Headers\r\n    ) {\r\n      oHeaders = HeadersInstanceToPlainObject(headers)\r\n    } else if (Array.isArray(headers)) {\r\n      headers.forEach(([name, value]) => {\r\n        oHeaders[name] = value\r\n      })\r\n    } else {\r\n      oHeaders = headers as Record<string, string>\r\n    }\r\n  }\r\n\r\n  return oHeaders\r\n}\r\n\r\n/**\r\n * Clean a GraphQL document to send it via a GET query\r\n *\r\n * @param {string} str GraphQL query\r\n * @returns {string} Cleaned query\r\n */\r\nconst queryCleanner = (str: string): string => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim()\r\n\r\ntype TBuildGetQueryParams<V> =\r\n  | { query: string; variables: V | undefined; operationName: string | undefined; jsonSerializer: Dom.JsonSerializer }\r\n  | { query: string[]; variables: V[] | undefined; operationName: undefined; jsonSerializer: Dom.JsonSerializer }\r\n\r\n/**\r\n * Create query string for GraphQL request\r\n *\r\n * @param {object} param0 -\r\n *\r\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\r\n * @param {string|undefined} param0.operationName the GraphQL operation name\r\n * @param {any|any[]} param0.variables the GraphQL variables to use\r\n */\r\nconst buildGetQueryParams = <V>({ query, variables, operationName, jsonSerializer }: TBuildGetQueryParams<V>): string => {\r\n  if (!Array.isArray(query)) {\r\n    const search: string[] = [`query=${encodeURIComponent(queryCleanner(query))}`]\r\n\r\n    if (variables) {\r\n      search.push(`variables=${encodeURIComponent(jsonSerializer.stringify(variables))}`)\r\n    }\r\n\r\n    if (operationName) {\r\n      search.push(`operationName=${encodeURIComponent(operationName)}`)\r\n    }\r\n\r\n    return search.join('&')\r\n  }\r\n\r\n  if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\r\n    throw new Error('Cannot create query with given variable type, array expected')\r\n  }\r\n\r\n  // Batch support\r\n  const payload = query.reduce<{ query: string; variables: string | undefined }[]>(\r\n    (accu, currentQuery, index) => {\r\n      accu.push({\r\n        query: queryCleanner(currentQuery),\r\n        variables: variables ? jsonSerializer.stringify(variables[index]) : undefined,\r\n      })\r\n      return accu\r\n    },\r\n    []\r\n  )\r\n\r\n  return `query=${encodeURIComponent(jsonSerializer.stringify(payload))}`\r\n}\r\n\r\n/**\r\n * Fetch data using POST method\r\n */\r\nconst post = async <V = Variables>({\r\n  url,\r\n  query,\r\n  variables,\r\n  operationName,\r\n  headers,\r\n  fetch,\r\n  fetchOptions,\r\n}: {\r\n  url: string\r\n  query: string | string[]\r\n  fetch: any\r\n  fetchOptions: Dom.RequestInit\r\n  variables?: V\r\n  headers?: Dom.RequestInit['headers']\r\n  operationName?: string\r\n}) => {\r\n  const body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer)\r\n\r\n  return await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...(typeof body === 'string' ? { 'Content-Type': 'application/json' } : {}),\r\n      ...headers,\r\n    },\r\n    body,\r\n    ...fetchOptions,\r\n  })\r\n}\r\n\r\n/**\r\n * Fetch data using GET method\r\n */\r\nconst get = async <V = Variables>({\r\n  url,\r\n  query,\r\n  variables,\r\n  operationName,\r\n  headers,\r\n  fetch,\r\n  fetchOptions,\r\n}: {\r\n  url: string\r\n  query: string | string[]\r\n  fetch: any\r\n  fetchOptions: Dom.RequestInit\r\n  variables?: V\r\n  headers?: HeadersInit\r\n  operationName?: string\r\n}) => {\r\n  const queryParams = buildGetQueryParams<V>({\r\n    query,\r\n    variables,\r\n    operationName,\r\n    jsonSerializer: fetchOptions.jsonSerializer\r\n  } as TBuildGetQueryParams<V>)\r\n\r\n  return await fetch(`${url}?${queryParams}`, {\r\n    method: 'GET',\r\n    headers,\r\n    ...fetchOptions,\r\n  })\r\n}\r\n\r\n/**\r\n * GraphQL Client.\r\n */\r\nexport class GraphQLClient {\r\n  private url: string\r\n  private options: PatchedRequestInit\r\n\r\n  constructor(url: string, options?: PatchedRequestInit) {\r\n    this.url = url\r\n    this.options = options || {}\r\n  }\r\n\r\n  /**\r\n   * Send a GraphQL query to the server.\r\n   */\r\n  async rawRequest<T = any, V = Variables>(\r\n    query: string,\r\n    variables?: V,\r\n    requestHeaders?: Dom.RequestInit['headers']\r\n  ): Promise<{ data: T; extensions?: any; headers: Dom.Headers; errors?: GraphQLError[]; status: number }>\r\n  async rawRequest<T = any, V = Variables>(\r\n    options: RawRequestOptions<V>\r\n  ): Promise<{ data: T; extensions?: any; headers: Dom.Headers; errors?: GraphQLError[]; status: number }>\r\n  async rawRequest<T = any, V = Variables>(\r\n    queryOrOptions: string | RawRequestOptions<V>,\r\n    variables?: V,\r\n    requestHeaders?: Dom.RequestInit['headers']\r\n  ): Promise<{ data: T; extensions?: any; headers: Dom.Headers; errors?: GraphQLError[]; status: number }> {\r\n    const rawRequestOptions = parseRawRequestArgs<V>(queryOrOptions, variables, requestHeaders)\r\n\r\n    let { headers, fetch = crossFetch, method = 'POST', ...fetchOptions } = this.options\r\n    let { url } = this\r\n    if (rawRequestOptions.signal !== undefined) {\r\n      fetchOptions.signal = rawRequestOptions.signal\r\n    }\r\n\r\n    const { operationName } = resolveRequestDocument(rawRequestOptions.query)\r\n\r\n    return makeRequest<T, V>({\r\n      url,\r\n      query: rawRequestOptions.query,\r\n      variables: rawRequestOptions.variables,\r\n      headers: {\r\n        ...resolveHeaders(callOrIdentity(headers)),\r\n        ...resolveHeaders(rawRequestOptions.requestHeaders),\r\n      },\r\n      operationName,\r\n      fetch,\r\n      method,\r\n      fetchOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send a GraphQL document to the server.\r\n   */\r\n  async request<T = any, V = Variables>(\r\n    document: RequestDocument,\r\n    variables?: V,\r\n    requestHeaders?: Dom.RequestInit['headers']\r\n  ): Promise<T>\r\n  async request<T = any, V = Variables>(options: RequestOptions<V>): Promise<T>\r\n  async request<T = any, V = Variables>(\r\n    documentOrOptions: RequestDocument | RequestOptions<V>,\r\n    variables?: V,\r\n    requestHeaders?: Dom.RequestInit['headers']\r\n  ): Promise<T> {\r\n    const requestOptions = parseRequestArgs<V>(documentOrOptions, variables, requestHeaders)\r\n\r\n    let { headers, fetch = crossFetch, method = 'POST', ...fetchOptions } = this.options\r\n    let { url } = this\r\n    if (requestOptions.signal !== undefined) {\r\n      fetchOptions.signal = requestOptions.signal\r\n    }\r\n\r\n    const { query, operationName } = resolveRequestDocument(requestOptions.document)\r\n\r\n    const { data } = await makeRequest<T, V>({\r\n      url,\r\n      query,\r\n      variables: requestOptions.variables,\r\n      headers: {\r\n        ...resolveHeaders(callOrIdentity(headers)),\r\n        ...resolveHeaders(requestOptions.requestHeaders),\r\n      },\r\n      operationName,\r\n      fetch,\r\n      method,\r\n      fetchOptions,\r\n    })\r\n\r\n    return data\r\n  }\r\n\r\n  /**\r\n   * Send GraphQL documents in batch to the server.\r\n   */\r\n  async batchRequests<T extends any = any, V = Variables>(\r\n    documents: BatchRequestDocument<V>[],\r\n    requestHeaders?: Dom.RequestInit['headers']\r\n  ): Promise<T>\r\n  async batchRequests<T = any, V = Variables>(options: BatchRequestsOptions<V>): Promise<T>\r\n  async batchRequests<T = any, V = Variables>(\r\n    documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>,\r\n    requestHeaders?: Dom.RequestInit['headers']\r\n  ): Promise<T> {\r\n    const batchRequestOptions = parseBatchRequestArgs<V>(documentsOrOptions, requestHeaders)\r\n\r\n    let { headers, fetch = crossFetch, method = 'POST', ...fetchOptions } = this.options\r\n    let { url } = this\r\n    if (batchRequestOptions.signal !== undefined) {\r\n      fetchOptions.signal = batchRequestOptions.signal\r\n    }\r\n\r\n    const queries = batchRequestOptions.documents.map(\r\n      ({ document }) => resolveRequestDocument(document).query\r\n    )\r\n    const variables = batchRequestOptions.documents.map(({ variables }) => variables)\r\n\r\n    const { data } = await makeRequest<T, (V | undefined)[]>({\r\n      url,\r\n      query: queries,\r\n      variables,\r\n      headers: {\r\n        ...resolveHeaders(callOrIdentity(headers)),\r\n        ...resolveHeaders(batchRequestOptions.requestHeaders),\r\n      },\r\n      operationName: undefined,\r\n      fetch,\r\n      method,\r\n      fetchOptions,\r\n    })\r\n\r\n    return data\r\n  }\r\n\r\n  setHeaders(headers: Dom.RequestInit['headers']): GraphQLClient {\r\n    this.options.headers = headers\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Attach a header to the client. All subsequent requests will have this header.\r\n   */\r\n  setHeader(key: string, value: string): GraphQLClient {\r\n    const { headers } = this.options\r\n\r\n    if (headers) {\r\n      // todo what if headers is in nested array form... ?\r\n      //@ts-ignore\r\n      headers[key] = value\r\n    } else {\r\n      this.options.headers = { [key]: value }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\r\n   */\r\n  setEndpoint(value: string): GraphQLClient {\r\n    this.url = value\r\n    return this\r\n  }\r\n}\r\n\r\nasync function makeRequest<T = any, V = Variables>({\r\n  url,\r\n  query,\r\n  variables,\r\n  headers,\r\n  operationName,\r\n  fetch,\r\n  method = 'POST',\r\n  fetchOptions,\r\n}: {\r\n  url: string\r\n  query: string | string[]\r\n  variables?: V\r\n  headers?: Dom.RequestInit['headers']\r\n  operationName?: string\r\n  fetch: any\r\n  method: string\r\n  fetchOptions: Dom.RequestInit\r\n}): Promise<{ data: T; extensions?: any; headers: Dom.Headers; errors?: GraphQLError[]; status: number }> {\r\n  const fetcher = method.toUpperCase() === 'POST' ? post : get\r\n  const isBathchingQuery = Array.isArray(query)\r\n\r\n  const response = await fetcher({\r\n    url,\r\n    query,\r\n    variables,\r\n    operationName,\r\n    headers,\r\n    fetch,\r\n    fetchOptions,\r\n  })\r\n  const result = await getResult(response, fetchOptions.jsonSerializer)\r\n\r\n  const successfullyReceivedData =\r\n    isBathchingQuery && Array.isArray(result) ? !result.some(({ data }) => !data) : !!result.data\r\n\r\n  const successfullyPassedErrorPolicy =\r\n    !result.errors || fetchOptions.errorPolicy === 'all' || fetchOptions.errorPolicy === 'ignore'\r\n\r\n  if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\r\n    const { headers, status } = response\r\n\r\n    const { errors, ...rest } = result\r\n    const data = fetchOptions.errorPolicy === 'ignore' ? rest : result\r\n    \r\n    return {\r\n      ...(isBathchingQuery ? { data } : data),\r\n      headers,\r\n      status,\r\n    }\r\n  } else {\r\n    const errorResult = typeof result === 'string' ? { error: result } : result\r\n    throw new ClientError(\r\n      { ...errorResult, status: response.status, headers: response.headers },\r\n      { query, variables }\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Send a GraphQL Query to the GraphQL server for execution.\r\n */\r\nexport async function rawRequest<T = any, V = Variables>(\r\n  url: string,\r\n  query: string,\r\n  variables?: V,\r\n  requestHeaders?: Dom.RequestInit['headers']\r\n): Promise<{ data: T; extensions?: any; headers: Dom.Headers; status: number }>\r\nexport async function rawRequest<T = any, V = Variables>(\r\n  options: RawRequestExtendedOptions<V>\r\n): Promise<{ data: T; extensions?: any; headers: Dom.Headers; status: number }>\r\nexport async function rawRequest<T = any, V = Variables>(\r\n  urlOrOptions: string | RawRequestExtendedOptions<V>,\r\n  query?: string,\r\n  variables?: V,\r\n  requestHeaders?: Dom.RequestInit['headers']\r\n): Promise<{ data: T; extensions?: any; headers: Dom.Headers; status: number }> {\r\n  const requestOptions = parseRawRequestExtendedArgs<V>(urlOrOptions, query, variables, requestHeaders)\r\n  const client = new GraphQLClient(requestOptions.url)\r\n  return client.rawRequest<T, V>({\r\n    ...requestOptions,\r\n  })\r\n}\r\n\r\n/**\r\n * Send a GraphQL Document to the GraphQL server for execution.\r\n *\r\n * @example\r\n *\r\n * ```ts\r\n * // You can pass a raw string\r\n *\r\n * await request('https://foo.bar/graphql', `\r\n *   {\r\n *     query {\r\n *       users\r\n *     }\r\n *   }\r\n * `)\r\n *\r\n * // You can also pass a GraphQL DocumentNode. Convenient if you\r\n * // are using graphql-tag package.\r\n *\r\n * import gql from 'graphql-tag'\r\n *\r\n * await request('https://foo.bar/graphql', gql`...`)\r\n *\r\n * // If you don't actually care about using DocumentNode but just\r\n * // want the tooling support for gql template tag like IDE syntax\r\n * // coloring and prettier autoformat then note you can use the\r\n * // passthrough gql tag shipped with graphql-request to save a bit\r\n * // of performance and not have to install another dep into your project.\r\n *\r\n * import { gql } from 'graphql-request'\r\n *\r\n * await request('https://foo.bar/graphql', gql`...`)\r\n * ```\r\n */\r\nexport async function request<T = any, V = Variables>(\r\n  url: string,\r\n  document: RequestDocument,\r\n  variables?: V,\r\n  requestHeaders?: Dom.RequestInit['headers']\r\n): Promise<T>\r\nexport async function request<T = any, V = Variables>(options: RequestExtendedOptions<V>): Promise<T>\r\nexport async function request<T = any, V = Variables>(\r\n  urlOrOptions: string | RequestExtendedOptions<V>,\r\n  document?: RequestDocument,\r\n  variables?: V,\r\n  requestHeaders?: Dom.RequestInit['headers']\r\n): Promise<T> {\r\n  const requestOptions = parseRequestExtendedArgs<V>(urlOrOptions, document, variables, requestHeaders)\r\n  const client = new GraphQLClient(requestOptions.url)\r\n  return client.request<T, V>({\r\n    ...requestOptions,\r\n  })\r\n}\r\n\r\n/**\r\n * Send a batch of GraphQL Document to the GraphQL server for exectuion.\r\n *\r\n * @example\r\n *\r\n * ```ts\r\n * // You can pass a raw string\r\n *\r\n * await batchRequests('https://foo.bar/graphql', [\r\n * {\r\n *  query: `\r\n *   {\r\n *     query {\r\n *       users\r\n *     }\r\n *   }`\r\n * },\r\n * {\r\n *   query: `\r\n *   {\r\n *     query {\r\n *       users\r\n *     }\r\n *   }`\r\n * }])\r\n *\r\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\r\n * // are using graphql-tag package.\r\n *\r\n * import gql from 'graphql-tag'\r\n *\r\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\r\n * ```\r\n */\r\nexport async function batchRequests<T = any, V = Variables>(\r\n  url: string,\r\n  documents: BatchRequestDocument<V>[],\r\n  requestHeaders?: Dom.RequestInit['headers']\r\n): Promise<T>\r\nexport async function batchRequests<T = any, V = Variables>(\r\n  options: BatchRequestsExtendedOptions<V>\r\n): Promise<T>\r\nexport async function batchRequests<T = any, V = Variables>(\r\n  urlOrOptions: string | BatchRequestsExtendedOptions<V>,\r\n  documents?: BatchRequestDocument<V>[],\r\n  requestHeaders?: Dom.RequestInit['headers']\r\n): Promise<T> {\r\n  const requestOptions = parseBatchRequestsExtendedArgs<V>(urlOrOptions, documents, requestHeaders)\r\n  const client = new GraphQLClient(requestOptions.url)\r\n  return client.batchRequests<T, V>({ ...requestOptions })\r\n}\r\n\r\nexport default request\r\n\r\n/**\r\n * todo\r\n */\r\nasync function getResult(response: Dom.Response, jsonSerializer = defaultJsonSerializer): Promise<any> {\r\n  let contentType: string | undefined\r\n\r\n  response.headers.forEach((value, key) => {\r\n    if (key.toLowerCase() === 'content-type') {\r\n      contentType = value\r\n    }\r\n  })\r\n\r\n  if (contentType && contentType.toLowerCase().startsWith('application/json')) {\r\n    return jsonSerializer.parse(await response.text())\r\n  } else {\r\n    return response.text()\r\n  }\r\n}\r\n/**\r\n * helpers\r\n */\r\n\r\nfunction extractOperationName(document: DocumentNode): string | undefined {\r\n  let operationName = undefined\r\n\r\n  const operationDefinitions = document.definitions.filter(\r\n    (definition) => definition.kind === 'OperationDefinition'\r\n  ) as OperationDefinitionNode[]\r\n\r\n  if (operationDefinitions.length === 1) {\r\n    operationName = operationDefinitions[0].name?.value\r\n  }\r\n\r\n  return operationName\r\n}\r\n\r\nexport function resolveRequestDocument(document: RequestDocument): { query: string; operationName?: string } {\r\n  if (typeof document === 'string') {\r\n    let operationName = undefined\r\n\r\n    try {\r\n      const parsedDocument = parse(document)\r\n      operationName = extractOperationName(parsedDocument)\r\n    } catch (err) {\r\n      // Failed parsing the document, the operationName will be undefined\r\n    }\r\n\r\n    return { query: document, operationName }\r\n  }\r\n\r\n  const operationName = extractOperationName(document)\r\n\r\n  return { query: print(document), operationName }\r\n}\r\n\r\nfunction callOrIdentity<T>(value: MaybeFunction<T>) {\r\n  return typeof value === 'function' ? (value as () => T)() : value;\r\n}\r\n\r\n/**\r\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\r\n *\r\n * @example\r\n *\r\n * import { gql } from 'graphql-request'\r\n *\r\n * await request('https://foo.bar/graphql', gql`...`)\r\n *\r\n * @remarks\r\n *\r\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\r\n */\r\nexport function gql(chunks: TemplateStringsArray, ...variables: any[]): string {\r\n  return chunks.reduce(\r\n    (accumulator, chunk, index) => `${accumulator}${chunk}${index in variables ? variables[index] : ''}`,\r\n    ''\r\n  )\r\n}\r\n\r\n/**\r\n * Convert Headers instance into regular object\r\n */\r\nfunction HeadersInstanceToPlainObject(headers: Dom.Response['headers']): Record<string, string> {\r\n  const o: any = {}\r\n  headers.forEach((v, k) => {\r\n    o[k] = v\r\n  })\r\n  return o\r\n}\r\n\r\nexport { GraphQLWebSocketClient } from './graphql-ws'\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}