{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mabur\\\\Desktop\\\\College\\\\SacState\\\\CSC131\\\\MainRepo6\\\\BeamTeamCSC131\\\\src\\\\Context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\n// AuthContext.js\nimport { createContext, useState, useEffect } from \"react\";\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const auth = getAuth();\n  const [user, setUser] = useState();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    let unsubscribe;\n    unsubscribe = onAuthStateChanged(auth, currentUser => {\n      setLoading(false);\n      if (currentUser) setUser(currentUser);else setUser(null);\n    });\n    return () => {\n      if (unsubscribe) unsubscribe();\n    };\n  }, []);\n  const isAdmin = () => {\n    // Check if the user's email contains the word 'admin'\n    return user && user.email && user.email.toLowerCase().includes('admin');\n  };\n  const getOrgFromEmail = () => {\n    // Extract organization information from the email address\n    if (user && user.email) {\n      const [, org] = user.email.split('@');\n      return org;\n    }\n    return null;\n  };\n  const values = {\n    user,\n    isAdmin: isAdmin(),\n    org: getOrgFromEmail()\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: values,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthProvider, \"6mDIL/VFQcqEqV/paxLHiiO23LA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","getAuth","onAuthStateChanged","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","auth","user","setUser","loading","setLoading","unsubscribe","currentUser","isAdmin","email","toLowerCase","includes","getOrgFromEmail","org","split","values","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/src/Context/AuthContext.jsx"],"sourcesContent":["// AuthContext.js\r\nimport { createContext, useState, useEffect } from \"react\";\r\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n    const auth = getAuth();\r\n    const [user, setUser] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let unsubscribe;\r\n        unsubscribe = onAuthStateChanged(auth, (currentUser) => {\r\n            setLoading(false);\r\n            if (currentUser) setUser(currentUser);\r\n            else setUser(null);\r\n        });\r\n        return () => {\r\n            if (unsubscribe) unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    const isAdmin = () => {\r\n        // Check if the user's email contains the word 'admin'\r\n        return user && user.email && user.email.toLowerCase().includes('admin');\r\n    };\r\n\r\n    const getOrgFromEmail = () => {\r\n        // Extract organization information from the email address\r\n        if (user && user.email) {\r\n            const [, org] = user.email.split('@');\r\n            return org;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const values = {\r\n        user,\r\n        isAdmin: isAdmin(),\r\n        org: getOrgFromEmail(),\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={values}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n"],"mappings":";;AAAA;AACA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,OAAO,EAAEC,kBAAkB,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,SAASQ,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAMC,IAAI,GAAGR,OAAO,CAAC,CAAC;EACtB,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,CAAC;EAClC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,IAAIc,WAAW;IACfA,WAAW,GAAGZ,kBAAkB,CAACO,IAAI,EAAGM,WAAW,IAAK;MACpDF,UAAU,CAAC,KAAK,CAAC;MACjB,IAAIE,WAAW,EAAEJ,OAAO,CAACI,WAAW,CAAC,CAAC,KACjCJ,OAAO,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC;IACF,OAAO,MAAM;MACT,IAAIG,WAAW,EAAEA,WAAW,CAAC,CAAC;IAClC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,OAAO,GAAGA,CAAA,KAAM;IAClB;IACA,OAAON,IAAI,IAAIA,IAAI,CAACO,KAAK,IAAIP,IAAI,CAACO,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC;EAC3E,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1B;IACA,IAAIV,IAAI,IAAIA,IAAI,CAACO,KAAK,EAAE;MACpB,MAAM,GAAGI,GAAG,CAAC,GAAGX,IAAI,CAACO,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC;MACrC,OAAOD,GAAG;IACd;IACA,OAAO,IAAI;EACf,CAAC;EAED,MAAME,MAAM,GAAG;IACXb,IAAI;IACJM,OAAO,EAAEA,OAAO,CAAC,CAAC;IAClBK,GAAG,EAAED,eAAe,CAAC;EACzB,CAAC;EAED,oBACIhB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAEF,MAAO;IAAAhB,QAAA,EAC/B,CAACK,OAAO,IAAIL;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAE/B;AAACrB,EAAA,CA1CeF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}