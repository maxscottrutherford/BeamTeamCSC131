{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mabur\\\\Desktop\\\\College\\\\SacState\\\\CSC131\\\\MainRepo6\\\\BeamTeamCSC131\\\\src\\\\Routes\\\\SummaryModal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { vendiaClient } from '../vendiaClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  client\n} = vendiaClient();\nconst SummaryModal = ({\n  deviceId,\n  onClose\n}) => {\n  _s();\n  const [completedTests, setCompletedTests] = useState([]);\n  const [incompleteTests, setIncompleteTests] = useState([]);\n  useEffect(() => {\n    const fetchTestsForDevice = async () => {\n      try {\n        // Fetch tests associated with the device\n        const testsResponse = await client.entities.test.list();\n        const allTests = testsResponse.items;\n\n        // Filter tests for the specified device\n        const deviceTests = allTests.filter(test => test.Device.trim().toLowerCase() === deviceId.trim().toLowerCase());\n\n        // Separate completed and incomplete tests\n        const completed = deviceTests.filter(test => test.Completed);\n        const incomplete = deviceTests.filter(test => !test.Completed);\n\n        // Update state with the results\n        setCompletedTests(completed);\n        setIncompleteTests(incomplete);\n      } catch (error) {\n        console.error('Error fetching tests for device:', error);\n      }\n    };\n    fetchTestsForDevice();\n  }, [deviceId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Summary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Tests Completed: \", completedTests.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Tests Incomplete: \", incompleteTests.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClose,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(SummaryModal, \"EQCVrDpweIpBV0SaSMLWG6xFkKc=\");\n_c = SummaryModal;\nexport default SummaryModal;\nvar _c;\n$RefreshReg$(_c, \"SummaryModal\");","map":{"version":3,"names":["React","useEffect","useState","vendiaClient","jsxDEV","_jsxDEV","client","SummaryModal","deviceId","onClose","_s","completedTests","setCompletedTests","incompleteTests","setIncompleteTests","fetchTestsForDevice","testsResponse","entities","test","list","allTests","items","deviceTests","filter","Device","trim","toLowerCase","completed","Completed","incomplete","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/src/Routes/SummaryModal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { vendiaClient } from '../vendiaClient';\r\n\r\nconst { client } = vendiaClient();\r\n\r\nconst SummaryModal = ({ deviceId, onClose }) => {\r\n    const [completedTests, setCompletedTests] = useState([]);\r\n    const [incompleteTests, setIncompleteTests] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchTestsForDevice = async () => {\r\n            try {\r\n                // Fetch tests associated with the device\r\n                const testsResponse = await client.entities.test.list();\r\n                const allTests = testsResponse.items;\r\n\r\n                // Filter tests for the specified device\r\n                const deviceTests = allTests.filter(\r\n                    (test) => test.Device.trim().toLowerCase() === deviceId.trim().toLowerCase()\r\n                );\r\n\r\n                // Separate completed and incomplete tests\r\n                const completed = deviceTests.filter((test) => test.Completed);\r\n                const incomplete = deviceTests.filter((test) => !test.Completed);\r\n\r\n                // Update state with the results\r\n                setCompletedTests(completed);\r\n                setIncompleteTests(incomplete);\r\n            } catch (error) {\r\n                console.error('Error fetching tests for device:', error);\r\n            }\r\n        };\r\n\r\n        fetchTestsForDevice();\r\n    }, [deviceId]);\r\n\r\n    return (\r\n        <div>\r\n            <h3>Summary</h3>\r\n            <div>\r\n                <p>Tests Completed: {completedTests.length}</p>\r\n                <p>Tests Incomplete: {incompleteTests.length}</p>\r\n            </div>\r\n            <button onClick={onClose}>Close</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SummaryModal;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAM;EAAEC;AAAO,CAAC,GAAGH,YAAY,CAAC,CAAC;AAEjC,MAAMI,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE1DD,SAAS,CAAC,MAAM;IACZ,MAAMc,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACA;QACA,MAAMC,aAAa,GAAG,MAAMV,MAAM,CAACW,QAAQ,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC;QACvD,MAAMC,QAAQ,GAAGJ,aAAa,CAACK,KAAK;;QAEpC;QACA,MAAMC,WAAW,GAAGF,QAAQ,CAACG,MAAM,CAC9BL,IAAI,IAAKA,IAAI,CAACM,MAAM,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,KAAKlB,QAAQ,CAACiB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAC/E,CAAC;;QAED;QACA,MAAMC,SAAS,GAAGL,WAAW,CAACC,MAAM,CAAEL,IAAI,IAAKA,IAAI,CAACU,SAAS,CAAC;QAC9D,MAAMC,UAAU,GAAGP,WAAW,CAACC,MAAM,CAAEL,IAAI,IAAK,CAACA,IAAI,CAACU,SAAS,CAAC;;QAEhE;QACAhB,iBAAiB,CAACe,SAAS,CAAC;QAC5Bb,kBAAkB,CAACe,UAAU,CAAC;MAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC5D;IACJ,CAAC;IAEDf,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,oBACIH,OAAA;IAAA2B,QAAA,gBACI3B,OAAA;MAAA2B,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChB/B,OAAA;MAAA2B,QAAA,gBACI3B,OAAA;QAAA2B,QAAA,GAAG,mBAAiB,EAACrB,cAAc,CAAC0B,MAAM;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/C/B,OAAA;QAAA2B,QAAA,GAAG,oBAAkB,EAACnB,eAAe,CAACwB,MAAM;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACN/B,OAAA;MAAQiC,OAAO,EAAE7B,OAAQ;MAAAuB,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEd,CAAC;AAAC1B,EAAA,CAzCIH,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AA2ClB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}