{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientError = void 0;\nvar ClientError = /** @class */function (_super) {\n  __extends(ClientError, _super);\n  function ClientError(response, request) {\n    var _this = this;\n    var message = ClientError.extractMessage(response) + \": \" + JSON.stringify({\n      response: response,\n      request: request\n    });\n    _this = _super.call(this, message) || this;\n    Object.setPrototypeOf(_this, ClientError.prototype);\n    _this.response = response;\n    _this.request = request;\n    // this is needed as Safari doesn't support .captureStackTrace\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(_this, ClientError);\n    }\n    return _this;\n  }\n  ClientError.extractMessage = function (response) {\n    try {\n      return response.errors[0].message;\n    } catch (e) {\n      return \"GraphQL Error (Code: \" + response.status + \")\";\n    }\n  };\n  return ClientError;\n}(Error);\nexports.ClientError = ClientError;","map":{"version":3,"names":["ClientError","_super","__extends","response","request","_this","message","extractMessage","JSON","stringify","call","Object","setPrototypeOf","prototype","Error","captureStackTrace","errors","e","status","exports"],"sources":["C:\\Users\\mabur\\Desktop\\College\\SacState\\CSC131\\MainProject\\BeamTeamCSC131\\node_modules\\graphql-request\\src\\types.ts"],"sourcesContent":["import { DocumentNode } from 'graphql/language/ast'\r\nimport * as Dom from './types.dom'\r\n\r\nexport type Variables = { [key: string]: any }\r\n\r\nexport interface GraphQLError {\r\n  message: string\r\n  locations?: { line: number; column: number }[]\r\n  path?: string[]\r\n  extensions?: any\r\n}\r\n\r\nexport interface GraphQLResponse<T = any> {\r\n  data?: T\r\n  errors?: GraphQLError[]\r\n  extensions?: any\r\n  status: number\r\n  [key: string]: any\r\n}\r\n\r\nexport interface GraphQLRequestContext<V = Variables> {\r\n  query: string | string[]\r\n  variables?: V\r\n}\r\n\r\nexport class ClientError extends Error {\r\n  response: GraphQLResponse\r\n  request: GraphQLRequestContext\r\n\r\n  constructor(response: GraphQLResponse, request: GraphQLRequestContext) {\r\n    const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\r\n      response,\r\n      request,\r\n    })}`\r\n\r\n    super(message)\r\n\r\n    Object.setPrototypeOf(this, ClientError.prototype)\r\n\r\n    this.response = response\r\n    this.request = request\r\n\r\n    // this is needed as Safari doesn't support .captureStackTrace\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, ClientError)\r\n    }\r\n  }\r\n\r\n  private static extractMessage(response: GraphQLResponse): string {\r\n    try {\r\n      return response.errors![0].message\r\n    } catch (e) {\r\n      return `GraphQL Error (Code: ${response.status})`\r\n    }\r\n  }\r\n}\r\n\r\nexport type MaybeFunction<T> = T | (() => T);\r\n\r\nexport type RequestDocument = string | DocumentNode\r\n\r\nexport type PatchedRequestInit = Omit<Dom.RequestInit, \"headers\">\r\n  & {headers?: MaybeFunction<Dom.RequestInit['headers']>};\r\n\r\nexport type BatchRequestDocument<V = Variables> = {\r\n  document: RequestDocument\r\n  variables?: V\r\n}\r\n\r\nexport type RawRequestOptions<V = Variables> = {\r\n  query: string\r\n  variables?: V\r\n  requestHeaders?: Dom.RequestInit['headers']\r\n  signal?: Dom.RequestInit['signal']\r\n}\r\n\r\nexport type RequestOptions<V = Variables> = {\r\n  document: RequestDocument\r\n  variables?: V\r\n  requestHeaders?: Dom.RequestInit['headers']\r\n  signal?: Dom.RequestInit['signal']\r\n}\r\n\r\nexport type BatchRequestsOptions<V = Variables> = {\r\n  documents: BatchRequestDocument<V>[]\r\n  requestHeaders?: Dom.RequestInit['headers']\r\n  signal?: Dom.RequestInit['signal']\r\n}\r\n\r\nexport type RequestExtendedOptions<V = Variables> = { url: string } & RequestOptions<V>\r\n\r\nexport type RawRequestExtendedOptions<V = Variables> = { url: string } & RawRequestOptions<V>\r\n\r\nexport type BatchRequestsExtendedOptions<V = Variables> = { url: string } & BatchRequestsOptions<V>\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAAA,WAAA,0BAAAC,MAAA;EAAiCC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAI/B,SAAAD,YAAYG,QAAyB,EAAEC,OAA8B;IAArE,IAAAC,KAAA;IACE,IAAMC,OAAO,GAAMN,WAAW,CAACO,cAAc,CAACJ,QAAQ,CAAC,UAAKK,IAAI,CAACC,SAAS,CAAC;MACzEN,QAAQ,EAAAA,QAAA;MACRC,OAAO,EAAAA;KACR,CAAG;IAEJC,KAAA,GAAAJ,MAAA,CAAAS,IAAA,OAAMJ,OAAO,CAAC;IAEdK,MAAM,CAACC,cAAc,CAACP,KAAI,EAAEL,WAAW,CAACa,SAAS,CAAC;IAElDR,KAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxBE,KAAI,CAACD,OAAO,GAAGA,OAAO;IAEtB;IACA,IAAI,OAAOU,KAAK,CAACC,iBAAiB,KAAK,UAAU,EAAE;MACjDD,KAAK,CAACC,iBAAiB,CAACV,KAAI,EAAEL,WAAW,CAAC;;;EAE9C;EAEeA,WAAA,CAAAO,cAAc,GAA7B,UAA8BJ,QAAyB;IACrD,IAAI;MACF,OAAOA,QAAQ,CAACa,MAAO,CAAC,CAAC,CAAC,CAACV,OAAO;KACnC,CAAC,OAAOW,CAAC,EAAE;MACV,OAAO,0BAAwBd,QAAQ,CAACe,MAAM,MAAG;;EAErD,CAAC;EACH,OAAAlB,WAAC;AAAD,CAAC,CA9BgCc,KAAK;AAAzBK,OAAA,CAAAnB,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}