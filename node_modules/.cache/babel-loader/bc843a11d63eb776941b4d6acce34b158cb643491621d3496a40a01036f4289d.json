{"ast":null,"code":"import { GraphQLClient } from 'graphql-request';\nexport const createCoreClient = (options, {\n  _logger,\n  _onAuthStateChange\n}) => {\n  const {\n    apiKey,\n    getCredentials,\n    onError,\n    retries = 3\n  } = options;\n  if (typeof retries !== 'number') {\n    throw new Error('retries must a be a number');\n  }\n  if (onError && typeof onError !== 'function') {\n    throw new Error('onError must be a function');\n  }\n  const _errorHandler = onError;\n  _logger('Initializing @vendia/client...');\n  _logger(`'apiKey' was ${apiKey ? '' : 'NOT '}provided.`);\n  const _createGraphQLClient = () => {\n    let sdkHeader = '';\n    try {\n      //@ts-ignore PACKAGE_VERSION injected at build-time by generateClient.ts\n      sdkHeader = `@vendia/client@0.12.0`;\n    } catch (e) {\n      //If PACKAGE_VERSION was not injected, send a default\n      sdkHeader = `@vendia/client@unknown`;\n    }\n    const opts = {\n      headers: {\n        'Content-Type': 'application/json',\n        'x-vendia-sdk': sdkHeader\n      }\n    };\n    if (options.apiKey) {\n      // Auth V1 uses x-api-key header, V2 uses Authorization header\n      opts.headers['x-api-key'] = options.apiKey;\n      opts.headers.Authorization = options.apiKey;\n    }\n    if (options.fetch) {\n      opts.fetch = options.fetch;\n    }\n    return new GraphQLClient(options.apiUrl, opts);\n  };\n  function getRetryDelay(attempt) {\n    // 1000, 2000, 4000 etc, up to maximum of 30 seconds\n    return Math.min(Math.pow(2, attempt) * 1000, 30 * 1000); // eslint-disable-line no-restricted-properties\n  }\n\n  const _requestWrapper = async (action, operationName, attempt = 0) => {\n    try {\n      // Debug timer\n      const startTime = Date.now();\n      // Get credentials before each request (most auth libs handle caching or user can cache themselves)\n      const requestHeaders = {};\n      if (typeof getCredentials === 'function') {\n        const credentials = await getCredentials();\n        if (credentials?.token) {\n          requestHeaders.Authorization = `Bearer ${credentials.token}`;\n        }\n        if (credentials.apiKey) {\n          requestHeaders['x-api-key'] = credentials.apiKey;\n          requestHeaders.Authorization = credentials.apiKey;\n        }\n        _logger(`${operationName} getCredentials duration (ms)`, Date.now() - startTime);\n      }\n      const result = await action(requestHeaders);\n      _logger(`${operationName} request duration (ms)`, Date.now() - startTime);\n      return result;\n    } catch (error) {\n      // RETRY LOGIC\n      _logger('Request error, status:', error?.response?.status);\n      if (attempt < retries) {\n        const delay = getRetryDelay(attempt);\n        _logger(`Retrying ${operationName} (attempt #${attempt + 1}, ${delay}ms delay)`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return _requestWrapper(action, operationName, attempt + 1);\n      }\n      if (_errorHandler) {\n        _logger(`Passing error to user-provided error handler`);\n        _errorHandler(error);\n      }\n      return Promise.reject(error);\n    }\n  };\n  const _gqlClient = _createGraphQLClient();\n  // Copy the type signature of the GraphQLClient.request method and wrap it so it works\n  // with getCredentials, errorHandler, etc.\n  const request = (document, variables, requestHeaders) => {\n    return _requestWrapper(additionalHeaders => {\n      const mergedHeaders = {\n        ...requestHeaders,\n        ...additionalHeaders\n      };\n      return _gqlClient.request(document, variables, mergedHeaders);\n    }, 'request');\n  };\n  return {\n    // Internal\n    _gqlClient,\n    _requestWrapper,\n    // Public\n    request\n  };\n};","map":{"version":3,"names":["GraphQLClient","createCoreClient","options","_logger","_onAuthStateChange","apiKey","getCredentials","onError","retries","Error","_errorHandler","_createGraphQLClient","sdkHeader","e","opts","headers","Authorization","fetch","apiUrl","getRetryDelay","attempt","Math","min","pow","_requestWrapper","action","operationName","startTime","Date","now","requestHeaders","credentials","token","result","error","response","status","delay","Promise","resolve","setTimeout","reject","_gqlClient","request","document","variables","additionalHeaders","mergedHeaders"],"sources":["/Users/maxrutherford/Desktop/SacState/FA23/CSC131/beamteam-csc131/node_modules/.vendia-client/esm/create-core-client.js"],"sourcesContent":["import { GraphQLClient } from 'graphql-request';\nexport const createCoreClient = (options, { _logger, _onAuthStateChange, }) => {\n    const { apiKey, getCredentials, onError, retries = 3 } = options;\n    if (typeof retries !== 'number') {\n        throw new Error('retries must a be a number');\n    }\n    if (onError && typeof onError !== 'function') {\n        throw new Error('onError must be a function');\n    }\n    const _errorHandler = onError;\n    _logger('Initializing @vendia/client...');\n    _logger(`'apiKey' was ${apiKey ? '' : 'NOT '}provided.`);\n    const _createGraphQLClient = () => {\n        let sdkHeader = '';\n        try {\n            //@ts-ignore PACKAGE_VERSION injected at build-time by generateClient.ts\n            sdkHeader = `@vendia/client@0.12.0`;\n        }\n        catch (e) {\n            //If PACKAGE_VERSION was not injected, send a default\n            sdkHeader = `@vendia/client@unknown`;\n        }\n        const opts = {\n            headers: {\n                'Content-Type': 'application/json',\n                'x-vendia-sdk': sdkHeader,\n            },\n        };\n        if (options.apiKey) {\n            // Auth V1 uses x-api-key header, V2 uses Authorization header\n            opts.headers['x-api-key'] = options.apiKey;\n            opts.headers.Authorization = options.apiKey;\n        }\n        if (options.fetch) {\n            opts.fetch = options.fetch;\n        }\n        return new GraphQLClient(options.apiUrl, opts);\n    };\n    function getRetryDelay(attempt) {\n        // 1000, 2000, 4000 etc, up to maximum of 30 seconds\n        return Math.min(Math.pow(2, attempt) * 1000, 30 * 1000); // eslint-disable-line no-restricted-properties\n    }\n    const _requestWrapper = async (action, operationName, attempt = 0) => {\n        try {\n            // Debug timer\n            const startTime = Date.now();\n            // Get credentials before each request (most auth libs handle caching or user can cache themselves)\n            const requestHeaders = {};\n            if (typeof getCredentials === 'function') {\n                const credentials = await getCredentials();\n                if (credentials?.token) {\n                    requestHeaders.Authorization = `Bearer ${credentials.token}`;\n                }\n                if (credentials.apiKey) {\n                    requestHeaders['x-api-key'] = credentials.apiKey;\n                    requestHeaders.Authorization = credentials.apiKey;\n                }\n                _logger(`${operationName} getCredentials duration (ms)`, Date.now() - startTime);\n            }\n            const result = await action(requestHeaders);\n            _logger(`${operationName} request duration (ms)`, Date.now() - startTime);\n            return result;\n        }\n        catch (error) {\n            // RETRY LOGIC\n            _logger('Request error, status:', error?.response?.status);\n            if (attempt < retries) {\n                const delay = getRetryDelay(attempt);\n                _logger(`Retrying ${operationName} (attempt #${attempt + 1}, ${delay}ms delay)`);\n                await new Promise((resolve) => setTimeout(resolve, delay));\n                return _requestWrapper(action, operationName, attempt + 1);\n            }\n            if (_errorHandler) {\n                _logger(`Passing error to user-provided error handler`);\n                _errorHandler(error);\n            }\n            return Promise.reject(error);\n        }\n    };\n    const _gqlClient = _createGraphQLClient();\n    // Copy the type signature of the GraphQLClient.request method and wrap it so it works\n    // with getCredentials, errorHandler, etc.\n    const request = (document, variables, requestHeaders) => {\n        return _requestWrapper((additionalHeaders) => {\n            const mergedHeaders = { ...requestHeaders, ...additionalHeaders };\n            return _gqlClient.request(document, variables, mergedHeaders);\n        }, 'request');\n    };\n    return {\n        // Internal\n        _gqlClient,\n        _requestWrapper,\n        // Public\n        request,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}