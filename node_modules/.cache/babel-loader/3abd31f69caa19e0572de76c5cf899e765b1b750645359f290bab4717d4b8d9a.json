{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mabur\\\\Desktop\\\\College\\\\SacState\\\\CSC131\\\\MainRepo6\\\\BeamTeamCSC131\\\\src\\\\Routes\\\\TestModal.js\",\n  _s = $RefreshSig$();\n// TestModal.js\n\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Table } from 'react-bootstrap';\nimport { vendiaClient } from '../vendiaClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestModal = ({\n  deviceId,\n  deviceName,\n  onClose\n}) => {\n  _s();\n  const {\n    client\n  } = vendiaClient();\n  const [tests, setTests] = useState([]);\n  useEffect(() => {\n    const fetchTestsForDevice = async () => {\n      try {\n        const response = await client.entities.test.list();\n        const testsForDevice = response.items.filter(test => test.Device === deviceName);\n        setTests(testsForDevice);\n      } catch (error) {\n        console.error('Error fetching tests for device:', error);\n      }\n    };\n    fetchTestsForDevice();\n  }, [client, deviceName]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: true,\n    onHide: onClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: [\"Tests for Device: \", deviceName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: tests.length > 0 ? /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Test ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Org Assignment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Test Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Test Method\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tests.map(test => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: test.TestID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: test.OrgAssignment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: test.TestName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: test.TestMethod\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 37\n            }, this)]\n          }, test.TestID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tests found for the selected device.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(TestModal, \"FxEWQGYuZijDeGUIGSMauBw8Rzg=\");\n_c = TestModal;\nexport default TestModal;\nvar _c;\n$RefreshReg$(_c, \"TestModal\");","map":{"version":3,"names":["React","useState","useEffect","Modal","Table","vendiaClient","jsxDEV","_jsxDEV","TestModal","deviceId","deviceName","onClose","_s","client","tests","setTests","fetchTestsForDevice","response","entities","test","list","testsForDevice","items","filter","Device","error","console","show","onHide","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","length","striped","bordered","hover","map","TestID","OrgAssignment","TestName","TestMethod","_c","$RefreshReg$"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/src/Routes/TestModal.js"],"sourcesContent":["// TestModal.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Modal, Table } from 'react-bootstrap';\r\nimport { vendiaClient } from '../vendiaClient';\r\n\r\nconst TestModal = ({ deviceId, deviceName, onClose }) => {\r\n    const { client } = vendiaClient();\r\n    const [tests, setTests] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchTestsForDevice = async () => {\r\n            try {\r\n                const response = await client.entities.test.list();\r\n                const testsForDevice = response.items.filter((test) => test.Device === deviceName);\r\n                setTests(testsForDevice);\r\n            } catch (error) {\r\n                console.error('Error fetching tests for device:', error);\r\n            }\r\n        };\r\n\r\n        fetchTestsForDevice();\r\n    }, [client, deviceName]);\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Tests for Device: {deviceName}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {tests.length > 0 ? (\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Test ID</th>\r\n                                <th>Org Assignment</th>\r\n                                <th>Test Name</th>\r\n                                <th>Test Method</th>\r\n                                {/* Add more table headers based on your Test schema */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {tests.map((test) => (\r\n                                <tr key={test.TestID}>\r\n                                    <td>{test.TestID}</td>\r\n                                    <td>{test.OrgAssignment}</td>\r\n                                    <td>{test.TestName}</td>\r\n                                    <td>{test.TestMethod}</td>\r\n                                    {/* Add more table data based on your Test schema */}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                ) : (\r\n                    <p>No tests found for the selected device.</p>\r\n                )}\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default TestModal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}