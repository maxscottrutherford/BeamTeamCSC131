{"ast":null,"code":"import defineInspect from \"../jsutils/defineInspect.mjs\";\n\n/**\r\n * Contains a range of UTF-8 character offsets and token references that\r\n * identify the region of the source from which the AST derived.\r\n */\nexport var Location = /*#__PURE__*/function () {\n  /**\r\n   * The character offset at which this Node begins.\r\n   */\n\n  /**\r\n   * The character offset at which this Node ends.\r\n   */\n\n  /**\r\n   * The Token at which this Node begins.\r\n   */\n\n  /**\r\n   * The Token at which this Node ends.\r\n   */\n\n  /**\r\n   * The Source document the AST represents.\r\n   */\n  function Location(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n  var _proto = Location.prototype;\n  _proto.toJSON = function toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  };\n  return Location;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Location);\n/**\r\n * Represents a range of characters represented by a lexical token\r\n * within a Source.\r\n */\n\nexport var Token = /*#__PURE__*/function () {\n  /**\r\n   * The kind of Token.\r\n   */\n\n  /**\r\n   * The character offset at which this Node begins.\r\n   */\n\n  /**\r\n   * The character offset at which this Node ends.\r\n   */\n\n  /**\r\n   * The 1-indexed line number on which this Token appears.\r\n   */\n\n  /**\r\n   * The 1-indexed column number at which this Token begins.\r\n   */\n\n  /**\r\n   * For non-punctuation tokens, represents the interpreted value of the token.\r\n   */\n\n  /**\r\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\r\n   * including ignored tokens. <SOF> is always the first node and <EOF>\r\n   * the last.\r\n   */\n  function Token(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n  var _proto2 = Token.prototype;\n  _proto2.toJSON = function toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  };\n  return Token;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Token);\n/**\r\n * @internal\r\n */\n\nexport function isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\r\n * The list of all possible AST node types.\r\n */","map":{"version":3,"names":["defineInspect","Location","startToken","endToken","source","start","end","_proto","prototype","toJSON","Token","kind","line","column","prev","value","next","_proto2","isNode","maybeNode"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainProject/BeamTeamCSC131/node_modules/graphql/language/ast.mjs"],"sourcesContent":["import defineInspect from \"../jsutils/defineInspect.mjs\";\r\n\r\n/**\r\n * Contains a range of UTF-8 character offsets and token references that\r\n * identify the region of the source from which the AST derived.\r\n */\r\nexport var Location = /*#__PURE__*/function () {\r\n  /**\r\n   * The character offset at which this Node begins.\r\n   */\r\n\r\n  /**\r\n   * The character offset at which this Node ends.\r\n   */\r\n\r\n  /**\r\n   * The Token at which this Node begins.\r\n   */\r\n\r\n  /**\r\n   * The Token at which this Node ends.\r\n   */\r\n\r\n  /**\r\n   * The Source document the AST represents.\r\n   */\r\n  function Location(startToken, endToken, source) {\r\n    this.start = startToken.start;\r\n    this.end = endToken.end;\r\n    this.startToken = startToken;\r\n    this.endToken = endToken;\r\n    this.source = source;\r\n  }\r\n\r\n  var _proto = Location.prototype;\r\n\r\n  _proto.toJSON = function toJSON() {\r\n    return {\r\n      start: this.start,\r\n      end: this.end\r\n    };\r\n  };\r\n\r\n  return Location;\r\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\r\n\r\ndefineInspect(Location);\r\n/**\r\n * Represents a range of characters represented by a lexical token\r\n * within a Source.\r\n */\r\n\r\nexport var Token = /*#__PURE__*/function () {\r\n  /**\r\n   * The kind of Token.\r\n   */\r\n\r\n  /**\r\n   * The character offset at which this Node begins.\r\n   */\r\n\r\n  /**\r\n   * The character offset at which this Node ends.\r\n   */\r\n\r\n  /**\r\n   * The 1-indexed line number on which this Token appears.\r\n   */\r\n\r\n  /**\r\n   * The 1-indexed column number at which this Token begins.\r\n   */\r\n\r\n  /**\r\n   * For non-punctuation tokens, represents the interpreted value of the token.\r\n   */\r\n\r\n  /**\r\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\r\n   * including ignored tokens. <SOF> is always the first node and <EOF>\r\n   * the last.\r\n   */\r\n  function Token(kind, start, end, line, column, prev, value) {\r\n    this.kind = kind;\r\n    this.start = start;\r\n    this.end = end;\r\n    this.line = line;\r\n    this.column = column;\r\n    this.value = value;\r\n    this.prev = prev;\r\n    this.next = null;\r\n  }\r\n\r\n  var _proto2 = Token.prototype;\r\n\r\n  _proto2.toJSON = function toJSON() {\r\n    return {\r\n      kind: this.kind,\r\n      value: this.value,\r\n      line: this.line,\r\n      column: this.column\r\n    };\r\n  };\r\n\r\n  return Token;\r\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\r\n\r\ndefineInspect(Token);\r\n/**\r\n * @internal\r\n */\r\n\r\nexport function isNode(maybeNode) {\r\n  return maybeNode != null && typeof maybeNode.kind === 'string';\r\n}\r\n/**\r\n * The list of all possible AST node types.\r\n */\r\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,8BAA8B;;AAExD;AACA;AACA;AACA;AACA,OAAO,IAAIC,QAAQ,GAAG,aAAa,YAAY;EAC7C;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;EACE,SAASA,QAAQA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IAC9C,IAAI,CAACC,KAAK,GAAGH,UAAU,CAACG,KAAK;IAC7B,IAAI,CAACC,GAAG,GAAGH,QAAQ,CAACG,GAAG;IACvB,IAAI,CAACJ,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAEA,IAAIG,MAAM,GAAGN,QAAQ,CAACO,SAAS;EAE/BD,MAAM,CAACE,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IAChC,OAAO;MACLJ,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,GAAG,EAAE,IAAI,CAACA;IACZ,CAAC;EACH,CAAC;EAED,OAAOL,QAAQ;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC;;AAELD,aAAa,CAACC,QAAQ,CAAC;AACvB;AACA;AACA;AACA;;AAEA,OAAO,IAAIS,KAAK,GAAG,aAAa,YAAY;EAC1C;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAEN,KAAK,EAAEC,GAAG,EAAEM,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC1D,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACN,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACM,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAG,IAAI;EAClB;EAEA,IAAIC,OAAO,GAAGP,KAAK,CAACF,SAAS;EAE7BS,OAAO,CAACR,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IACjC,OAAO;MACLE,IAAI,EAAE,IAAI,CAACA,IAAI;MACfI,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBH,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,MAAM,EAAE,IAAI,CAACA;IACf,CAAC;EACH,CAAC;EAED,OAAOH,KAAK;AACd,CAAC,CAAC,CAAC,CAAC,CAAC;;AAELV,aAAa,CAACU,KAAK,CAAC;AACpB;AACA;AACA;;AAEA,OAAO,SAASQ,MAAMA,CAACC,SAAS,EAAE;EAChC,OAAOA,SAAS,IAAI,IAAI,IAAI,OAAOA,SAAS,CAACR,IAAI,KAAK,QAAQ;AAChE;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}