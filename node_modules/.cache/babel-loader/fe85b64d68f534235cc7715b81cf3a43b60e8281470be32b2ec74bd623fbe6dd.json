{"ast":null,"code":"var _defKindToExtKind;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport invariant from \"../../jsutils/invariant.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isTypeDefinitionNode } from \"../../language/predicates.mjs\";\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\r\n * Possible type extension\r\n *\r\n * A type extension is only valid if the type is defined and has the same kind.\r\n */\nexport function PossibleTypeExtensionsRule(context) {\n  var schema = context.getSchema();\n  var definedTypes = Object.create(null);\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n  function checkExtension(node) {\n    var typeName = node.name.value;\n    var defNode = definedTypes[typeName];\n    var existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    var expectedKind;\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        var kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(new GraphQLError(\"Cannot extend non-\".concat(kindStr, \" type \\\"\").concat(typeName, \"\\\".\"), defNode ? [defNode, node] : node));\n      }\n    } else {\n      var allTypeNames = Object.keys(definedTypes);\n      if (schema) {\n        allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));\n      }\n      var suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(new GraphQLError(\"Cannot extend type \\\"\".concat(typeName, \"\\\" because it is not defined.\") + didYouMean(suggestedTypes), node.name));\n    }\n  }\n}\nvar defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, Kind.SCALAR_TYPE_DEFINITION, Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.OBJECT_TYPE_DEFINITION, Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INTERFACE_TYPE_DEFINITION, Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.UNION_TYPE_DEFINITION, Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.ENUM_TYPE_DEFINITION, Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INPUT_OBJECT_TYPE_DEFINITION, Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n  false || invariant(0, 'Unexpected type: ' + inspect(type));\n}\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n  false || invariant(0, 'Unexpected kind: ' + inspect(kind));\n}","map":{"version":3,"names":["_defKindToExtKind","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","inspect","invariant","didYouMean","suggestionList","GraphQLError","Kind","isTypeDefinitionNode","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","PossibleTypeExtensionsRule","context","schema","getSchema","definedTypes","create","_i2","_context$getDocument$2","getDocument","definitions","length","def","name","ScalarTypeExtension","checkExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","node","typeName","defNode","existingType","getType","expectedKind","defKindToExtKind","kind","typeToExtKind","kindStr","extensionKindToTypeName","reportError","concat","allTypeNames","keys","getTypeMap","suggestedTypes","SCALAR_TYPE_DEFINITION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_DEFINITION","UNION_TYPE_EXTENSION","ENUM_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","type"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs"],"sourcesContent":["var _defKindToExtKind;\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nimport inspect from \"../../jsutils/inspect.mjs\";\r\nimport invariant from \"../../jsutils/invariant.mjs\";\r\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\r\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\r\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\r\nimport { Kind } from \"../../language/kinds.mjs\";\r\nimport { isTypeDefinitionNode } from \"../../language/predicates.mjs\";\r\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from \"../../type/definition.mjs\";\r\n\r\n/**\r\n * Possible type extension\r\n *\r\n * A type extension is only valid if the type is defined and has the same kind.\r\n */\r\nexport function PossibleTypeExtensionsRule(context) {\r\n  var schema = context.getSchema();\r\n  var definedTypes = Object.create(null);\r\n\r\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\r\n    var def = _context$getDocument$2[_i2];\r\n\r\n    if (isTypeDefinitionNode(def)) {\r\n      definedTypes[def.name.value] = def;\r\n    }\r\n  }\r\n\r\n  return {\r\n    ScalarTypeExtension: checkExtension,\r\n    ObjectTypeExtension: checkExtension,\r\n    InterfaceTypeExtension: checkExtension,\r\n    UnionTypeExtension: checkExtension,\r\n    EnumTypeExtension: checkExtension,\r\n    InputObjectTypeExtension: checkExtension\r\n  };\r\n\r\n  function checkExtension(node) {\r\n    var typeName = node.name.value;\r\n    var defNode = definedTypes[typeName];\r\n    var existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\r\n    var expectedKind;\r\n\r\n    if (defNode) {\r\n      expectedKind = defKindToExtKind[defNode.kind];\r\n    } else if (existingType) {\r\n      expectedKind = typeToExtKind(existingType);\r\n    }\r\n\r\n    if (expectedKind) {\r\n      if (expectedKind !== node.kind) {\r\n        var kindStr = extensionKindToTypeName(node.kind);\r\n        context.reportError(new GraphQLError(\"Cannot extend non-\".concat(kindStr, \" type \\\"\").concat(typeName, \"\\\".\"), defNode ? [defNode, node] : node));\r\n      }\r\n    } else {\r\n      var allTypeNames = Object.keys(definedTypes);\r\n\r\n      if (schema) {\r\n        allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));\r\n      }\r\n\r\n      var suggestedTypes = suggestionList(typeName, allTypeNames);\r\n      context.reportError(new GraphQLError(\"Cannot extend type \\\"\".concat(typeName, \"\\\" because it is not defined.\") + didYouMean(suggestedTypes), node.name));\r\n    }\r\n  }\r\n}\r\nvar defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, Kind.SCALAR_TYPE_DEFINITION, Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.OBJECT_TYPE_DEFINITION, Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INTERFACE_TYPE_DEFINITION, Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.UNION_TYPE_DEFINITION, Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.ENUM_TYPE_DEFINITION, Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INPUT_OBJECT_TYPE_DEFINITION, Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);\r\n\r\nfunction typeToExtKind(type) {\r\n  if (isScalarType(type)) {\r\n    return Kind.SCALAR_TYPE_EXTENSION;\r\n  }\r\n\r\n  if (isObjectType(type)) {\r\n    return Kind.OBJECT_TYPE_EXTENSION;\r\n  }\r\n\r\n  if (isInterfaceType(type)) {\r\n    return Kind.INTERFACE_TYPE_EXTENSION;\r\n  }\r\n\r\n  if (isUnionType(type)) {\r\n    return Kind.UNION_TYPE_EXTENSION;\r\n  }\r\n\r\n  if (isEnumType(type)) {\r\n    return Kind.ENUM_TYPE_EXTENSION;\r\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\r\n\r\n\r\n  if (isInputObjectType(type)) {\r\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\r\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\r\n\r\n\r\n  false || invariant(0, 'Unexpected type: ' + inspect(type));\r\n}\r\n\r\nfunction extensionKindToTypeName(kind) {\r\n  switch (kind) {\r\n    case Kind.SCALAR_TYPE_EXTENSION:\r\n      return 'scalar';\r\n\r\n    case Kind.OBJECT_TYPE_EXTENSION:\r\n      return 'object';\r\n\r\n    case Kind.INTERFACE_TYPE_EXTENSION:\r\n      return 'interface';\r\n\r\n    case Kind.UNION_TYPE_EXTENSION:\r\n      return 'union';\r\n\r\n    case Kind.ENUM_TYPE_EXTENSION:\r\n      return 'enum';\r\n\r\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\r\n      return 'input object';\r\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\r\n\r\n\r\n  false || invariant(0, 'Unexpected kind: ' + inspect(kind));\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}