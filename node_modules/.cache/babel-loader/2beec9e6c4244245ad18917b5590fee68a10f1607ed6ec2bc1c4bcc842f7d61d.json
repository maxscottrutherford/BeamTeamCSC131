{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mabur\\\\Desktop\\\\College\\\\SacState\\\\CSC131\\\\MainRepo6\\\\BeamTeamCSC131\\\\src\\\\Routes\\\\SummaryModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { vendiaClient } from '../vendiaClient';\nimport { Modal, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SummaryModal = ({\n  deviceId,\n  onHide\n}) => {\n  _s();\n  const {\n    client\n  } = vendiaClient();\n  const [completedTests, setCompletedTests] = useState([]);\n  const [incompleteTests, setIncompleteTests] = useState([]);\n  useEffect(() => {\n    const fetchTestsForDevice = async () => {\n      try {\n        // Fetch tests associated with the specific device\n        const testsResponse = await client.entities.test.list();\n        const devicesList = testsResponse.items;\n        console.log(\"testsResponse\", testsResponse);\n\n        // Wait for the tests to be fetched\n        const devicesWithCompletion = await Promise.all(devicesList.map(async device => {\n          try {\n            const completedTests = 0;\n            const incompleteTests = 0;\n            const testsResponse = await client.entities.test.list();\n            // const deviceTests = testsResponse.items.filter((test) => test.Device === device.DeviceName);\n            for (let i = 0; i < testsResponse.items.length; i++) {\n              console.log(\"test\", testsResponse.items[i].Device);\n              if (testsResponse.items[i].Device === device.DeviceName) {\n                if (testsResponse.items[i].Completed) {\n                  completedTests += 1;\n                } else {\n                  incompleteTests += 1;\n                }\n              }\n            }\n\n            // // Separate completed and incomplete tests\n\n            console.log(\"incomplete\", incompleteTests.length);\n            setCompletedTests(completedTests);\n            setIncompleteTests(incompleteTests);\n          } catch (error) {\n            console.error('Error fetching tests for device:', error);\n          }\n        }));\n      } catch (error) {\n        console.error('Error fetching tests response:', error);\n      }\n    };\n    fetchTestsForDevice();\n  }, [client, deviceId]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: true,\n    onHide: onHide,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Completed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), \" \", completedTests.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Incompleted:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), \" \", incompleteTests.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onHide,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(SummaryModal, \"EQCVrDpweIpBV0SaSMLWG6xFkKc=\");\n_c = SummaryModal;\nexport default SummaryModal;\nvar _c;\n$RefreshReg$(_c, \"SummaryModal\");","map":{"version":3,"names":["React","useState","useEffect","vendiaClient","Modal","Button","jsxDEV","_jsxDEV","SummaryModal","deviceId","onHide","_s","client","completedTests","setCompletedTests","incompleteTests","setIncompleteTests","fetchTestsForDevice","testsResponse","entities","test","list","devicesList","items","console","log","devicesWithCompletion","Promise","all","map","device","i","length","Device","DeviceName","Completed","error","show","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","Footer","variant","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/src/Routes/SummaryModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { vendiaClient } from '../vendiaClient';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nconst SummaryModal = ({ deviceId, onHide }) => {\r\n    const { client } = vendiaClient();\r\n    const [completedTests, setCompletedTests] = useState([]);\r\n    const [incompleteTests, setIncompleteTests] = useState([]);\r\n    useEffect(() => {\r\n        const fetchTestsForDevice = async () => {\r\n            try {\r\n                // Fetch tests associated with the specific device\r\n                const testsResponse = await client.entities.test.list();\r\n                const devicesList = testsResponse.items;\r\n                console.log(\"testsResponse\", testsResponse);\r\n\r\n                // Wait for the tests to be fetched\r\n                const devicesWithCompletion = await Promise.all(\r\n                    devicesList.map(async (device) => {\r\n                        try {\r\n                            const completedTests = 0;\r\n                            const incompleteTests = 0;\r\n                            const testsResponse = await client.entities.test.list();\r\n                            // const deviceTests = testsResponse.items.filter((test) => test.Device === device.DeviceName);\r\n                            for (let i = 0; i < testsResponse.items.length; i++) {\r\n                                console.log(\"test\", testsResponse.items[i].Device);\r\n                                if (testsResponse.items[i].Device === device.DeviceName) {\r\n                                    if (testsResponse.items[i].Completed) {\r\n                                        completedTests += 1;\r\n                                    } else {\r\n                                        incompleteTests += 1;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // // Separate completed and incomplete tests\r\n\r\n                            console.log(\"incomplete\", incompleteTests.length);\r\n\r\n                            setCompletedTests(completedTests);\r\n                            setIncompleteTests(incompleteTests);\r\n                        } catch (error) {\r\n                            console.error('Error fetching tests for device:', error);\r\n                        }\r\n                    })\r\n                );\r\n            } catch (error) {\r\n                console.error('Error fetching tests response:', error);\r\n            }\r\n        };\r\n\r\n        fetchTestsForDevice();\r\n    }, [client, deviceId]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Modal show={true} onHide={onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Summary</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    <p>\r\n                        <strong>Tests Completed:</strong> {completedTests.length}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Tests Incompleted:</strong> {incompleteTests.length}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onHide}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default SummaryModal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}