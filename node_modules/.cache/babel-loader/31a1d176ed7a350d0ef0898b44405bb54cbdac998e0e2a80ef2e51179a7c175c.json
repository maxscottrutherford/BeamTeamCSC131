{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mabur\\\\Desktop\\\\College\\\\SacState\\\\CSC131\\\\MainRepo6\\\\BeamTeamCSC131\\\\src\\\\Routes\\\\SummaryModal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { vendiaClient } from '../vendiaClient';\nimport { Modal, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  client\n} = vendiaClient();\nconst SummaryModal = ({\n  deviceId,\n  onClose\n}) => {\n  _s();\n  const [completedTests, setCompletedTests] = useState([]);\n  const [incompleteTests, setIncompleteTests] = useState([]);\n  useEffect(() => {\n    const fetchTestsForDevice = async () => {\n      try {\n        // Fetch tests associated with the device\n        const testsResponse = await client.entities.test.list();\n        const allTests = testsResponse.items;\n\n        // Filter tests for the specified device\n        const deviceTests = allTests.filter(test => test.Device.trim().toLowerCase() === deviceId.trim().toLowerCase());\n\n        // Separate completed and incomplete tests\n        const completed = deviceTests.filter(test => test.Completed);\n        const incomplete = deviceTests.length - completed.length;\n\n        // Update state with the results\n        setCompletedTests(completed);\n        setIncompleteTests(incomplete);\n      } catch (error) {\n        console.error('Error fetching tests for device:', error);\n      }\n    };\n    fetchTestsForDevice();\n  }, [deviceId]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: true,\n    onHide: onClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Completed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), \" \", completedTests.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Incompleted:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), \" \", incompleteTests.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(SummaryModal, \"EQCVrDpweIpBV0SaSMLWG6xFkKc=\");\n_c = SummaryModal;\nexport default SummaryModal;\nvar _c;\n$RefreshReg$(_c, \"SummaryModal\");","map":{"version":3,"names":["React","useEffect","useState","vendiaClient","Modal","Button","jsxDEV","_jsxDEV","client","SummaryModal","deviceId","onClose","_s","completedTests","setCompletedTests","incompleteTests","setIncompleteTests","fetchTestsForDevice","testsResponse","entities","test","list","allTests","items","deviceTests","filter","Device","trim","toLowerCase","completed","Completed","incomplete","length","error","console","show","onHide","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","Footer","variant","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/src/Routes/SummaryModal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { vendiaClient } from '../vendiaClient';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\n\r\nconst { client } = vendiaClient();\r\n\r\nconst SummaryModal = ({ deviceId, onClose }) => {\r\n    const [completedTests, setCompletedTests] = useState([]);\r\n    const [incompleteTests, setIncompleteTests] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchTestsForDevice = async () => {\r\n            try {\r\n                // Fetch tests associated with the device\r\n                const testsResponse = await client.entities.test.list();\r\n                const allTests = testsResponse.items;\r\n\r\n                // Filter tests for the specified device\r\n                const deviceTests = allTests.filter(\r\n                    (test) => test.Device.trim().toLowerCase() === deviceId.trim().toLowerCase()\r\n                );\r\n\r\n                // Separate completed and incomplete tests\r\n                const completed = deviceTests.filter((test) => test.Completed);\r\n                const incomplete = deviceTests.length - completed.length;\r\n\r\n                // Update state with the results\r\n                setCompletedTests(completed);\r\n                setIncompleteTests(incomplete);\r\n            } catch (error) {\r\n                console.error('Error fetching tests for device:', error);\r\n            }\r\n        };\r\n\r\n        fetchTestsForDevice();\r\n    }, [deviceId]);\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Summary</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    <p>\r\n                        <strong>Tests Completed:</strong> {completedTests.length}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Tests Incompleted:</strong> {incompleteTests.length}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default SummaryModal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}