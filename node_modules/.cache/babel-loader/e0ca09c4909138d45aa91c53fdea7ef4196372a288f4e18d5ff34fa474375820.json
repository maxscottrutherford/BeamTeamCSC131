{"ast":null,"code":"import gql from 'graphql-tag';\nexport const Vendia_Block_Result_FragmentFragmentDoc = gql`\n    fragment Vendia_Block_Result_Fragment on Vendia_Block_Result_ {\n  error\n  result {\n    _id\n    blockSchemaVersion\n    blockId\n    redactedBlockHash\n    previousBlockId\n    previousRedactedBlockHash\n    blockHash\n    previousBlockHash\n    status\n    commitTime\n    _owner\n    transactions {\n      _id\n      hash\n      redactedHash\n      signature\n      version\n      submissionTime\n      mutations\n      _owner\n    }\n  }\n}\n    `;\nexport const Vendia_File_Result_FragmentFragmentDoc = gql`\n    fragment Vendia_File_Result_Fragment on Vendia_File_Result_ {\n  error\n  result {\n    _id\n    sourceBucket\n    sourceKey\n    sourceRegion\n    sourceVersion\n    destinationKey\n    copyStrategy\n    read\n    write\n    etag\n    createdTime\n    updatedTime\n    temporaryUrl\n    fileVersion\n    _owner\n  }\n}\n    `;\nexport const Vendia_Folder_Result_FragmentFragmentDoc = gql`\n    fragment Vendia_Folder_Result_Fragment on Vendia_Folder_Result_ {\n  error\n  result {\n    _id\n    name\n    parent\n    read\n    write\n    copyStrategy\n    createdTime\n    updatedTime\n    _owner\n  }\n}\n    `;\nexport const _blocks__getDocument = gql`\n    query _blocks__get($id: ID!) {\n  getVendia_Block(id: $id) {\n    _id\n    blockSchemaVersion\n    blockId\n    redactedBlockHash\n    previousBlockId\n    previousRedactedBlockHash\n    blockHash\n    previousBlockHash\n    status\n    commitTime\n    _owner\n    transactions {\n      _id\n      hash\n      redactedHash\n      signature\n      version\n      submissionTime\n      mutations\n      _owner\n    }\n  }\n}\n    `;\nexport const _blocks__listDocument = gql`\n    query _blocks__list($order: [Vendia_Block_OrderInput_!], $filter: Vendia_Block_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_BlockItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    nextToken\n    Vendia_BlockItems {\n      _id\n      blockSchemaVersion\n      blockId\n      redactedBlockHash\n      previousBlockId\n      previousRedactedBlockHash\n      blockHash\n      previousBlockHash\n      status\n      commitTime\n      _owner\n      transactions {\n        _id\n        hash\n        redactedHash\n        signature\n        version\n        submissionTime\n        mutations\n        _owner\n      }\n    }\n  }\n}\n    `;\nexport const _blocks__onAddDocument = gql`\n    subscription _blocks__onAdd {\n  onAddVendia_Block {\n    ...Vendia_Block_Result_Fragment\n  }\n}\n    ${Vendia_Block_Result_FragmentFragmentDoc}`;\nexport const _contracts__getDocument = gql`\n    query _contracts__get($id: ID!, $version: Int) {\n  getVendia_Contract(id: $id, version: $version) {\n    ... on Vendia_Contract {\n      description\n      revisionId\n      _acl {\n        path\n        operations\n        principal {\n          nodes\n        }\n      }\n      _id\n      _owner\n      inputQuery\n      name\n      outputMutation\n      resource {\n        uri\n        csp\n        metadata {\n          name\n          value\n        }\n      }\n    }\n  }\n}\n    `;\nexport const _contracts__listDocument = gql`\n    query _contracts__list($limit: Int, $nextToken: String, $order: [Vendia_Contract_OrderInput_!], $filter: Vendia_Contract_FilterInput_) {\n  listVendia_ContractItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_ContractItems {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n    }\n    nextToken\n  }\n}\n    `;\nexport const _contracts__listVersionsDocument = gql`\n    query _contracts__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_ContractVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nexport const _contracts__addDocument = gql`\n    mutation _contracts__add($aclInput: Vendia_Acls_Input_, $input: Vendia_Contract_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  addVendia_Contract(aclInput: $aclInput, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport const _contracts__updateDocument = gql`\n    mutation _contracts__update($id: ID!, $aclInput: Vendia_Acls_Input_, $condition: Vendia_Contract_ConditionInput_, $input: Vendia_Contract_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  updateVendia_Contract(\n    input: $input\n    aclInput: $aclInput\n    condition: $condition\n    id: $id\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport const _contracts__invokeDocument = gql`\n    mutation _contracts__invoke($input: Vendia_Contract_InvokeInput_, $revisionId: String, $id: ID!) {\n  invokeVendia_Contract(\n    id: $id\n    input: $input\n    revisionId: $revisionId\n    syncMode: ASYNC\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _contracts__removeDocument = gql`\n    mutation _contracts__remove($id: ID!, $condition: Vendia_Contract_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  removeVendia_Contract(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _deployments__getDocument = gql`\n    query _deployments__get($id: ID!) {\n  getVendia_DeploymentInfo(id: $id) {\n    _id\n    deploymentTime\n    consensusDefinitionHash\n    versionTag\n    _owner\n  }\n}\n    `;\nexport const _deployments__listDocument = gql`\n    query _deployments__list($order: [Vendia_DeploymentInfo_OrderInput_!], $filter: Vendia_DeploymentInfo_FilterInput_, $nextToken: String, $limit: Int) {\n  listVendia_DeploymentInfoItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_DeploymentInfoItems {\n      _id\n      deploymentTime\n      consensusDefinitionHash\n      versionTag\n      _owner\n    }\n    nextToken\n  }\n}\n    `;\nexport const _files__getDocument = gql`\n    query _files__get($id: ID!, $version: Int) {\n  getVendia_File(id: $id, version: $version) {\n    _id\n    sourceBucket\n    sourceKey\n    sourceRegion\n    sourceVersion\n    destinationKey\n    copyStrategy\n    read\n    write\n    etag\n    createdTime\n    updatedTime\n    temporaryUrl\n    fileVersion\n    _owner\n  }\n}\n    `;\nexport const _files__listDocument = gql`\n    query _files__list($order: [Vendia_File_OrderInput_!], $filter: Vendia_File_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_FileItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    nextToken\n    Vendia_FileItems {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\nexport const _files__listVersionsDocument = gql`\n    query _files__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_FileVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nexport const _files__addDocument = gql`\n    mutation _files__add($input: Vendia_File_Input_!) {\n  addVendia_File(input: $input, syncMode: ASYNC) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\nexport const _files__updateDocument = gql`\n    mutation _files__update($id: ID!, $condition: Vendia_File_ConditionInput_, $input: Vendia_File_UpdateInput_!) {\n  updateVendia_File(\n    id: $id\n    input: $input\n    condition: $condition\n    syncMode: ASYNC\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\nexport const _files__removeDocument = gql`\n    mutation _files__remove($condition: Vendia_File_ConditionInput_, $id: ID!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  removeVendia_File(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _files__onAddDocument = gql`\n    subscription _files__onAdd {\n  onAddVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\nexport const _files__onRemoveDocument = gql`\n    subscription _files__onRemove {\n  onRemoveVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\nexport const _files__onUpdateDocument = gql`\n    subscription _files__onUpdate {\n  onUpdateVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\nexport const _folders__getDocument = gql`\n    query _folders__get($id: ID!, $version: Int) {\n  getVendia_Folder(id: $id, version: $version) {\n    _id\n    name\n    parent\n    read\n    write\n    copyStrategy\n    createdTime\n    updatedTime\n    _owner\n  }\n}\n    `;\nexport const _folders__listDocument = gql`\n    query _folders__list($order: [Vendia_Folder_OrderInput_!], $filter: Vendia_Folder_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_FolderItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_FolderItems {\n      _id\n      name\n      parent\n      read\n      write\n      copyStrategy\n      createdTime\n      updatedTime\n      _owner\n    }\n    nextToken\n  }\n}\n    `;\nexport const _folders__listVersionsDocument = gql`\n    query _folders__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_FolderVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nexport const _folders__addDocument = gql`\n    mutation _folders__add($input: Vendia_Folder_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  addVendia_Folder(input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      name\n      parent\n      read\n      write\n      copyStrategy\n      createdTime\n      updatedTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _folders__removeDocument = gql`\n    mutation _folders__remove($id: ID!, $condition: Vendia_Folder_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  removeVendia_Folder(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _folders__onAddDocument = gql`\n    subscription _folders__onAdd {\n  onAddVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\nexport const _folders__onRemoveDocument = gql`\n    subscription _folders__onRemove {\n  onRemoveVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\nexport const _folders__onUpdateDocument = gql`\n    subscription _folders__onUpdate {\n  onUpdateVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\nexport const _settings__getDocument = gql`\n    query _settings__get($version: Int) {\n  getVendia_Settings(version: $version) {\n    blockReportWebhooks\n    blockReportEmails\n    deadLetterWebhooks\n    deadLetterEmails\n    azure {\n      defaultSubscriptionId\n      defaultTenantId\n    }\n    resourceMapKeys\n    resourceMapValues\n    apiSettings {\n      apiKeys {\n        value\n        usagePlan {\n          quotaSettings {\n            limit\n            offset\n            period\n          }\n          throttleSettings {\n            burstLimit\n            rateLimit\n          }\n        }\n      }\n      auth {\n        authorizerType\n        authorizerArn\n        allowedAccounts\n      }\n    }\n    _owner\n    aws {\n      blockReportSQSQueues\n      blockReportLambdas\n      blockReportFirehoses\n      deadLetterSQSQueues\n      deadLetterLambdas\n      s3ReadAccounts\n      dataDogMonitoring {\n        ddExternalId\n        ddApiKey\n        ddLogEndpoint\n        ddSendLogs\n      }\n    }\n  }\n}\n    `;\nexport const _settings__listVersionsDocument = gql`\n    query _settings__listVersions($limit: Int, $nextToken: String) {\n  listVendia_SettingsVersions(limit: $limit, nextToken: $nextToken) {\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n    nextToken\n  }\n}\n    `;\nexport const _settings__updateDocument = gql`\n    mutation _settings__update($condition: Vendia_Settings_ConditionInput_, $input: Vendia_Settings_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  updateVendia_Settings(condition: $condition, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      blockReportWebhooks\n      blockReportEmails\n      deadLetterWebhooks\n      deadLetterEmails\n      azure {\n        blockReportFunctions {\n          resourceGroupName\n          functionAppName\n          functionName\n        }\n        blockReportQueues {\n          resourceGroupName\n          storageAccountName\n          queueName\n        }\n        deadLetterFunctions {\n          resourceGroupName\n          functionAppName\n          functionName\n        }\n        deadLetterQueues {\n          resourceGroupName\n          storageAccountName\n          queueName\n        }\n        defaultSubscriptionId\n        defaultTenantId\n      }\n      resourceMapKeys\n      resourceMapValues\n      apiSettings {\n        apiKeys {\n          value\n          usagePlan {\n            quotaSettings {\n              limit\n              offset\n              period\n            }\n            throttleSettings {\n              burstLimit\n              rateLimit\n            }\n          }\n        }\n      }\n      _owner\n      aws {\n        blockReportSQSQueues\n        blockReportLambdas\n        blockReportFirehoses\n        deadLetterSQSQueues\n        deadLetterLambdas\n        s3ReadAccounts\n        dataDogMonitoring {\n          ddExternalId\n          ddApiKey\n          ddLogEndpoint\n          ddSendLogs\n        }\n      }\n    }\n  }\n}\n    `;\nexport const _uniInfo__getDocument = gql`\n    query _uniInfo__get {\n  getVendia_UniInfo {\n    name\n    sku\n    schema\n    schemaNamespace\n    status\n    createdTime\n    updatedTime\n    localNodeName\n    _owner\n    nodes {\n      name\n      userId\n      userEmail\n      description\n      status\n      csp\n      region\n      bucketName\n      temporaryCredentials {\n        uploadFile {\n          accessKeyId\n          expiration\n          secretAccessKey\n          sessionToken\n        }\n      }\n      tier {\n        share\n      }\n      vendiaAccount {\n        csp\n        accountId\n        userId\n        org\n      }\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__getDocument = gql`\n    query _sharingPolicies__get($id: ID, $name: String, $version: Int) {\n  getVendia_SharingPolicy(id: $id, name: $name, version: $version) {\n    ... on Vendia_SharingPolicy {\n      _acl {\n        operations\n        path\n        principal {\n          nodes\n        }\n      }\n      _id\n      _owner\n      acl {\n        operations\n        path\n        principal {\n          nodes\n        }\n      }\n      name\n      description\n      entity\n      type\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__listDocument = gql`\n    query _sharingPolicies__list($limit: Int, $nextToken: String, $order: [Vendia_SharingPolicy_OrderInput_!], $filter: Vendia_SharingPolicy_FilterInput_) {\n  listVendia_SharingPolicyItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_SharingPolicyItems {\n      ... on Vendia_SharingPolicy {\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        name\n        description\n        entity\n        type\n      }\n    }\n    nextToken\n  }\n}\n    `;\nexport const _sharingPolicies__listVersionsDocument = gql`\n    query _sharingPolicies__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_SharingPolicyVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__addDocument = gql`\n    mutation _sharingPolicies__add($aclInput: Vendia_Acls_Input_, $input: Vendia_SharingPolicy_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  addVendia_SharingPolicy(aclInput: $aclInput, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_SharingPolicy {\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        name\n        description\n        entity\n        type\n      }\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__updateDocument = gql`\n    mutation _sharingPolicies__update($id: ID, $name: String, $aclInput: Vendia_Acls_Input_, $condition: Vendia_SharingPolicy_ConditionInput_, $input: Vendia_SharingPolicy_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  updateVendia_SharingPolicy(\n    input: $input\n    aclInput: $aclInput\n    condition: $condition\n    id: $id\n    name: $name\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_SharingPolicy {\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        name\n        description\n        entity\n        type\n      }\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__removeDocument = gql`\n    mutation _sharingPolicies__remove($id: ID, $name: String, $condition: Vendia_SharingPolicy_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  removeVendia_SharingPolicy(\n    id: $id\n    name: $name\n    condition: $condition\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nconst defaultWrapper = (action, _operationName) => action();\nexport function getEntities({\n  _gqlClient,\n  _subscribe,\n  _requestWrapper = defaultWrapper\n}) {\n  return {};\n}\nexport function getBlocks({\n  _gqlClient,\n  _subscribe,\n  _requestWrapper = defaultWrapper\n}) {\n  return {\n    get(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_blocks__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_Block);\n      }, 'getVendia_Block');\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_blocks__listDocument, variables, wrappedRequestHeaders).then(res => {\n          const updatedRes = {\n            ...res.listVendia_BlockItems,\n            items: res.listVendia_BlockItems?.Vendia_BlockItems\n          };\n          delete updatedRes.Vendia_BlockItems;\n          return updatedRes;\n        });\n      }, 'listVendia_BlockItems');\n    },\n    onAdd(handler) {\n      return _subscribe({\n        query: _blocks__onAddDocument\n      }, ({\n        data\n      }) => {\n        return handler(data.onAddVendia_Block);\n      });\n    }\n  };\n}\nexport function getContracts({\n  _gqlClient,\n  _subscribe,\n  _requestWrapper = defaultWrapper\n}) {\n  return {\n    get(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_Contract);\n      }, 'getVendia_Contract');\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__listDocument, variables, wrappedRequestHeaders).then(res => {\n          const updatedRes = {\n            ...res.listVendia_ContractItems,\n            items: res.listVendia_ContractItems?.Vendia_ContractItems\n          };\n          delete updatedRes.Vendia_ContractItems;\n          return updatedRes;\n        });\n      }, 'listVendia_ContractItems');\n    },\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__listVersionsDocument, variables, wrappedRequestHeaders).then(res => res.listVendia_ContractVersions);\n      }, 'listVendia_ContractVersions');\n    },\n    add(input, options) {\n      const variables = {\n        ...options,\n        input\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__addDocument, variables, wrappedRequestHeaders).then(res => res.addVendia_Contract);\n      }, 'addVendia_Contract');\n    },\n    update(input, options) {\n      const {\n        _id,\n        ...rest\n      } = input;\n      const variables = {\n        ...options,\n        id: _id,\n        input: rest\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__updateDocument, variables, wrappedRequestHeaders).then(res => res.updateVendia_Contract);\n      }, 'updateVendia_Contract');\n    },\n    invoke(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__invokeDocument, variables, wrappedRequestHeaders).then(res => res.invokeVendia_Contract);\n      }, 'invokeVendia_Contract');\n    },\n    remove(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__removeDocument, variables, wrappedRequestHeaders).then(res => res.removeVendia_Contract);\n      }, 'removeVendia_Contract');\n    }\n  };\n}\nexport function getFiles({\n  _gqlClient,\n  _subscribe,\n  _requestWrapper = defaultWrapper\n}) {\n  return {\n    get(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_File);\n      }, 'getVendia_File');\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__listDocument, variables, wrappedRequestHeaders).then(res => {\n          const updatedRes = {\n            ...res.listVendia_FileItems,\n            items: res.listVendia_FileItems?.Vendia_FileItems\n          };\n          delete updatedRes.Vendia_FileItems;\n          return updatedRes;\n        });\n      }, 'listVendia_FileItems');\n    },\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__listVersionsDocument, variables, wrappedRequestHeaders).then(res => res.listVendia_FileVersions);\n      }, 'listVendia_FileVersions');\n    },\n    add(input) {\n      const variables = {\n        input\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__addDocument, variables, wrappedRequestHeaders).then(res => res.addVendia_File);\n      }, 'addVendia_File');\n    },\n    update(input, options) {\n      const {\n        _id,\n        ...rest\n      } = input;\n      const variables = {\n        ...options,\n        id: _id,\n        input: rest\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__updateDocument, variables, wrappedRequestHeaders).then(res => res.updateVendia_File);\n      }, 'updateVendia_File');\n    },\n    remove(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__removeDocument, variables, wrappedRequestHeaders).then(res => res.removeVendia_File);\n      }, 'removeVendia_File');\n    },\n    onAdd(handler) {\n      return _subscribe({\n        query: _files__onAddDocument\n      }, ({\n        data\n      }) => {\n        return handler(data.onAddVendia_File);\n      });\n    },\n    onRemove(handler) {\n      return _subscribe({\n        query: _files__onRemoveDocument\n      }, ({\n        data\n      }) => {\n        return handler(data.onRemoveVendia_File);\n      });\n    },\n    onUpdate(handler) {\n      return _subscribe({\n        query: _files__onUpdateDocument\n      }, ({\n        data\n      }) => {\n        return handler(data.onUpdateVendia_File);\n      });\n    }\n  };\n}\nexport function getFolders({\n  _gqlClient,\n  _subscribe,\n  _requestWrapper = defaultWrapper\n}) {\n  return {\n    get(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_Folder);\n      }, 'getVendia_Folder');\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__listDocument, variables, wrappedRequestHeaders).then(res => {\n          const updatedRes = {\n            ...res.listVendia_FolderItems,\n            items: res.listVendia_FolderItems?.Vendia_FolderItems\n          };\n          delete updatedRes.Vendia_FolderItems;\n          return updatedRes;\n        });\n      }, 'listVendia_FolderItems');\n    },\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__listVersionsDocument, variables, wrappedRequestHeaders).then(res => res.listVendia_FolderVersions);\n      }, 'listVendia_FolderVersions');\n    },\n    add(input, options) {\n      const variables = {\n        ...options,\n        input\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__addDocument, variables, wrappedRequestHeaders).then(res => res.addVendia_Folder);\n      }, 'addVendia_Folder');\n    },\n    remove(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__removeDocument, variables, wrappedRequestHeaders).then(res => res.removeVendia_Folder);\n      }, 'removeVendia_Folder');\n    },\n    onAdd(handler) {\n      return _subscribe({\n        query: _folders__onAddDocument\n      }, ({\n        data\n      }) => {\n        return handler(data.onAddVendia_Folder);\n      });\n    },\n    onRemove(handler) {\n      return _subscribe({\n        query: _folders__onRemoveDocument\n      }, ({\n        data\n      }) => {\n        return handler(data.onRemoveVendia_Folder);\n      });\n    },\n    onUpdate(handler) {\n      return _subscribe({\n        query: _folders__onUpdateDocument\n      }, ({\n        data\n      }) => {\n        return handler(data.onUpdateVendia_Folder);\n      });\n    }\n  };\n}\nexport function getDeployments({\n  _gqlClient,\n  _subscribe,\n  _requestWrapper = defaultWrapper\n}) {\n  return {\n    get(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_deployments__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_DeploymentInfo);\n      }, 'getVendia_DeploymentInfo');\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_deployments__listDocument, variables, wrappedRequestHeaders).then(res => {\n          const updatedRes = {\n            ...res.listVendia_DeploymentInfoItems,\n            items: res.listVendia_DeploymentInfoItems?.Vendia_DeploymentInfoItems\n          };\n          delete updatedRes.Vendia_DeploymentInfoItems;\n          return updatedRes;\n        });\n      }, 'listVendia_DeploymentInfoItems');\n    }\n  };\n}\nexport function getSettings({\n  _gqlClient,\n  _subscribe,\n  _requestWrapper = defaultWrapper\n}) {\n  return {\n    get(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_settings__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_Settings);\n      }, 'getVendia_Settings');\n    },\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_settings__listVersionsDocument, variables, wrappedRequestHeaders).then(res => res.listVendia_SettingsVersions);\n      }, 'listVendia_SettingsVersions');\n    },\n    update(input, options) {\n      const variables = {\n        ...options,\n        input\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_settings__updateDocument, variables, wrappedRequestHeaders).then(res => res.updateVendia_Settings);\n      }, 'updateVendia_Settings');\n    }\n  };\n}\nexport function getUniInfo({\n  _gqlClient,\n  _subscribe,\n  _requestWrapper = defaultWrapper\n}) {\n  return {\n    get() {\n      const variables = {};\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_uniInfo__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_UniInfo);\n      }, 'getVendia_UniInfo');\n    }\n  };\n}\nexport function getSharingPolicies({\n  _gqlClient,\n  _subscribe,\n  _requestWrapper = defaultWrapper\n}) {\n  return {\n    get(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_sharingPolicies__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_SharingPolicy);\n      }, 'getVendia_SharingPolicy');\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_sharingPolicies__listDocument, variables, wrappedRequestHeaders).then(res => {\n          const updatedRes = {\n            ...res.listVendia_SharingPolicyItems,\n            items: res.listVendia_SharingPolicyItems?.Vendia_SharingPolicyItems\n          };\n          delete updatedRes.Vendia_SharingPolicyItems;\n          return updatedRes;\n        });\n      }, 'listVendia_SharingPolicyItems');\n    },\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_sharingPolicies__listVersionsDocument, variables, wrappedRequestHeaders).then(res => res.listVendia_SharingPolicyVersions);\n      }, 'listVendia_SharingPolicyVersions');\n    },\n    add(input, options) {\n      const variables = {\n        ...options,\n        input\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_sharingPolicies__addDocument, variables, wrappedRequestHeaders).then(res => res.addVendia_SharingPolicy);\n      }, 'addVendia_SharingPolicy');\n    },\n    update(input, options) {\n      const {\n        _id,\n        ...rest\n      } = input;\n      const variables = {\n        ...options,\n        id: _id,\n        input: rest\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_sharingPolicies__updateDocument, variables, wrappedRequestHeaders).then(res => res.updateVendia_SharingPolicy);\n      }, 'updateVendia_SharingPolicy');\n    },\n    remove(idOrOptions, options) {\n      const variables = typeof idOrOptions === 'string' ? {\n        ...options,\n        id: idOrOptions\n      } : {\n        ...options,\n        ...idOrOptions\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_sharingPolicies__removeDocument, variables, wrappedRequestHeaders).then(res => res.removeVendia_SharingPolicy);\n      }, 'removeVendia_SharingPolicy');\n    }\n  };\n}","map":{"version":3,"names":["gql","Vendia_Block_Result_FragmentFragmentDoc","Vendia_File_Result_FragmentFragmentDoc","Vendia_Folder_Result_FragmentFragmentDoc","_blocks__getDocument","_blocks__listDocument","_blocks__onAddDocument","_contracts__getDocument","_contracts__listDocument","_contracts__listVersionsDocument","_contracts__addDocument","_contracts__updateDocument","_contracts__invokeDocument","_contracts__removeDocument","_deployments__getDocument","_deployments__listDocument","_files__getDocument","_files__listDocument","_files__listVersionsDocument","_files__addDocument","_files__updateDocument","_files__removeDocument","_files__onAddDocument","_files__onRemoveDocument","_files__onUpdateDocument","_folders__getDocument","_folders__listDocument","_folders__listVersionsDocument","_folders__addDocument","_folders__removeDocument","_folders__onAddDocument","_folders__onRemoveDocument","_folders__onUpdateDocument","_settings__getDocument","_settings__listVersionsDocument","_settings__updateDocument","_uniInfo__getDocument","_sharingPolicies__getDocument","_sharingPolicies__listDocument","_sharingPolicies__listVersionsDocument","_sharingPolicies__addDocument","_sharingPolicies__updateDocument","_sharingPolicies__removeDocument","defaultWrapper","action","_operationName","getEntities","_gqlClient","_subscribe","_requestWrapper","getBlocks","get","idOrOptions","options","variables","id","wrappedRequestHeaders","request","then","res","getVendia_Block","list","updatedRes","listVendia_BlockItems","items","Vendia_BlockItems","onAdd","handler","query","data","onAddVendia_Block","getContracts","getVendia_Contract","listVendia_ContractItems","Vendia_ContractItems","listVersions","listVendia_ContractVersions","add","input","addVendia_Contract","update","_id","rest","updateVendia_Contract","invoke","invokeVendia_Contract","remove","removeVendia_Contract","getFiles","getVendia_File","listVendia_FileItems","Vendia_FileItems","listVendia_FileVersions","addVendia_File","updateVendia_File","removeVendia_File","onAddVendia_File","onRemove","onRemoveVendia_File","onUpdate","onUpdateVendia_File","getFolders","getVendia_Folder","listVendia_FolderItems","Vendia_FolderItems","listVendia_FolderVersions","addVendia_Folder","removeVendia_Folder","onAddVendia_Folder","onRemoveVendia_Folder","onUpdateVendia_Folder","getDeployments","getVendia_DeploymentInfo","listVendia_DeploymentInfoItems","Vendia_DeploymentInfoItems","getSettings","getVendia_Settings","listVendia_SettingsVersions","updateVendia_Settings","getUniInfo","getVendia_UniInfo","getSharingPolicies","getVendia_SharingPolicy","listVendia_SharingPolicyItems","Vendia_SharingPolicyItems","listVendia_SharingPolicyVersions","addVendia_SharingPolicy","updateVendia_SharingPolicy","removeVendia_SharingPolicy"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainProject/BeamTeamCSC131/node_modules/.vendia-client/esm/generated.js"],"sourcesContent":["import gql from 'graphql-tag';\nexport const Vendia_Block_Result_FragmentFragmentDoc = gql `\n    fragment Vendia_Block_Result_Fragment on Vendia_Block_Result_ {\n  error\n  result {\n    _id\n    blockSchemaVersion\n    blockId\n    redactedBlockHash\n    previousBlockId\n    previousRedactedBlockHash\n    blockHash\n    previousBlockHash\n    status\n    commitTime\n    _owner\n    transactions {\n      _id\n      hash\n      redactedHash\n      signature\n      version\n      submissionTime\n      mutations\n      _owner\n    }\n  }\n}\n    `;\nexport const Vendia_File_Result_FragmentFragmentDoc = gql `\n    fragment Vendia_File_Result_Fragment on Vendia_File_Result_ {\n  error\n  result {\n    _id\n    sourceBucket\n    sourceKey\n    sourceRegion\n    sourceVersion\n    destinationKey\n    copyStrategy\n    read\n    write\n    etag\n    createdTime\n    updatedTime\n    temporaryUrl\n    fileVersion\n    _owner\n  }\n}\n    `;\nexport const Vendia_Folder_Result_FragmentFragmentDoc = gql `\n    fragment Vendia_Folder_Result_Fragment on Vendia_Folder_Result_ {\n  error\n  result {\n    _id\n    name\n    parent\n    read\n    write\n    copyStrategy\n    createdTime\n    updatedTime\n    _owner\n  }\n}\n    `;\nexport const _blocks__getDocument = gql `\n    query _blocks__get($id: ID!) {\n  getVendia_Block(id: $id) {\n    _id\n    blockSchemaVersion\n    blockId\n    redactedBlockHash\n    previousBlockId\n    previousRedactedBlockHash\n    blockHash\n    previousBlockHash\n    status\n    commitTime\n    _owner\n    transactions {\n      _id\n      hash\n      redactedHash\n      signature\n      version\n      submissionTime\n      mutations\n      _owner\n    }\n  }\n}\n    `;\nexport const _blocks__listDocument = gql `\n    query _blocks__list($order: [Vendia_Block_OrderInput_!], $filter: Vendia_Block_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_BlockItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    nextToken\n    Vendia_BlockItems {\n      _id\n      blockSchemaVersion\n      blockId\n      redactedBlockHash\n      previousBlockId\n      previousRedactedBlockHash\n      blockHash\n      previousBlockHash\n      status\n      commitTime\n      _owner\n      transactions {\n        _id\n        hash\n        redactedHash\n        signature\n        version\n        submissionTime\n        mutations\n        _owner\n      }\n    }\n  }\n}\n    `;\nexport const _blocks__onAddDocument = gql `\n    subscription _blocks__onAdd {\n  onAddVendia_Block {\n    ...Vendia_Block_Result_Fragment\n  }\n}\n    ${Vendia_Block_Result_FragmentFragmentDoc}`;\nexport const _contracts__getDocument = gql `\n    query _contracts__get($id: ID!, $version: Int) {\n  getVendia_Contract(id: $id, version: $version) {\n    ... on Vendia_Contract {\n      description\n      revisionId\n      _acl {\n        path\n        operations\n        principal {\n          nodes\n        }\n      }\n      _id\n      _owner\n      inputQuery\n      name\n      outputMutation\n      resource {\n        uri\n        csp\n        metadata {\n          name\n          value\n        }\n      }\n    }\n  }\n}\n    `;\nexport const _contracts__listDocument = gql `\n    query _contracts__list($limit: Int, $nextToken: String, $order: [Vendia_Contract_OrderInput_!], $filter: Vendia_Contract_FilterInput_) {\n  listVendia_ContractItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_ContractItems {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n    }\n    nextToken\n  }\n}\n    `;\nexport const _contracts__listVersionsDocument = gql `\n    query _contracts__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_ContractVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nexport const _contracts__addDocument = gql `\n    mutation _contracts__add($aclInput: Vendia_Acls_Input_, $input: Vendia_Contract_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  addVendia_Contract(aclInput: $aclInput, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport const _contracts__updateDocument = gql `\n    mutation _contracts__update($id: ID!, $aclInput: Vendia_Acls_Input_, $condition: Vendia_Contract_ConditionInput_, $input: Vendia_Contract_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  updateVendia_Contract(\n    input: $input\n    aclInput: $aclInput\n    condition: $condition\n    id: $id\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport const _contracts__invokeDocument = gql `\n    mutation _contracts__invoke($input: Vendia_Contract_InvokeInput_, $revisionId: String, $id: ID!) {\n  invokeVendia_Contract(\n    id: $id\n    input: $input\n    revisionId: $revisionId\n    syncMode: ASYNC\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _contracts__removeDocument = gql `\n    mutation _contracts__remove($id: ID!, $condition: Vendia_Contract_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  removeVendia_Contract(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _deployments__getDocument = gql `\n    query _deployments__get($id: ID!) {\n  getVendia_DeploymentInfo(id: $id) {\n    _id\n    deploymentTime\n    consensusDefinitionHash\n    versionTag\n    _owner\n  }\n}\n    `;\nexport const _deployments__listDocument = gql `\n    query _deployments__list($order: [Vendia_DeploymentInfo_OrderInput_!], $filter: Vendia_DeploymentInfo_FilterInput_, $nextToken: String, $limit: Int) {\n  listVendia_DeploymentInfoItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_DeploymentInfoItems {\n      _id\n      deploymentTime\n      consensusDefinitionHash\n      versionTag\n      _owner\n    }\n    nextToken\n  }\n}\n    `;\nexport const _files__getDocument = gql `\n    query _files__get($id: ID!, $version: Int) {\n  getVendia_File(id: $id, version: $version) {\n    _id\n    sourceBucket\n    sourceKey\n    sourceRegion\n    sourceVersion\n    destinationKey\n    copyStrategy\n    read\n    write\n    etag\n    createdTime\n    updatedTime\n    temporaryUrl\n    fileVersion\n    _owner\n  }\n}\n    `;\nexport const _files__listDocument = gql `\n    query _files__list($order: [Vendia_File_OrderInput_!], $filter: Vendia_File_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_FileItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    nextToken\n    Vendia_FileItems {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\nexport const _files__listVersionsDocument = gql `\n    query _files__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_FileVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nexport const _files__addDocument = gql `\n    mutation _files__add($input: Vendia_File_Input_!) {\n  addVendia_File(input: $input, syncMode: ASYNC) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\nexport const _files__updateDocument = gql `\n    mutation _files__update($id: ID!, $condition: Vendia_File_ConditionInput_, $input: Vendia_File_UpdateInput_!) {\n  updateVendia_File(\n    id: $id\n    input: $input\n    condition: $condition\n    syncMode: ASYNC\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\nexport const _files__removeDocument = gql `\n    mutation _files__remove($condition: Vendia_File_ConditionInput_, $id: ID!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  removeVendia_File(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _files__onAddDocument = gql `\n    subscription _files__onAdd {\n  onAddVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\nexport const _files__onRemoveDocument = gql `\n    subscription _files__onRemove {\n  onRemoveVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\nexport const _files__onUpdateDocument = gql `\n    subscription _files__onUpdate {\n  onUpdateVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\nexport const _folders__getDocument = gql `\n    query _folders__get($id: ID!, $version: Int) {\n  getVendia_Folder(id: $id, version: $version) {\n    _id\n    name\n    parent\n    read\n    write\n    copyStrategy\n    createdTime\n    updatedTime\n    _owner\n  }\n}\n    `;\nexport const _folders__listDocument = gql `\n    query _folders__list($order: [Vendia_Folder_OrderInput_!], $filter: Vendia_Folder_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_FolderItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_FolderItems {\n      _id\n      name\n      parent\n      read\n      write\n      copyStrategy\n      createdTime\n      updatedTime\n      _owner\n    }\n    nextToken\n  }\n}\n    `;\nexport const _folders__listVersionsDocument = gql `\n    query _folders__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_FolderVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nexport const _folders__addDocument = gql `\n    mutation _folders__add($input: Vendia_Folder_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  addVendia_Folder(input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      name\n      parent\n      read\n      write\n      copyStrategy\n      createdTime\n      updatedTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _folders__removeDocument = gql `\n    mutation _folders__remove($id: ID!, $condition: Vendia_Folder_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  removeVendia_Folder(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nexport const _folders__onAddDocument = gql `\n    subscription _folders__onAdd {\n  onAddVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\nexport const _folders__onRemoveDocument = gql `\n    subscription _folders__onRemove {\n  onRemoveVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\nexport const _folders__onUpdateDocument = gql `\n    subscription _folders__onUpdate {\n  onUpdateVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\nexport const _settings__getDocument = gql `\n    query _settings__get($version: Int) {\n  getVendia_Settings(version: $version) {\n    blockReportWebhooks\n    blockReportEmails\n    deadLetterWebhooks\n    deadLetterEmails\n    azure {\n      defaultSubscriptionId\n      defaultTenantId\n    }\n    resourceMapKeys\n    resourceMapValues\n    apiSettings {\n      apiKeys {\n        value\n        usagePlan {\n          quotaSettings {\n            limit\n            offset\n            period\n          }\n          throttleSettings {\n            burstLimit\n            rateLimit\n          }\n        }\n      }\n      auth {\n        authorizerType\n        authorizerArn\n        allowedAccounts\n      }\n    }\n    _owner\n    aws {\n      blockReportSQSQueues\n      blockReportLambdas\n      blockReportFirehoses\n      deadLetterSQSQueues\n      deadLetterLambdas\n      s3ReadAccounts\n      dataDogMonitoring {\n        ddExternalId\n        ddApiKey\n        ddLogEndpoint\n        ddSendLogs\n      }\n    }\n  }\n}\n    `;\nexport const _settings__listVersionsDocument = gql `\n    query _settings__listVersions($limit: Int, $nextToken: String) {\n  listVendia_SettingsVersions(limit: $limit, nextToken: $nextToken) {\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n    nextToken\n  }\n}\n    `;\nexport const _settings__updateDocument = gql `\n    mutation _settings__update($condition: Vendia_Settings_ConditionInput_, $input: Vendia_Settings_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {\n  updateVendia_Settings(condition: $condition, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      blockReportWebhooks\n      blockReportEmails\n      deadLetterWebhooks\n      deadLetterEmails\n      azure {\n        blockReportFunctions {\n          resourceGroupName\n          functionAppName\n          functionName\n        }\n        blockReportQueues {\n          resourceGroupName\n          storageAccountName\n          queueName\n        }\n        deadLetterFunctions {\n          resourceGroupName\n          functionAppName\n          functionName\n        }\n        deadLetterQueues {\n          resourceGroupName\n          storageAccountName\n          queueName\n        }\n        defaultSubscriptionId\n        defaultTenantId\n      }\n      resourceMapKeys\n      resourceMapValues\n      apiSettings {\n        apiKeys {\n          value\n          usagePlan {\n            quotaSettings {\n              limit\n              offset\n              period\n            }\n            throttleSettings {\n              burstLimit\n              rateLimit\n            }\n          }\n        }\n      }\n      _owner\n      aws {\n        blockReportSQSQueues\n        blockReportLambdas\n        blockReportFirehoses\n        deadLetterSQSQueues\n        deadLetterLambdas\n        s3ReadAccounts\n        dataDogMonitoring {\n          ddExternalId\n          ddApiKey\n          ddLogEndpoint\n          ddSendLogs\n        }\n      }\n    }\n  }\n}\n    `;\nexport const _uniInfo__getDocument = gql `\n    query _uniInfo__get {\n  getVendia_UniInfo {\n    name\n    sku\n    schema\n    schemaNamespace\n    status\n    createdTime\n    updatedTime\n    localNodeName\n    _owner\n    nodes {\n      name\n      userId\n      userEmail\n      description\n      status\n      csp\n      region\n      bucketName\n      temporaryCredentials {\n        uploadFile {\n          accessKeyId\n          expiration\n          secretAccessKey\n          sessionToken\n        }\n      }\n      tier {\n        share\n      }\n      vendiaAccount {\n        csp\n        accountId\n        userId\n        org\n      }\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__getDocument = gql `\n    query _sharingPolicies__get($id: ID, $name: String, $version: Int) {\n  getVendia_SharingPolicy(id: $id, name: $name, version: $version) {\n    ... on Vendia_SharingPolicy {\n      _acl {\n        operations\n        path\n        principal {\n          nodes\n        }\n      }\n      _id\n      _owner\n      acl {\n        operations\n        path\n        principal {\n          nodes\n        }\n      }\n      name\n      description\n      entity\n      type\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__listDocument = gql `\n    query _sharingPolicies__list($limit: Int, $nextToken: String, $order: [Vendia_SharingPolicy_OrderInput_!], $filter: Vendia_SharingPolicy_FilterInput_) {\n  listVendia_SharingPolicyItems(\n    order: $order\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_SharingPolicyItems {\n      ... on Vendia_SharingPolicy {\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        name\n        description\n        entity\n        type\n      }\n    }\n    nextToken\n  }\n}\n    `;\nexport const _sharingPolicies__listVersionsDocument = gql `\n    query _sharingPolicies__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_SharingPolicyVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__addDocument = gql `\n    mutation _sharingPolicies__add($aclInput: Vendia_Acls_Input_, $input: Vendia_SharingPolicy_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  addVendia_SharingPolicy(aclInput: $aclInput, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_SharingPolicy {\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        name\n        description\n        entity\n        type\n      }\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__updateDocument = gql `\n    mutation _sharingPolicies__update($id: ID, $name: String, $aclInput: Vendia_Acls_Input_, $condition: Vendia_SharingPolicy_ConditionInput_, $input: Vendia_SharingPolicy_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  updateVendia_SharingPolicy(\n    input: $input\n    aclInput: $aclInput\n    condition: $condition\n    id: $id\n    name: $name\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_SharingPolicy {\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        name\n        description\n        entity\n        type\n      }\n    }\n  }\n}\n    `;\nexport const _sharingPolicies__removeDocument = gql `\n    mutation _sharingPolicies__remove($id: ID, $name: String, $condition: Vendia_SharingPolicy_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  removeVendia_SharingPolicy(\n    id: $id\n    name: $name\n    condition: $condition\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nconst defaultWrapper = (action, _operationName) => action();\nexport function getEntities({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n    return {};\n}\nexport function getBlocks({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n    return {\n        get(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_blocks__getDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.getVendia_Block);\n            }, 'getVendia_Block');\n        },\n        list(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_blocks__listDocument, variables, wrappedRequestHeaders)\n                    .then(res => { const updatedRes = { ...res.listVendia_BlockItems, items: res.listVendia_BlockItems?.Vendia_BlockItems }; delete updatedRes.Vendia_BlockItems; return updatedRes; });\n            }, 'listVendia_BlockItems');\n        },\n        onAdd(handler) {\n            return _subscribe({ query: _blocks__onAddDocument }, ({ data }) => { return handler(data.onAddVendia_Block); });\n        }\n    };\n}\nexport function getContracts({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n    return {\n        get(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_contracts__getDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.getVendia_Contract);\n            }, 'getVendia_Contract');\n        },\n        list(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_contracts__listDocument, variables, wrappedRequestHeaders)\n                    .then(res => { const updatedRes = { ...res.listVendia_ContractItems, items: res.listVendia_ContractItems?.Vendia_ContractItems }; delete updatedRes.Vendia_ContractItems; return updatedRes; });\n            }, 'listVendia_ContractItems');\n        },\n        listVersions(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_contracts__listVersionsDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.listVendia_ContractVersions);\n            }, 'listVendia_ContractVersions');\n        },\n        add(input, options) {\n            const variables = { ...options, input };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_contracts__addDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.addVendia_Contract);\n            }, 'addVendia_Contract');\n        },\n        update(input, options) {\n            const { _id, ...rest } = input;\n            const variables = { ...options, id: _id, input: rest };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_contracts__updateDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.updateVendia_Contract);\n            }, 'updateVendia_Contract');\n        },\n        invoke(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_contracts__invokeDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.invokeVendia_Contract);\n            }, 'invokeVendia_Contract');\n        },\n        remove(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_contracts__removeDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.removeVendia_Contract);\n            }, 'removeVendia_Contract');\n        }\n    };\n}\nexport function getFiles({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n    return {\n        get(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_files__getDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.getVendia_File);\n            }, 'getVendia_File');\n        },\n        list(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_files__listDocument, variables, wrappedRequestHeaders)\n                    .then(res => { const updatedRes = { ...res.listVendia_FileItems, items: res.listVendia_FileItems?.Vendia_FileItems }; delete updatedRes.Vendia_FileItems; return updatedRes; });\n            }, 'listVendia_FileItems');\n        },\n        listVersions(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_files__listVersionsDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.listVendia_FileVersions);\n            }, 'listVendia_FileVersions');\n        },\n        add(input) {\n            const variables = { input };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_files__addDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.addVendia_File);\n            }, 'addVendia_File');\n        },\n        update(input, options) {\n            const { _id, ...rest } = input;\n            const variables = { ...options, id: _id, input: rest };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_files__updateDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.updateVendia_File);\n            }, 'updateVendia_File');\n        },\n        remove(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_files__removeDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.removeVendia_File);\n            }, 'removeVendia_File');\n        },\n        onAdd(handler) {\n            return _subscribe({ query: _files__onAddDocument }, ({ data }) => { return handler(data.onAddVendia_File); });\n        },\n        onRemove(handler) {\n            return _subscribe({ query: _files__onRemoveDocument }, ({ data }) => { return handler(data.onRemoveVendia_File); });\n        },\n        onUpdate(handler) {\n            return _subscribe({ query: _files__onUpdateDocument }, ({ data }) => { return handler(data.onUpdateVendia_File); });\n        }\n    };\n}\nexport function getFolders({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n    return {\n        get(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_folders__getDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.getVendia_Folder);\n            }, 'getVendia_Folder');\n        },\n        list(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_folders__listDocument, variables, wrappedRequestHeaders)\n                    .then(res => { const updatedRes = { ...res.listVendia_FolderItems, items: res.listVendia_FolderItems?.Vendia_FolderItems }; delete updatedRes.Vendia_FolderItems; return updatedRes; });\n            }, 'listVendia_FolderItems');\n        },\n        listVersions(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_folders__listVersionsDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.listVendia_FolderVersions);\n            }, 'listVendia_FolderVersions');\n        },\n        add(input, options) {\n            const variables = { ...options, input };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_folders__addDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.addVendia_Folder);\n            }, 'addVendia_Folder');\n        },\n        remove(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_folders__removeDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.removeVendia_Folder);\n            }, 'removeVendia_Folder');\n        },\n        onAdd(handler) {\n            return _subscribe({ query: _folders__onAddDocument }, ({ data }) => { return handler(data.onAddVendia_Folder); });\n        },\n        onRemove(handler) {\n            return _subscribe({ query: _folders__onRemoveDocument }, ({ data }) => { return handler(data.onRemoveVendia_Folder); });\n        },\n        onUpdate(handler) {\n            return _subscribe({ query: _folders__onUpdateDocument }, ({ data }) => { return handler(data.onUpdateVendia_Folder); });\n        }\n    };\n}\nexport function getDeployments({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n    return {\n        get(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_deployments__getDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.getVendia_DeploymentInfo);\n            }, 'getVendia_DeploymentInfo');\n        },\n        list(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_deployments__listDocument, variables, wrappedRequestHeaders)\n                    .then(res => { const updatedRes = { ...res.listVendia_DeploymentInfoItems, items: res.listVendia_DeploymentInfoItems?.Vendia_DeploymentInfoItems }; delete updatedRes.Vendia_DeploymentInfoItems; return updatedRes; });\n            }, 'listVendia_DeploymentInfoItems');\n        }\n    };\n}\nexport function getSettings({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n    return {\n        get(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_settings__getDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.getVendia_Settings);\n            }, 'getVendia_Settings');\n        },\n        listVersions(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_settings__listVersionsDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.listVendia_SettingsVersions);\n            }, 'listVendia_SettingsVersions');\n        },\n        update(input, options) {\n            const variables = { ...options, input };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_settings__updateDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.updateVendia_Settings);\n            }, 'updateVendia_Settings');\n        }\n    };\n}\nexport function getUniInfo({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n    return {\n        get() {\n            const variables = {};\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_uniInfo__getDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.getVendia_UniInfo);\n            }, 'getVendia_UniInfo');\n        }\n    };\n}\nexport function getSharingPolicies({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n    return {\n        get(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_sharingPolicies__getDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.getVendia_SharingPolicy);\n            }, 'getVendia_SharingPolicy');\n        },\n        list(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_sharingPolicies__listDocument, variables, wrappedRequestHeaders)\n                    .then(res => { const updatedRes = { ...res.listVendia_SharingPolicyItems, items: res.listVendia_SharingPolicyItems?.Vendia_SharingPolicyItems }; delete updatedRes.Vendia_SharingPolicyItems; return updatedRes; });\n            }, 'listVendia_SharingPolicyItems');\n        },\n        listVersions(options) {\n            const variables = options;\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_sharingPolicies__listVersionsDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.listVendia_SharingPolicyVersions);\n            }, 'listVendia_SharingPolicyVersions');\n        },\n        add(input, options) {\n            const variables = { ...options, input };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_sharingPolicies__addDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.addVendia_SharingPolicy);\n            }, 'addVendia_SharingPolicy');\n        },\n        update(input, options) {\n            const { _id, ...rest } = input;\n            const variables = { ...options, id: _id, input: rest };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_sharingPolicies__updateDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.updateVendia_SharingPolicy);\n            }, 'updateVendia_SharingPolicy');\n        },\n        remove(idOrOptions, options) {\n            const variables = typeof idOrOptions === 'string' ? { ...options, id: idOrOptions } : { ...options, ...idOrOptions };\n            return _requestWrapper((wrappedRequestHeaders) => {\n                return _gqlClient.request(_sharingPolicies__removeDocument, variables, wrappedRequestHeaders)\n                    .then(res => res.removeVendia_SharingPolicy);\n            }, 'removeVendia_SharingPolicy');\n        }\n    };\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,OAAO,MAAMC,uCAAuC,GAAGD,GAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAME,sCAAsC,GAAGF,GAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMG,wCAAwC,GAAGH,GAAK;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMI,oBAAoB,GAAGJ,GAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMK,qBAAqB,GAAGL,GAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMM,sBAAsB,GAAGN,GAAK;AAC3C;AACA;AACA;AACA;AACA;AACA,MAAMC,uCAAwC,EAAC;AAC/C,OAAO,MAAMM,uBAAuB,GAAGP,GAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMQ,wBAAwB,GAAGR,GAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMS,gCAAgC,GAAGT,GAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMU,uBAAuB,GAAGV,GAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMW,0BAA0B,GAAGX,GAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMY,0BAA0B,GAAGZ,GAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMa,0BAA0B,GAAGb,GAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMc,yBAAyB,GAAGd,GAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMe,0BAA0B,GAAGf,GAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMgB,mBAAmB,GAAGhB,GAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMiB,oBAAoB,GAAGjB,GAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMkB,4BAA4B,GAAGlB,GAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMmB,mBAAmB,GAAGnB,GAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMoB,sBAAsB,GAAGpB,GAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMqB,sBAAsB,GAAGrB,GAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMsB,qBAAqB,GAAGtB,GAAK;AAC1C;AACA;AACA;AACA;AACA;AACA,MAAME,sCAAuC,EAAC;AAC9C,OAAO,MAAMqB,wBAAwB,GAAGvB,GAAK;AAC7C;AACA;AACA;AACA;AACA;AACA,MAAME,sCAAuC,EAAC;AAC9C,OAAO,MAAMsB,wBAAwB,GAAGxB,GAAK;AAC7C;AACA;AACA;AACA;AACA;AACA,MAAME,sCAAuC,EAAC;AAC9C,OAAO,MAAMuB,qBAAqB,GAAGzB,GAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAM0B,sBAAsB,GAAG1B,GAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAM2B,8BAA8B,GAAG3B,GAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAM4B,qBAAqB,GAAG5B,GAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAM6B,wBAAwB,GAAG7B,GAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAM8B,uBAAuB,GAAG9B,GAAK;AAC5C;AACA;AACA;AACA;AACA;AACA,MAAMG,wCAAyC,EAAC;AAChD,OAAO,MAAM4B,0BAA0B,GAAG/B,GAAK;AAC/C;AACA;AACA;AACA;AACA;AACA,MAAMG,wCAAyC,EAAC;AAChD,OAAO,MAAM6B,0BAA0B,GAAGhC,GAAK;AAC/C;AACA;AACA;AACA;AACA;AACA,MAAMG,wCAAyC,EAAC;AAChD,OAAO,MAAM8B,sBAAsB,GAAGjC,GAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMkC,+BAA+B,GAAGlC,GAAK;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMmC,yBAAyB,GAAGnC,GAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMoC,qBAAqB,GAAGpC,GAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMqC,6BAA6B,GAAGrC,GAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMsC,8BAA8B,GAAGtC,GAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMuC,sCAAsC,GAAGvC,GAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMwC,6BAA6B,GAAGxC,GAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMyC,gCAAgC,GAAGzC,GAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAM0C,gCAAgC,GAAG1C,GAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM2C,cAAc,GAAGA,CAACC,MAAM,EAAEC,cAAc,KAAKD,MAAM,CAAC,CAAC;AAC3D,OAAO,SAASE,WAAWA,CAAC;EAAEC,UAAU;EAAEC,UAAU;EAAEC,eAAe,GAAGN;AAAe,CAAC,EAAE;EACtF,OAAO,CAAC,CAAC;AACb;AACA,OAAO,SAASO,SAASA,CAAC;EAAEH,UAAU;EAAEC,UAAU;EAAEC,eAAe,GAAGN;AAAe,CAAC,EAAE;EACpF,OAAO;IACHQ,GAAGA,CAACC,WAAW,EAAEC,OAAO,EAAE;MACtB,MAAMC,SAAS,GAAG,OAAOF,WAAW,KAAK,QAAQ,GAAG;QAAE,GAAGC,OAAO;QAAEE,EAAE,EAAEH;MAAY,CAAC,GAAG;QAAE,GAAGC,OAAO;QAAE,GAAGD;MAAY,CAAC;MACpH,OAAOH,eAAe,CAAEO,qBAAqB,IAAK;QAC9C,OAAOT,UAAU,CAACU,OAAO,CAACrD,oBAAoB,EAAEkD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"},"metadata":{},"sourceType":"module","externalDependencies":[]}