{"ast":null,"code":"import arrayFrom from \"../../polyfills/arrayFrom.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport naturalCompare from \"../../jsutils/naturalCompare.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isAbstractType } from \"../../type/definition.mjs\";\n\n/**\r\n * Fields on correct type\r\n *\r\n * A GraphQL document is only valid if all fields selected are defined by the\r\n * parent type, or are an allowed meta field such as __typename.\r\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n      if (type) {\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestion = didYouMean('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(new GraphQLError(\"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type.name, \"\\\".\") + suggestion, node));\n        }\n      }\n    }\n  };\n}\n/**\r\n * Go through all of the implementations of type, as well as the interfaces that\r\n * they implement. If any of those types include the provided field, suggest them,\r\n * sorted by how often the type is referenced.\r\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n  var suggestedTypes = new Set();\n  var usageCount = Object.create(null);\n  for (var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {\n    var possibleType = _schema$getPossibleTy2[_i2];\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n    for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {\n      var _usageCount$possibleI;\n      var possibleInterface = _possibleType$getInte2[_i4];\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;\n    }\n  }\n  return arrayFrom(suggestedTypes).sort(function (typeA, typeB) {\n    // Suggest both interface and object types based on how common they are.\n    var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n    if (usageCountDiff !== 0) {\n      return usageCountDiff;\n    } // Suggest super types first followed by subtypes\n\n    if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n      return -1;\n    }\n    if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n      return 1;\n    }\n    return naturalCompare(typeA.name, typeB.name);\n  }).map(function (x) {\n    return x.name;\n  });\n}\n/**\r\n * For the field name provided, determine if there are any similar field names\r\n * that may be the result of a typo.\r\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}","map":{"version":3,"names":["arrayFrom","didYouMean","suggestionList","naturalCompare","GraphQLError","isObjectType","isInterfaceType","isAbstractType","FieldsOnCorrectTypeRule","context","Field","node","type","getParentType","fieldDef","getFieldDef","schema","getSchema","fieldName","name","value","suggestion","getSuggestedTypeNames","getSuggestedFieldNames","reportError","concat","suggestedTypes","Set","usageCount","Object","create","_i2","_schema$getPossibleTy2","getPossibleTypes","length","possibleType","getFields","add","_i4","_possibleType$getInte2","getInterfaces","_usageCount$possibleI","possibleInterface","sort","typeA","typeB","usageCountDiff","isSubType","map","x","possibleFieldNames","keys"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainProject/BeamTeamCSC131/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs"],"sourcesContent":["import arrayFrom from \"../../polyfills/arrayFrom.mjs\";\r\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\r\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\r\nimport naturalCompare from \"../../jsutils/naturalCompare.mjs\";\r\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\r\nimport { isObjectType, isInterfaceType, isAbstractType } from \"../../type/definition.mjs\";\r\n\r\n/**\r\n * Fields on correct type\r\n *\r\n * A GraphQL document is only valid if all fields selected are defined by the\r\n * parent type, or are an allowed meta field such as __typename.\r\n */\r\nexport function FieldsOnCorrectTypeRule(context) {\r\n  return {\r\n    Field: function Field(node) {\r\n      var type = context.getParentType();\r\n\r\n      if (type) {\r\n        var fieldDef = context.getFieldDef();\r\n\r\n        if (!fieldDef) {\r\n          // This field doesn't exist, lets look for suggestions.\r\n          var schema = context.getSchema();\r\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\r\n\r\n          var suggestion = didYouMean('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?\r\n\r\n          if (suggestion === '') {\r\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\r\n          } // Report an error, including helpful suggestions.\r\n\r\n\r\n          context.reportError(new GraphQLError(\"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type.name, \"\\\".\") + suggestion, node));\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n/**\r\n * Go through all of the implementations of type, as well as the interfaces that\r\n * they implement. If any of those types include the provided field, suggest them,\r\n * sorted by how often the type is referenced.\r\n */\r\n\r\nfunction getSuggestedTypeNames(schema, type, fieldName) {\r\n  if (!isAbstractType(type)) {\r\n    // Must be an Object type, which does not have possible fields.\r\n    return [];\r\n  }\r\n\r\n  var suggestedTypes = new Set();\r\n  var usageCount = Object.create(null);\r\n\r\n  for (var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {\r\n    var possibleType = _schema$getPossibleTy2[_i2];\r\n\r\n    if (!possibleType.getFields()[fieldName]) {\r\n      continue;\r\n    } // This object type defines this field.\r\n\r\n\r\n    suggestedTypes.add(possibleType);\r\n    usageCount[possibleType.name] = 1;\r\n\r\n    for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {\r\n      var _usageCount$possibleI;\r\n\r\n      var possibleInterface = _possibleType$getInte2[_i4];\r\n\r\n      if (!possibleInterface.getFields()[fieldName]) {\r\n        continue;\r\n      } // This interface type defines this field.\r\n\r\n\r\n      suggestedTypes.add(possibleInterface);\r\n      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;\r\n    }\r\n  }\r\n\r\n  return arrayFrom(suggestedTypes).sort(function (typeA, typeB) {\r\n    // Suggest both interface and object types based on how common they are.\r\n    var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\r\n\r\n    if (usageCountDiff !== 0) {\r\n      return usageCountDiff;\r\n    } // Suggest super types first followed by subtypes\r\n\r\n\r\n    if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\r\n      return -1;\r\n    }\r\n\r\n    if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\r\n      return 1;\r\n    }\r\n\r\n    return naturalCompare(typeA.name, typeB.name);\r\n  }).map(function (x) {\r\n    return x.name;\r\n  });\r\n}\r\n/**\r\n * For the field name provided, determine if there are any similar field names\r\n * that may be the result of a typo.\r\n */\r\n\r\n\r\nfunction getSuggestedFieldNames(type, fieldName) {\r\n  if (isObjectType(type) || isInterfaceType(type)) {\r\n    var possibleFieldNames = Object.keys(type.getFields());\r\n    return suggestionList(fieldName, possibleFieldNames);\r\n  } // Otherwise, must be a Union type, which does not define fields.\r\n\r\n\r\n  return [];\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}