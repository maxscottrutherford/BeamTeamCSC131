{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mabur\\\\Desktop\\\\College\\\\SacState\\\\CSC131\\\\MainRepo6\\\\BeamTeamCSC131\\\\src\\\\Routes\\\\SummaryModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { vendiaClient } from '../vendiaClient';\nimport { Modal, Button, ProgressBar } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SummaryModal = ({\n  deviceId,\n  onHide\n}) => {\n  _s();\n  const {\n    client\n  } = vendiaClient();\n  const [completedTests, setCompletedTests] = useState(0);\n  const [incompleteTests, setIncompleteTests] = useState(0);\n  const [totalTests, setTotalTests] = useState(0);\n  useEffect(() => {\n    const fetchTestsForDevice = async () => {\n      try {\n        // Fetch tests associated with the specific device\n        const testsResponse = await client.entities.test.list({\n          readMode: \"NODE_LEDGERED\"\n        });\n        const testsList = testsResponse.items;\n\n        // Filter tests for the specified device\n        const testsForDevice = testsList.filter(test => test.Device === deviceId);\n        let completedTestsCount = 0;\n        let incompleteTestsCount = 0;\n        testsForDevice.forEach(test => {\n          // Check if the test is completed or not\n          if (test.Completed) {\n            completedTestsCount += 1;\n          } else {\n            incompleteTestsCount += 1;\n          }\n        });\n\n        // Update state with the counts\n        setCompletedTests(completedTestsCount);\n        setIncompleteTests(incompleteTestsCount);\n        setTotalTests(testsForDevice.length);\n      } catch (error) {\n        console.error('Error fetching tests response:', error);\n      }\n    };\n    fetchTestsForDevice();\n  }, [client, deviceId]);\n  const calculatePercentage = (count, total) => {\n    return total === 0 ? 100 : count / total * 100;\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: true,\n    onHide: onHide,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Total Number of Tests Assigned:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this), \" \", totalTests]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Completed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), \" \", completedTests]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n          now: calculatePercentage(completedTests, totalTests),\n          label: `${completedTests}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Incompleted:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), \" \", incompleteTests]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n          now: calculatePercentage(incompleteTests, totalTests),\n          label: `${incompleteTests}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onHide,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(SummaryModal, \"zlYOKqdqfH3+Jr83IUtBicr32/c=\");\n_c = SummaryModal;\nexport default SummaryModal;\nvar _c;\n$RefreshReg$(_c, \"SummaryModal\");","map":{"version":3,"names":["React","useState","useEffect","vendiaClient","Modal","Button","ProgressBar","jsxDEV","_jsxDEV","SummaryModal","deviceId","onHide","_s","client","completedTests","setCompletedTests","incompleteTests","setIncompleteTests","totalTests","setTotalTests","fetchTestsForDevice","testsResponse","entities","test","list","readMode","testsList","items","testsForDevice","filter","Device","completedTestsCount","incompleteTestsCount","forEach","Completed","length","error","console","calculatePercentage","count","total","show","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","now","label","Footer","variant","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/src/Routes/SummaryModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { vendiaClient } from '../vendiaClient';\r\nimport { Modal, Button, ProgressBar } from 'react-bootstrap';\r\n\r\nconst SummaryModal = ({ deviceId, onHide }) => {\r\n    const { client } = vendiaClient();\r\n    const [completedTests, setCompletedTests] = useState(0);\r\n    const [incompleteTests, setIncompleteTests] = useState(0);\r\n    const [totalTests, setTotalTests] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchTestsForDevice = async () => {\r\n            try {\r\n                // Fetch tests associated with the specific device\r\n                const testsResponse = await client.entities.test.list({ readMode: \"NODE_LEDGERED\" });\r\n                const testsList = testsResponse.items;\r\n\r\n                // Filter tests for the specified device\r\n                const testsForDevice = testsList.filter((test) => test.Device === deviceId);\r\n\r\n                let completedTestsCount = 0;\r\n                let incompleteTestsCount = 0;\r\n\r\n                testsForDevice.forEach((test) => {\r\n                    // Check if the test is completed or not\r\n                    if (test.Completed) {\r\n                        completedTestsCount += 1;\r\n                    } else {\r\n                        incompleteTestsCount += 1;\r\n                    }\r\n                });\r\n\r\n                // Update state with the counts\r\n                setCompletedTests(completedTestsCount);\r\n                setIncompleteTests(incompleteTestsCount);\r\n                setTotalTests(testsForDevice.length);\r\n            } catch (error) {\r\n                console.error('Error fetching tests response:', error);\r\n            }\r\n        };\r\n\r\n        fetchTestsForDevice();\r\n    }, [client, deviceId]);\r\n\r\n    const calculatePercentage = (count, total) => {\r\n        return total === 0 ? 100 : (count / total) * 100;\r\n    };\r\n\r\n    return (\r\n        <Modal show={true} onHide={onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Summary</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    <p>\r\n                        <strong>Total Number of Tests Assigned:</strong> {totalTests}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Tests Completed:</strong> {completedTests}\r\n                    </p>\r\n                    <ProgressBar now={calculatePercentage(completedTests, totalTests)} label={`${completedTests}%`} />\r\n                    <p>\r\n                        <strong>Tests Incompleted:</strong> {incompleteTests}\r\n                    </p>\r\n                    <ProgressBar now={calculatePercentage(incompleteTests, totalTests)} label={`${incompleteTests}%`} />\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onHide}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default SummaryModal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}