{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mabur\\\\Desktop\\\\College\\\\SacState\\\\CSC131\\\\MainRepo6\\\\BeamTeamCSC131\\\\src\\\\Routes\\\\SummaryModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { vendiaClient } from '../vendiaClient';\nimport { Modal, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SummaryModal = ({\n  deviceId,\n  onHide\n}) => {\n  _s();\n  const {\n    client\n  } = vendiaClient();\n  const [completedTests, setCompletedTests] = useState(0);\n  const [incompleteTests, setIncompleteTests] = useState(0);\n  useEffect(() => {\n    const fetchTestsForDevice = async () => {\n      try {\n        // Fetch tests associated with the specific device\n        const testsResponse = await client.entities.test.list({\n          readMode: \"NODE_LEDGERED\"\n        });\n        const testsList = testsResponse.items;\n        console.log(\"Tests List:\", testsList);\n\n        // Filter tests for the specified device\n        const testsForDevice = testsResponse.items.filter(test => {\n          console.log('DeviceId:', deviceId);\n          console.log('Test Device:', test.Device);\n          return test.Device === deviceId;\n        });\n        console.log(\"Tests for Device:\", testsForDevice);\n        let completedTestsCount = 0;\n        let incompleteTestsCount = 0;\n        testsForDevice.forEach(test => {\n          console.log('Processing Test:', test);\n          console.log('Condition Check:', test.DeviceName === deviceId);\n\n          // Check if the test is completed or not\n          if (test.Completed) {\n            completedTestsCount += 1;\n          } else {\n            incompleteTestsCount += 1;\n          }\n        });\n\n        // Update state with the counts\n        setCompletedTests(completedTestsCount);\n        setIncompleteTests(incompleteTestsCount);\n      } catch (error) {\n        console.error('Error fetching tests response:', error);\n      }\n    };\n    fetchTestsForDevice();\n  }, [client, deviceId]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: true,\n    onHide: onHide,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Total Number of Tets Assigned:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), \" \", completedTests + incompleteTests]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Completed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), \" \", completedTests]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tests Incompleted:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), \" \", incompleteTests]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onHide,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(SummaryModal, \"SIg0BjsBgsXBNfqXyfGfmjAshmI=\");\n_c = SummaryModal;\nexport default SummaryModal;\nvar _c;\n$RefreshReg$(_c, \"SummaryModal\");","map":{"version":3,"names":["React","useState","useEffect","vendiaClient","Modal","Button","jsxDEV","_jsxDEV","SummaryModal","deviceId","onHide","_s","client","completedTests","setCompletedTests","incompleteTests","setIncompleteTests","fetchTestsForDevice","testsResponse","entities","test","list","readMode","testsList","items","console","log","testsForDevice","filter","Device","completedTestsCount","incompleteTestsCount","forEach","DeviceName","Completed","error","show","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","Footer","variant","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/src/Routes/SummaryModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { vendiaClient } from '../vendiaClient';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nconst SummaryModal = ({ deviceId, onHide }) => {\r\n    const { client } = vendiaClient();\r\n    const [completedTests, setCompletedTests] = useState(0);\r\n    const [incompleteTests, setIncompleteTests] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchTestsForDevice = async () => {\r\n            try {\r\n                // Fetch tests associated with the specific device\r\n                const testsResponse = await client.entities.test.list({ readMode: \"NODE_LEDGERED\" });\r\n                const testsList = testsResponse.items;\r\n\r\n                console.log(\"Tests List:\", testsList);\r\n\r\n                // Filter tests for the specified device\r\n                const testsForDevice = testsResponse.items.filter((test) => {\r\n                    console.log('DeviceId:', deviceId);\r\n                    console.log('Test Device:', test.Device);\r\n                    return test.Device === deviceId;\r\n                });\r\n\r\n\r\n\r\n                console.log(\"Tests for Device:\", testsForDevice);\r\n\r\n                let completedTestsCount = 0;\r\n                let incompleteTestsCount = 0;\r\n\r\n                testsForDevice.forEach((test) => {\r\n                    console.log('Processing Test:', test);\r\n                    console.log('Condition Check:', test.DeviceName === deviceId);\r\n\r\n                    // Check if the test is completed or not\r\n                    if (test.Completed) {\r\n                        completedTestsCount += 1;\r\n                    } else {\r\n                        incompleteTestsCount += 1;\r\n                    }\r\n                });\r\n\r\n\r\n                // Update state with the counts\r\n                setCompletedTests(completedTestsCount);\r\n                setIncompleteTests(incompleteTestsCount);\r\n            } catch (error) {\r\n                console.error('Error fetching tests response:', error);\r\n            }\r\n        };\r\n\r\n\r\n        fetchTestsForDevice();\r\n    }, [client, deviceId]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Modal show={true} onHide={onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Summary</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    <p>\r\n                        <strong>Total Number of Tets Assigned:</strong> {completedTests + incompleteTests}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Tests Completed:</strong> {completedTests}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Tests Incompleted:</strong> {incompleteTests}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onHide}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default SummaryModal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}