{"ast":null,"code":"import isPromise from \"./jsutils/isPromise.mjs\";\nimport { parse } from \"./language/parser.mjs\";\nimport { validate } from \"./validation/validate.mjs\";\nimport { validateSchema } from \"./type/validate.mjs\";\nimport { execute } from \"./execution/execute.mjs\";\n/**\r\n * This is the primary entry point function for fulfilling GraphQL operations\r\n * by parsing, validating, and executing a GraphQL document along side a\r\n * GraphQL schema.\r\n *\r\n * More sophisticated GraphQL servers, such as those which persist queries,\r\n * may wish to separate the validation and execution phases to a static time\r\n * tooling step, and a server runtime step.\r\n *\r\n * Accepts either an object with named arguments, or individual arguments:\r\n *\r\n * schema:\r\n *    The GraphQL type system to use when validating and executing a query.\r\n * source:\r\n *    A GraphQL language formatted string representing the requested operation.\r\n * rootValue:\r\n *    The value provided as the first argument to resolver functions on the top\r\n *    level type (e.g. the query object type).\r\n * contextValue:\r\n *    The context value is provided as an argument to resolver functions after\r\n *    field arguments. It is used to pass shared information useful at any point\r\n *    during executing this query, for example the currently logged in user and\r\n *    connections to databases or other services.\r\n * variableValues:\r\n *    A mapping of variable name to runtime value to use for all variables\r\n *    defined in the requestString.\r\n * operationName:\r\n *    The name of the operation to use if requestString contains multiple\r\n *    possible operations. Can be omitted if requestString contains only\r\n *    one operation.\r\n * fieldResolver:\r\n *    A resolver function to use when one is not provided by the schema.\r\n *    If not provided, the default field resolver is used (which looks for a\r\n *    value or method on the source value with the field's name).\r\n * typeResolver:\r\n *    A type resolver function to use when none is provided by the schema.\r\n *    If not provided, the default type resolver is used (which looks for a\r\n *    `__typename` field or alternatively calls the `isTypeOf` method).\r\n */\n\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve(\n    // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\n      schema: argsOrSchema,\n      source: source,\n      rootValue: rootValue,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      operationName: operationName,\n      fieldResolver: fieldResolver,\n      typeResolver: typeResolver\n    }));\n  });\n}\n/**\r\n * The graphqlSync function also fulfills GraphQL operations by parsing,\r\n * validating, and executing a GraphQL document along side a GraphQL schema.\r\n * However, it guarantees to complete synchronously (or throw an error) assuming\r\n * that all field resolvers are also synchronous.\r\n */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\n    schema: argsOrSchema,\n    source: source,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  }); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n  return result;\n}\nfunction graphqlImpl(args) {\n  var schema = args.schema,\n    source = args.source,\n    rootValue = args.rootValue,\n    contextValue = args.contextValue,\n    variableValues = args.variableValues,\n    operationName = args.operationName,\n    fieldResolver = args.fieldResolver,\n    typeResolver = args.typeResolver; // Validate Schema\n\n  var schemaValidationErrors = validateSchema(schema);\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n  var document;\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n  var validationErrors = validate(schema, document);\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n  return execute({\n    schema: schema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}","map":{"version":3,"names":["isPromise","parse","validate","validateSchema","execute","graphql","argsOrSchema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","_arguments","arguments","Promise","resolve","length","graphqlImpl","schema","graphqlSync","result","Error","args","schemaValidationErrors","errors","document","syntaxError","validationErrors"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainProject/BeamTeamCSC131/node_modules/graphql/graphql.mjs"],"sourcesContent":["import isPromise from \"./jsutils/isPromise.mjs\";\r\nimport { parse } from \"./language/parser.mjs\";\r\nimport { validate } from \"./validation/validate.mjs\";\r\nimport { validateSchema } from \"./type/validate.mjs\";\r\nimport { execute } from \"./execution/execute.mjs\";\r\n/**\r\n * This is the primary entry point function for fulfilling GraphQL operations\r\n * by parsing, validating, and executing a GraphQL document along side a\r\n * GraphQL schema.\r\n *\r\n * More sophisticated GraphQL servers, such as those which persist queries,\r\n * may wish to separate the validation and execution phases to a static time\r\n * tooling step, and a server runtime step.\r\n *\r\n * Accepts either an object with named arguments, or individual arguments:\r\n *\r\n * schema:\r\n *    The GraphQL type system to use when validating and executing a query.\r\n * source:\r\n *    A GraphQL language formatted string representing the requested operation.\r\n * rootValue:\r\n *    The value provided as the first argument to resolver functions on the top\r\n *    level type (e.g. the query object type).\r\n * contextValue:\r\n *    The context value is provided as an argument to resolver functions after\r\n *    field arguments. It is used to pass shared information useful at any point\r\n *    during executing this query, for example the currently logged in user and\r\n *    connections to databases or other services.\r\n * variableValues:\r\n *    A mapping of variable name to runtime value to use for all variables\r\n *    defined in the requestString.\r\n * operationName:\r\n *    The name of the operation to use if requestString contains multiple\r\n *    possible operations. Can be omitted if requestString contains only\r\n *    one operation.\r\n * fieldResolver:\r\n *    A resolver function to use when one is not provided by the schema.\r\n *    If not provided, the default field resolver is used (which looks for a\r\n *    value or method on the source value with the field's name).\r\n * typeResolver:\r\n *    A type resolver function to use when none is provided by the schema.\r\n *    If not provided, the default type resolver is used (which looks for a\r\n *    `__typename` field or alternatively calls the `isTypeOf` method).\r\n */\r\n\r\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\r\n  var _arguments = arguments;\r\n\r\n  /* eslint-enable no-redeclare */\r\n  // Always return a Promise for a consistent API.\r\n  return new Promise(function (resolve) {\r\n    return resolve( // Extract arguments from object args if provided.\r\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\r\n      schema: argsOrSchema,\r\n      source: source,\r\n      rootValue: rootValue,\r\n      contextValue: contextValue,\r\n      variableValues: variableValues,\r\n      operationName: operationName,\r\n      fieldResolver: fieldResolver,\r\n      typeResolver: typeResolver\r\n    }));\r\n  });\r\n}\r\n/**\r\n * The graphqlSync function also fulfills GraphQL operations by parsing,\r\n * validating, and executing a GraphQL document along side a GraphQL schema.\r\n * However, it guarantees to complete synchronously (or throw an error) assuming\r\n * that all field resolvers are also synchronous.\r\n */\r\n\r\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\r\n  /* eslint-enable no-redeclare */\r\n  // Extract arguments from object args if provided.\r\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\r\n    schema: argsOrSchema,\r\n    source: source,\r\n    rootValue: rootValue,\r\n    contextValue: contextValue,\r\n    variableValues: variableValues,\r\n    operationName: operationName,\r\n    fieldResolver: fieldResolver,\r\n    typeResolver: typeResolver\r\n  }); // Assert that the execution was synchronous.\r\n\r\n  if (isPromise(result)) {\r\n    throw new Error('GraphQL execution failed to complete synchronously.');\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction graphqlImpl(args) {\r\n  var schema = args.schema,\r\n      source = args.source,\r\n      rootValue = args.rootValue,\r\n      contextValue = args.contextValue,\r\n      variableValues = args.variableValues,\r\n      operationName = args.operationName,\r\n      fieldResolver = args.fieldResolver,\r\n      typeResolver = args.typeResolver; // Validate Schema\r\n\r\n  var schemaValidationErrors = validateSchema(schema);\r\n\r\n  if (schemaValidationErrors.length > 0) {\r\n    return {\r\n      errors: schemaValidationErrors\r\n    };\r\n  } // Parse\r\n\r\n\r\n  var document;\r\n\r\n  try {\r\n    document = parse(source);\r\n  } catch (syntaxError) {\r\n    return {\r\n      errors: [syntaxError]\r\n    };\r\n  } // Validate\r\n\r\n\r\n  var validationErrors = validate(schema, document);\r\n\r\n  if (validationErrors.length > 0) {\r\n    return {\r\n      errors: validationErrors\r\n    };\r\n  } // Execute\r\n\r\n\r\n  return execute({\r\n    schema: schema,\r\n    document: document,\r\n    rootValue: rootValue,\r\n    contextValue: contextValue,\r\n    variableValues: variableValues,\r\n    operationName: operationName,\r\n    fieldResolver: fieldResolver,\r\n    typeResolver: typeResolver\r\n  });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}