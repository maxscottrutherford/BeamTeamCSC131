{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\r\n * Unique field definition names\r\n *\r\n * A GraphQL complex type is only valid if all its fields are uniquely named.\r\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n    var typeName = node.name.value;\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    var fieldNames = knownFieldNames[typeName];\n    for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {\n      var fieldDef = fieldNodes[_i2];\n      var fieldName = fieldDef.name.value;\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), fieldDef.name));\n      } else if (fieldNames[fieldName]) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), [fieldNames[fieldName], fieldDef.name]));\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n    return false;\n  }\n}\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n  return false;\n}","map":{"version":3,"names":["GraphQLError","isObjectType","isInterfaceType","isInputObjectType","UniqueFieldDefinitionNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","_node$fields","typeName","name","value","fieldNodes","fields","fieldNames","_i2","length","fieldDef","fieldName","hasField","reportError","concat","type","getFields"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainProject/BeamTeamCSC131/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\r\nimport { isObjectType, isInterfaceType, isInputObjectType } from \"../../type/definition.mjs\";\r\n\r\n/**\r\n * Unique field definition names\r\n *\r\n * A GraphQL complex type is only valid if all its fields are uniquely named.\r\n */\r\nexport function UniqueFieldDefinitionNamesRule(context) {\r\n  var schema = context.getSchema();\r\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\r\n  var knownFieldNames = Object.create(null);\r\n  return {\r\n    InputObjectTypeDefinition: checkFieldUniqueness,\r\n    InputObjectTypeExtension: checkFieldUniqueness,\r\n    InterfaceTypeDefinition: checkFieldUniqueness,\r\n    InterfaceTypeExtension: checkFieldUniqueness,\r\n    ObjectTypeDefinition: checkFieldUniqueness,\r\n    ObjectTypeExtension: checkFieldUniqueness\r\n  };\r\n\r\n  function checkFieldUniqueness(node) {\r\n    var _node$fields;\r\n\r\n    var typeName = node.name.value;\r\n\r\n    if (!knownFieldNames[typeName]) {\r\n      knownFieldNames[typeName] = Object.create(null);\r\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\r\n\r\n\r\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\r\n    var fieldNames = knownFieldNames[typeName];\r\n\r\n    for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {\r\n      var fieldDef = fieldNodes[_i2];\r\n      var fieldName = fieldDef.name.value;\r\n\r\n      if (hasField(existingTypeMap[typeName], fieldName)) {\r\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), fieldDef.name));\r\n      } else if (fieldNames[fieldName]) {\r\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), [fieldNames[fieldName], fieldDef.name]));\r\n      } else {\r\n        fieldNames[fieldName] = fieldDef.name;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction hasField(type, fieldName) {\r\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\r\n    return type.getFields()[fieldName] != null;\r\n  }\r\n\r\n  return false;\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,YAAY,EAAEC,eAAe,EAAEC,iBAAiB,QAAQ,2BAA2B;;AAE5F;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,8BAA8BA,CAACC,OAAO,EAAE;EACtD,IAAIC,MAAM,GAAGD,OAAO,CAACE,SAAS,CAAC,CAAC;EAChC,IAAIC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAU,CAAC,CAAC,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACxE,IAAIC,eAAe,GAAGF,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACzC,OAAO;IACLE,yBAAyB,EAAEC,oBAAoB;IAC/CC,wBAAwB,EAAED,oBAAoB;IAC9CE,uBAAuB,EAAEF,oBAAoB;IAC7CG,sBAAsB,EAAEH,oBAAoB;IAC5CI,oBAAoB,EAAEJ,oBAAoB;IAC1CK,mBAAmB,EAAEL;EACvB,CAAC;EAED,SAASA,oBAAoBA,CAACM,IAAI,EAAE;IAClC,IAAIC,YAAY;IAEhB,IAAIC,QAAQ,GAAGF,IAAI,CAACG,IAAI,CAACC,KAAK;IAE9B,IAAI,CAACZ,eAAe,CAACU,QAAQ,CAAC,EAAE;MAC9BV,eAAe,CAACU,QAAQ,CAAC,GAAGZ,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IACjD,CAAC,CAAC;;IAGF,IAAIc,UAAU,GAAG,CAACJ,YAAY,GAAGD,IAAI,CAACM,MAAM,MAAM,IAAI,IAAIL,YAAY,KAAK,KAAK,CAAC,GAAGA,YAAY,GAAG,EAAE;IACrG,IAAIM,UAAU,GAAGf,eAAe,CAACU,QAAQ,CAAC;IAE1C,KAAK,IAAIM,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,UAAU,CAACI,MAAM,EAAED,GAAG,EAAE,EAAE;MAChD,IAAIE,QAAQ,GAAGL,UAAU,CAACG,GAAG,CAAC;MAC9B,IAAIG,SAAS,GAAGD,QAAQ,CAACP,IAAI,CAACC,KAAK;MAEnC,IAAIQ,QAAQ,CAACxB,eAAe,CAACc,QAAQ,CAAC,EAAES,SAAS,CAAC,EAAE;QAClD1B,OAAO,CAAC4B,WAAW,CAAC,IAAIjC,YAAY,CAAC,UAAU,CAACkC,MAAM,CAACZ,QAAQ,EAAE,GAAG,CAAC,CAACY,MAAM,CAACH,SAAS,EAAE,oFAAoF,CAAC,EAAED,QAAQ,CAACP,IAAI,CAAC,CAAC;MAChM,CAAC,MAAM,IAAII,UAAU,CAACI,SAAS,CAAC,EAAE;QAChC1B,OAAO,CAAC4B,WAAW,CAAC,IAAIjC,YAAY,CAAC,UAAU,CAACkC,MAAM,CAACZ,QAAQ,EAAE,GAAG,CAAC,CAACY,MAAM,CAACH,SAAS,EAAE,8BAA8B,CAAC,EAAE,CAACJ,UAAU,CAACI,SAAS,CAAC,EAAED,QAAQ,CAACP,IAAI,CAAC,CAAC,CAAC;MACnK,CAAC,MAAM;QACLI,UAAU,CAACI,SAAS,CAAC,GAAGD,QAAQ,CAACP,IAAI;MACvC;IACF;IAEA,OAAO,KAAK;EACd;AACF;AAEA,SAASS,QAAQA,CAACG,IAAI,EAAEJ,SAAS,EAAE;EACjC,IAAI9B,YAAY,CAACkC,IAAI,CAAC,IAAIjC,eAAe,CAACiC,IAAI,CAAC,IAAIhC,iBAAiB,CAACgC,IAAI,CAAC,EAAE;IAC1E,OAAOA,IAAI,CAACC,SAAS,CAAC,CAAC,CAACL,SAAS,CAAC,IAAI,IAAI;EAC5C;EAEA,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}