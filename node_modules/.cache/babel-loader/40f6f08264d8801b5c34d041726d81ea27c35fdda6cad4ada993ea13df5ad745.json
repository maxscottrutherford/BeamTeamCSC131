{"ast":null,"code":"import inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLList, GraphQLNonNull } from \"../type/definition.mjs\";\n/**\r\n * Given a Schema and an AST node describing a type, return a GraphQLType\r\n * definition which applies to that type. For example, if provided the parsed\r\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\r\n * the type called \"User\" found in the schema. If a type called \"User\" is not\r\n * found in the schema, then undefined will be returned.\r\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLList(innerType);\n  }\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLNonNull(innerType);\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // istanbul ignore next (Not reachable. All possible type nodes have been considered)\n\n  false || invariant(0, 'Unexpected type node: ' + inspect(typeNode));\n}","map":{"version":3,"names":["inspect","invariant","Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","innerType","kind","LIST_TYPE","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value"],"sources":["C:/Users/mabur/Desktop/College/SacState/CSC131/MainRepo6/BeamTeamCSC131/node_modules/graphql/utilities/typeFromAST.mjs"],"sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\r\nimport invariant from \"../jsutils/invariant.mjs\";\r\nimport { Kind } from \"../language/kinds.mjs\";\r\nimport { GraphQLList, GraphQLNonNull } from \"../type/definition.mjs\";\r\n/**\r\n * Given a Schema and an AST node describing a type, return a GraphQLType\r\n * definition which applies to that type. For example, if provided the parsed\r\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\r\n * the type called \"User\" found in the schema. If a type called \"User\" is not\r\n * found in the schema, then undefined will be returned.\r\n */\r\n\r\n/* eslint-disable no-redeclare */\r\n\r\nexport function typeFromAST(schema, typeNode) {\r\n  /* eslint-enable no-redeclare */\r\n  var innerType;\r\n\r\n  if (typeNode.kind === Kind.LIST_TYPE) {\r\n    innerType = typeFromAST(schema, typeNode.type);\r\n    return innerType && new GraphQLList(innerType);\r\n  }\r\n\r\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\r\n    innerType = typeFromAST(schema, typeNode.type);\r\n    return innerType && new GraphQLNonNull(innerType);\r\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\r\n\r\n\r\n  if (typeNode.kind === Kind.NAMED_TYPE) {\r\n    return schema.getType(typeNode.name.value);\r\n  } // istanbul ignore next (Not reachable. All possible type nodes have been considered)\r\n\r\n\r\n  false || invariant(0, 'Unexpected type node: ' + inspect(typeNode));\r\n}\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,wBAAwB;AAC5C,OAAOC,SAAS,MAAM,0BAA0B;AAChD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,WAAW,EAAEC,cAAc,QAAQ,wBAAwB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAC5C;EACA,IAAIC,SAAS;EAEb,IAAID,QAAQ,CAACE,IAAI,KAAKP,IAAI,CAACQ,SAAS,EAAE;IACpCF,SAAS,GAAGH,WAAW,CAACC,MAAM,EAAEC,QAAQ,CAACI,IAAI,CAAC;IAC9C,OAAOH,SAAS,IAAI,IAAIL,WAAW,CAACK,SAAS,CAAC;EAChD;EAEA,IAAID,QAAQ,CAACE,IAAI,KAAKP,IAAI,CAACU,aAAa,EAAE;IACxCJ,SAAS,GAAGH,WAAW,CAACC,MAAM,EAAEC,QAAQ,CAACI,IAAI,CAAC;IAC9C,OAAOH,SAAS,IAAI,IAAIJ,cAAc,CAACI,SAAS,CAAC;EACnD,CAAC,CAAC;;EAGF,IAAID,QAAQ,CAACE,IAAI,KAAKP,IAAI,CAACW,UAAU,EAAE;IACrC,OAAOP,MAAM,CAACQ,OAAO,CAACP,QAAQ,CAACQ,IAAI,CAACC,KAAK,CAAC;EAC5C,CAAC,CAAC;;EAGF,KAAK,IAAIf,SAAS,CAAC,CAAC,EAAE,wBAAwB,GAAGD,OAAO,CAACO,QAAQ,CAAC,CAAC;AACrE"},"metadata":{},"sourceType":"module","externalDependencies":[]}